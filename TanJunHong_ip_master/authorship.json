[
  {
    "path": "README.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# Duke project template"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "This is a project template for a greenfield Java project. It\u0027s named after the Java mascot _Duke_. Given below are instructions on how to use it."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "## Setting up in Intellij"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "Prerequisites: JDK 11, update Intellij to the most recent version."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "1. Open Intellij (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "1. Set up the correct JDK version, as follows:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Click `Configure` \u003e `Structure for New Projects` and then `Project Settings` \u003e `Project` \u003e `Project SDK`"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "   1. If JDK 11 is listed in the drop down, select it. If it is not, click `New...` and select the directory where you installed JDK 11"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Click `OK`"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "1. Import the project into Intellij as follows:"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Click `Open or Import`."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Select the project directory, and click `OK`"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "   1. If there are any further prompts, accept the defaults."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "1. After the importing is complete, locate the `src/main/java/duke/Duke.java` file, right-click it, and choose `Run Duke.main()`. If the setup is correct, you should see something like the below:"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "   \t____________________________________________________________"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "   \t Hello! I\u0027m Duke"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "   \t What can I do for you?"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "   \t____________________________________________________________"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "   "
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      }
    ],
    "authorContributionMap": {
      "TanJunHong": 6,
      "-": 19
    }
  },
  {
    "path": "src/main/java/duke/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "import duke.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "import duke.data.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "import duke.data.exception.DukeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "import duke.parser.Parser;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": " * Personal assistant chat bot."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    private final Storage storage;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    private final Ui ui;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    private TaskList tasks;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     * Initializes chat bot."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     * @param filePath Path to store and load tasks."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    public Duke(String filePath) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        storage \u003d new Storage(filePath);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "            tasks \u003d new TaskList(storage.load());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "            ui.showLoadingError();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "            tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     * Starts Duke."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     * @param args Command line argument."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        new Duke(\"data/tasks.txt\").run();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     * Runs Duke."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    public void run() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        ui.showWelcome();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        boolean isExit \u003d false;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        while (!isExit) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "                String fullCommand \u003d ui.readCommand();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "                ui.showLine(); // show the divider line (\"_______\")"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "                Command c \u003d Parser.parse(fullCommand);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "                c.execute(tasks, ui, storage);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "                isExit \u003d c.isExit();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "            } catch (DukeException e) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "                ui.showError(e.getMessage());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "            } finally {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "                ui.showLine();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TanJunHong": 63,
      "-": 1
    }
  },
  {
    "path": "src/main/java/duke/commands/AddCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "import duke.data.TaskList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "import duke.data.exception.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "import duke.data.task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": " * Adds a task to Duke."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    public static final String TODO_COMMAND_WORD \u003d \"todo\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    public static final String DEADLINE_COMMAND_WORD \u003d \"deadline\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    public static final String EVENT_COMMAND_WORD \u003d \"event\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    private final Task task;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     * Initializes task to add."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     * @param task Task to add."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    public AddCommand(Task task) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        this.task \u003d task;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     * Adds a task, shows the task and saves list of tasks into file."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     * @param tasks   TaskList object."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     * @param ui      Ui object."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     * @param storage Storage object."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     * @throws DukeException If there is issue adding task."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        tasks.addTask(task);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        ui.showAdd(task, tasks.getSize());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        storage.save(tasks);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TanJunHong": 43
    }
  },
  {
    "path": "src/main/java/duke/commands/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "import duke.data.TaskList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "import duke.data.exception.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": " * Parent Command class."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    boolean isExit;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     * Initializes command to execute and set exit status to false."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    public Command() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        isExit \u003d false;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     * Executes command."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     * @param tasks   TaskList object."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     * @param ui      Ui object."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     * @param storage Storage object."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     * @throws DukeException If there is issue executing command."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    public abstract void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     * Returns Duke\u0027s exit status."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     * @return Exit status."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        return isExit;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TanJunHong": 40
    }
  },
  {
    "path": "src/main/java/duke/commands/DeleteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "import duke.data.TaskList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "import duke.data.exception.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "import duke.data.task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": " * Deletes a task from Duke."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    private final int taskNumber;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     * Initializes the task number of task to delete."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     * @param taskNumber Task number of task to delete."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    public DeleteCommand(int taskNumber) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        this.taskNumber \u003d taskNumber;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     * Deletes a task, shows the task and saves remaining list of tasks into file."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     * @param tasks   TaskList object."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     * @param ui      Ui object."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     * @param storage Storage object."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     * @throws DukeException If there is issue deleting task."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        Task task \u003d tasks.getTask(taskNumber);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        tasks.deleteTask(taskNumber);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        ui.showDelete(task, tasks.getSize());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        storage.save(tasks);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TanJunHong": 42
    }
  },
  {
    "path": "src/main/java/duke/commands/DoneCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "import duke.data.TaskList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "import duke.data.exception.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": " * Marks a task as done."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "public class DoneCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"done\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    private final int taskNumber;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     * Initializes the task number of task to mark as done."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     * @param taskNumber Task number of task to mark as done."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    public DoneCommand(int taskNumber) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        this.taskNumber \u003d taskNumber;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     * Marks task as done, shows the task and saves list of tasks into file."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     * @param tasks   TaskList object."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     * @param ui      Ui object."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     * @param storage Storage object."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     * @throws DukeException If there is issue marking task as done."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        tasks.markTaskAsDone(taskNumber);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        ui.showDone(tasks.getTask(taskNumber));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        storage.save(tasks);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TanJunHong": 40
    }
  },
  {
    "path": "src/main/java/duke/commands/ExitCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "import duke.data.TaskList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": " * Exits Duke."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"bye\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     * Says goodbye to user and exits Duke."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     * @param tasks   TaskList object."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     * @param ui      Ui object."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     * @param storage Storage object."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        isExit \u003d true;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        ui.showExit();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TanJunHong": 26
    }
  },
  {
    "path": "src/main/java/duke/commands/FindCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "import duke.data.TaskList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": " * Finds tasks containing keyword."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"find\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    private final String keyword;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     * Initializes keyword to find."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     * @param keyword Keyword to search."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    public FindCommand(String keyword) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        this.keyword \u003d keyword;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     * Finds tasks containing keyword and display them."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     * @param tasks   TaskList object."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     * @param ui      Ui object."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     * @param storage Storage object."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        ui.showFind(tasks.getTasks(keyword));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TanJunHong": 36
    }
  },
  {
    "path": "src/main/java/duke/commands/ListCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "import duke.data.TaskList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": " * Lists tasks in Duke."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"list\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    private final LocalDate date;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    private final LocalTime time;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     * Initializes date \u0026 time to filter."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     * @param date Date to filter."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     * @param time Time to filter."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    public ListCommand(LocalDate date, LocalTime time) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        this.time \u003d time;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     * Shows the list of tasks in Duke using date \u0026 time to filter."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     * @param tasks   TaskList object."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     * @param ui      Ui object."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     * @param storage Storage object."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        ui.showList(tasks.getTasks(date, time));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TanJunHong": 43
    }
  },
  {
    "path": "src/main/java/duke/data/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "package duke.data;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "import duke.data.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "import duke.data.task.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": " * Stores tasks in ArrayList."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    private final ArrayList\u003cTask\u003e tasks;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     * Initializes tasks ArrayList."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    public TaskList() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     * Initializes tasks ArrayList using parameter."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     * @param tasks Tasks list to use."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    public TaskList(ArrayList\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        this.tasks \u003d tasks;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     * Returns size of tasks."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     * @return Length of tasks."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    public int getSize() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        return tasks.size();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     * Returns task of corresponding task number."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     * @param taskNumber Task number of task."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     * @return Task of the corresponding task number."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     * @throws DukeException If task number does not exist."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    public Task getTask(int taskNumber) throws DukeException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        int index \u003d findTaskIndex(taskNumber);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        return getTaskUsingIndex(index);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     * Returns task using index."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     * @param index Index of task."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     * @return Task at that index."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    public Task getTaskUsingIndex(int index) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        return tasks.get(index);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     * Returns ArrayList of tasks that are of corresponding date \u0026 time."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     * @param date Date of task."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     * @param time Time of task."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     * @return Tasks with corresponding date \u0026 time."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    public ArrayList\u003cTask\u003e getTasks(LocalDate date, LocalTime time) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        return (ArrayList\u003cTask\u003e) tasks.stream()"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "                .filter(task -\u003e date \u003d\u003d null || date.equals(task.getDate()))"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "                .filter(task -\u003e time \u003d\u003d null || time.equals(task.getTime()))"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     * Returns ArrayList of tasks that contains keyword."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     * @param keyword Keyword to search."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     * @return Tasks that contains keyword."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    public ArrayList\u003cTask\u003e getTasks(String keyword) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        return (ArrayList\u003cTask\u003e) tasks.stream()"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "                .filter(task -\u003e task.getDescription().toLowerCase().contains(keyword.toLowerCase()))"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     * Adds task to tasks ArrayList."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     * @param task Task to add."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    public void addTask(Task task) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        tasks.add(task);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     * Removes task from tasks ArrayList."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     * @param taskNumber Task number of task to remove."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     * @throws DukeException If task number is invalid."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    public void deleteTask(int taskNumber) throws DukeException {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        int index \u003d findTaskIndex(taskNumber);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        tasks.remove(index);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     * Marks task as done."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     * @param taskNumber Task number of task to mark as done."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     * @throws DukeException If task number is invalid."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    public void markTaskAsDone(int taskNumber) throws DukeException {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        int index \u003d findTaskIndex(taskNumber);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        tasks.get(index).markAsDone();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     * Returns index of task using task number."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     * @param taskNumber Task number of task to find index."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     * @return Index of task."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     * @throws DukeException If task number is invalid."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    private int findTaskIndex(int taskNumber) throws DukeException {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        for (int i \u003d 0; i \u003c tasks.size(); i++) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "            if (tasks.get(i).getTaskNumber() \u003d\u003d taskNumber) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "                return i;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        throw new DukeException(\"Invalid task number.\");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TanJunHong": 137
    }
  },
  {
    "path": "src/main/java/duke/data/exception/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "package duke.data.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": " * Throws exceptions relating to Duke."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     * Initializes message to throw."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     * @param message Exception message to show."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    public DukeException(String message) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        super(\"☹ OOPS!!! \" + message);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TanJunHong": 16
    }
  },
  {
    "path": "src/main/java/duke/data/task/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "package duke.data.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": " * Deadline task."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    public static final String LOGO \u003d \"D\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    public static final String DELIMITER \u003d \"/by\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     * Initializes deadline task."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     * @param description Description of deadline."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     * @param isDone      Completion status of deadline."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     * @param date        Date of deadline."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     * @param time        Time of deadline."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    public Deadline(String description, boolean isDone, LocalDate date, LocalTime time) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        super(description, isDone, date, time);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     * Returns saving task format."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     * @return String of task format for saving."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    public String getFormattedTask() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        return LOGO + super.getFormattedTask() + \" | \" + getDate() + getTimeString() + System.lineSeparator();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     * Returns string version of task."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     * @return Task string"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        return \"[\" + LOGO + \"]\" + super.toString() + \" (by: \" + getDateString() + getTimeString() + \")\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TanJunHong": 46
    }
  },
  {
    "path": "src/main/java/duke/data/task/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "package duke.data.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": " * Event task."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    public static final String LOGO \u003d \"E\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    public static final String DELIMITER \u003d \"/at\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     * Initializes event."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     * @param description Description of event."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     * @param isDone      Completion status of event."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     * @param date        Date of event."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     * @param time        Time of event."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    public Event(String description, boolean isDone, LocalDate date, LocalTime time) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        super(description, isDone, date, time);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     * Returns saving task format."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     * @return String of task format for saving."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    public String getFormattedTask() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        return LOGO + super.getFormattedTask() + \" | \" + getDate() + getTimeString() + System.lineSeparator();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     * Returns string version of task."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     * @return Task string"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        return \"[\" + LOGO + \"]\" + super.toString() + \" (at: \" + getDateString() + getTimeString() + \")\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TanJunHong": 46
    }
  },
  {
    "path": "src/main/java/duke/data/task/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "package duke.data.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": " * Parent Task class."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "public abstract class Task {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    public static final String COMPLETE \u003d \"1\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    public static final String INCOMPLETE \u003d \"0\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    private static final String TICK \u003d \"[✓]\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    private static final String CROSS \u003d \"[✗]\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    private static int numberOfTasks \u003d 0;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    private final int taskNumber;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    private final String description;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    private final LocalDate date;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    private final LocalTime time;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    private boolean isDone;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     * Initializes task."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     * @param description Description of task."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     * @param isDone      Completion status of task."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     * @param date        Date of task."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     * @param time        Time of task."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    Task(String description, boolean isDone, LocalDate date, LocalTime time) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        this.isDone \u003d isDone;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        this.time \u003d time;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        taskNumber \u003d ++numberOfTasks;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     * Marks completion status as true."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    public void markAsDone() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        this.isDone \u003d true;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     * Returns date."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     * @return Date of task."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    public LocalDate getDate() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        return date;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     * Returns time."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     * @return Time of task."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    public LocalTime getTime() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        return time;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     * Returns date string."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     * @return Date string of task."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    public String getDateString() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        return getDate().format(DateTimeFormatter.ofPattern(\"MMM d yyyy\"));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     * Returns time string."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     * @return Time string of task."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    public String getTimeString() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        return getTime() \u003d\u003d null ? \"\" : \" \" + getTime().toString();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     * Returns description."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     * @return Description of task."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     * Returns status icon of task."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     * @return String status icon of task."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    private String getStatusIcon() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        return isDone ? TICK : CROSS;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     * Returns task number."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     * @return Task number of task."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    public int getTaskNumber() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        return taskNumber;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     * Returns saving task format."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     * @return String of task format for saving."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    public String getFormattedTask() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        return \" | \" + (isDone ? COMPLETE : INCOMPLETE) + \" | \" + description;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     * Returns string version of task."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     * @return Task string"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        return getStatusIcon() + \" \" + getDescription();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TanJunHong": 129
    }
  },
  {
    "path": "src/main/java/duke/data/task/ToDo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "package duke.data.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": " * Todo task."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "public class ToDo extends Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    public static final String LOGO \u003d \"T\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     * Initializes todo."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     * @param description Description of todo."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     * @param isDone      Completion status of todo."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    public ToDo(String description, boolean isDone) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        super(description, isDone, null, null);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     * Returns saving task format."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     * @return String of task format for saving."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    public String getFormattedTask() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        return LOGO + super.getFormattedTask() + System.lineSeparator();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     * Returns string version of task."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     * @return Task string"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        return \"[\" + LOGO + \"]\" + super.toString();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TanJunHong": 39
    }
  },
  {
    "path": "src/main/java/duke/parser/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "package duke.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "import duke.commands.*;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "import duke.data.exception.DukeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "import duke.data.task.Deadline;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "import duke.data.task.Event;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "import duke.data.task.Task;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "import duke.data.task.ToDo;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": " * Parses user input and file."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    private final static int MAX_INSTRUCTION_LENGTH \u003d 3;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     * Parses user input, and returns corresponding command."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     * @param fullCommand String of user input to parse."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     * @return Command to execute."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     * @throws DukeException If command is invalid."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    public static Command parse(String fullCommand) throws DukeException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        String[] instructions \u003d fullCommand.split(\" \", MAX_INSTRUCTION_LENGTH - 1);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        String commandWord \u003d instructions[0].trim().toLowerCase();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        String[] furtherInstructions;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        String description;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        int taskNumber;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        Command command;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        Task task;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        case ListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "            LocalDate date \u003d null;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "            LocalTime time \u003d null;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "            if (instructions.length \u003e 1) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "                String dateTimeFilter \u003d instructions[1].trim();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "                Object[] dateTime \u003d parseDateTime(dateTimeFilter);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "                date \u003d (LocalDate) dateTime[0];"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "                time \u003d (LocalTime) dateTime[1];"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "            command \u003d new ListCommand(date, time);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        case FindCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "            verifyInstruction(instructions);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "            String keyword \u003d instructions[1].trim();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "            command \u003d new FindCommand(keyword);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "            command \u003d new ExitCommand();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        case AddCommand.TODO_COMMAND_WORD:"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "            verifyInstruction(instructions);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "            description \u003d instructions[1].trim();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "            task \u003d new ToDo(description, false);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "            command \u003d new AddCommand(task);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        case AddCommand.DEADLINE_COMMAND_WORD:"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "            furtherInstructions \u003d splitDescriptionAndDateTime(instructions[1], Deadline.DELIMITER);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "            description \u003d furtherInstructions[0].trim();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "            String by \u003d furtherInstructions[1].trim();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "            Object[] byDateTime \u003d parseDateTime(by);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "            LocalDate byDate \u003d (LocalDate) byDateTime[0];"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "            LocalTime byTime \u003d (LocalTime) byDateTime[1];"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "            task \u003d new Deadline(description, false, byDate, byTime);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "            command \u003d new AddCommand(task);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        case AddCommand.EVENT_COMMAND_WORD:"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "            furtherInstructions \u003d splitDescriptionAndDateTime(instructions[1], Event.DELIMITER);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "            description \u003d furtherInstructions[0].trim();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "            String at \u003d furtherInstructions[1].trim();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "            Object[] atDateTime \u003d parseDateTime(at);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "            LocalDate atDate \u003d (LocalDate) atDateTime[0];"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "            LocalTime atTime \u003d (LocalTime) atDateTime[1];"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "            task \u003d new Event(description, false, atDate, atTime);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "            command \u003d new AddCommand(task);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        case DoneCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "            verifyInstruction(instructions);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "            taskNumber \u003d convertToNumber(instructions[1]);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "            command \u003d new DoneCommand(taskNumber);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        case DeleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "            verifyInstruction(instructions);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "            taskNumber \u003d convertToNumber(instructions[1]);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "            command \u003d new DeleteCommand(taskNumber);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "            throw new DukeException(\"I\u0027m sorry, but I don\u0027t know what that means :-(\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        return command;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     * Converts string to integer and returns the number."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     * @param instruction String to convert."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     * @return Corresponding integer."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     * @throws DukeException If string is non-numeric."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    private static int convertToNumber(String instruction) throws DukeException {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        int taskNumber;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "            taskNumber \u003d Integer.parseInt(instruction);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "            throw new DukeException(\"Task number cannot be non-numeric.\");"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        return taskNumber;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     * Parses string into date \u0026 time."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     * @param line String to parse."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     * @return Object array containing date \u0026 time."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     * @throws DukeException If parsing fails."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    private static Object[] parseDateTime(String line) throws DukeException {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "            String[] dateTimeString \u003d line.split(\" \", 2);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "            LocalDate date \u003d LocalDate.parse(dateTimeString[0].trim());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "            LocalTime time \u003d null;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "            if (dateTimeString.length \u003d\u003d 2) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "                time \u003d LocalTime.parse(dateTimeString[1].trim());"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "            return new Object[]{date, time};"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "            throw new DukeException(\"Error parsing date/time\");"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     * Splits description and date/time, and returns array containing both."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     * @param line      String to split."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     * @param delimiter Delimiter for splitting."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     * @return String array containing description and date/time."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     * @throws DukeException If date/time does not exist, or unable to decipher either description or date/time."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    private static String[] splitDescriptionAndDateTime(String line, String delimiter) throws DukeException {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        String[] instructions \u003d line.split(delimiter, 2);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        verifyInstruction(instructions);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        return new String[]{instructions[0].trim(), instructions[1].trim()};"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     * Verifies if instructions are valid."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     * @param instructions Array to check."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     * @throws DukeException If date/time does not exist, or unable to decipher either description or date/time."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    private static void verifyInstruction(String[] instructions) throws DukeException {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        if (instructions.length !\u003d MAX_INSTRUCTION_LENGTH - 1) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "            throw new DukeException(\"The description of a \" + instructions[0] + \" cannot be empty.\");"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        } else if (instructions[0].isBlank() || instructions[1].isBlank()) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "            throw new DukeException(\"Cannot decipher description or date/time.\");"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     * Reads tasks from file."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     * @param line Line of task to read."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     * @return Task of corresponding line."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     * @throws DukeException If task is incomplete or invalid."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    public Task readTask(String line) throws DukeException {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        String[] instructions \u003d line.split(\"\\\\|\", MAX_INSTRUCTION_LENGTH + 1);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        verifyInstructionLength(instructions, MAX_INSTRUCTION_LENGTH);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        String taskType \u003d instructions[0].trim();"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        boolean isDone;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        String description \u003d instructions[2].trim();"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        Task task;"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        switch (instructions[1].trim()) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        case Task.COMPLETE:"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "            isDone \u003d true;"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        case Task.INCOMPLETE:"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "            isDone \u003d false;"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "            throw new DukeException(\"Unable to read task completion status.\");"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        switch (taskType) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        case Deadline.LOGO:"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "            verifyInstructionLength(instructions, MAX_INSTRUCTION_LENGTH + 1);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "            String by \u003d instructions[3].trim();"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "            Object[] byDateTime \u003d parseDateTime(by);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "            LocalDate byDate \u003d (LocalDate) byDateTime[0];"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "            LocalTime byTime \u003d (LocalTime) byDateTime[1];"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "            task \u003d new Deadline(description, isDone, byDate, byTime);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        case Event.LOGO:"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "            verifyInstructionLength(instructions, MAX_INSTRUCTION_LENGTH + 1);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "            String at \u003d instructions[3].trim();"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "            Object[] atDateTime \u003d parseDateTime(at);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "            LocalDate atDate \u003d (LocalDate) atDateTime[0];"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "            LocalTime atTime \u003d (LocalTime) atDateTime[1];"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "            task \u003d new Event(description, isDone, atDate, atTime);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        case ToDo.LOGO:"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "            task \u003d new ToDo(description, isDone);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "            throw new DukeException(\"Unable to read task type.\");"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        return task;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     * Checks if instructions length is correct."
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     * @param instructions      Array of string."
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     * @param instructionLength Correct length of array."
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     * @throws DukeException If array length is less than correct length."
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    private void verifyInstructionLength(String[] instructions, int instructionLength) throws DukeException {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        if (instructions.length \u003c instructionLength) {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "            throw new DukeException(\"Missing parameter(s) for task.\");"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TanJunHong": 235
    }
  },
  {
    "path": "src/main/java/duke/storage/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "package duke.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "import duke.data.TaskList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "import duke.data.exception.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "import duke.data.task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "import duke.parser.Parser;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "import java.io.BufferedReader;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "import java.io.BufferedWriter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": " * Stores tasks into file and loads tasks from file."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    private final String folder;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    private final String file;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     * Initializes path of folder and file."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     * @param filePath Full file path."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    public Storage(String filePath) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        int index \u003d filePath.lastIndexOf(\"/\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        folder \u003d filePath.substring(0, index);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        file \u003d filePath.substring(index + 1);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     * Loads tasks, stores them into ArrayList and returns the ArrayList."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     * @return ArrayList of tasks."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     * @throws DukeException If there is problem reading file."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    public ArrayList\u003cTask\u003e load() throws DukeException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        Path path \u003d Paths.get(folder, file);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        if (Files.exists(path)) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "                BufferedReader bufferedReader \u003d Files.newBufferedReader(path);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "                Parser parser \u003d new Parser();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "                while (true) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "                    String line \u003d bufferedReader.readLine();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "                    if (line \u003d\u003d null) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "                    Task task \u003d parser.readTask(line);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "                    tasks.add(task);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "                }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "            } catch (IOException e) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "                throw new DukeException(\"Error reading file.\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        return tasks;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     * Saves tasks into file."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     * @param tasks ArrayList of tasks to save."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     * @throws DukeException If there is problem writing or saving file."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    public void save(TaskList tasks) throws DukeException {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        StringBuilder fileContent \u003d new StringBuilder();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        for (int i \u003d 0; i \u003c tasks.getSize(); i++) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "            fileContent.append(tasks.getTaskUsingIndex(i).getFormattedTask());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        Path folderPath \u003d Paths.get(folder);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        if (!Files.exists(folderPath) \u0026\u0026 !new File(folder).mkdir()) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "            throw new DukeException(\"Error creating directory.\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        Path filePath \u003d Paths.get(folder, file);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "            BufferedWriter bufferedWriter \u003d Files.newBufferedWriter(filePath);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "            bufferedWriter.write(fileContent.toString());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "            bufferedWriter.close();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "            throw new DukeException(\"Error writing file.\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TanJunHong": 95
    }
  },
  {
    "path": "src/main/java/duke/ui/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "package duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "import duke.data.task.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": " * Interacts with user."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    private static final String DOTTED_LINE \u003d \"____________________________________________________________\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    private final Scanner in \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     * Prints string with indent."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     * @param string String to print."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    private void printWithIndent(String string) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        System.out.println(\"\\t \" + string);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     * Prints dotted line."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    public void showLine() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        System.out.println(\"\\t\" + DOTTED_LINE);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     * Prints error message."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     * @param message Error message to print."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    public void showError(String message) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        printWithIndent(message);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     * Prints welcome message."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    public void showWelcome() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        showLine();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        printWithIndent(\"Hello! I\u0027m Duke\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        printWithIndent(\"What can I do for you?\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        showLine();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     * Prints list of tasks."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     * @param tasks Tasks to print."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    public void showList(ArrayList\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        printWithIndent(\"Here are the tasks in your list:\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        for (Task task : tasks) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "            printWithIndent(task.getTaskNumber() + \".\" + task);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     * Prints task with done as completion status."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     * @param task Task marked with done as completion status."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    public void showDone(Task task) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        printWithIndent(\"Nice! I\u0027ve marked this task as done:\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        printWithIndent(\"  \" + task);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     * Prints exit message."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    public void showExit() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        printWithIndent(\"Bye. Hope to see you again soon!\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     * Prints loading error message."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    public void showLoadingError() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        showError(\"Error loading file.\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     * Reads command from user."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     * @return String command from user."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    public String readCommand() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        System.out.println();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        return in.nextLine();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     * Prints task added."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     * @param task Task added."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     * @param size Size of tasks after added task."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    public void showAdd(Task task, int size) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        printWithIndent(\"Got it. I\u0027ve added this task:\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        printWithIndent(\"  \" + task);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        printWithIndent(\"Now you have \" + size + \" tasks in the list.\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     * Prints task deleted."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     * @param task Task deleted."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     * @param size Size of tasks after deleted task."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    public void showDelete(Task task, int size) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        printWithIndent(\"Noted. I\u0027ve removed this task:\");"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        printWithIndent(\"  \" + task);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        printWithIndent(\"Now you have \" + size + \" tasks in the list.\");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     * Prints results of finding keyword."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     * @param tasks Tasks containing keyword."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    public void showFind(ArrayList\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        printWithIndent(\"Here are the matching tasks in your list:\");"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        for (int i \u003d 0; i \u003c tasks.size(); i++) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "            printWithIndent((i + 1) + \".\" + tasks.get(i));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TanJunHong": 132
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "todo read book"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "done 1"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "deadline return book /by 2020-06-06"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "event project meeting /at 2020-08-06 14:00"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "todo join sports club"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "done 4"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "todo borrow book"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "list"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "deadline return book /by 2020-09-20"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "event project meeting /at 2020-09-21 14:00"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "todo"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "blah"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "done 0"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "done 100"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "done abc"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "todo"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "deadline a"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "deadline /by"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "deadline return book /by"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "deadline /by Sunday"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "deadline read book /by 2020"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "deadline read book /by 2020-09-21 2pm"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "delete 0"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "delete 20"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "delete 4"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "list"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "list 2020-09-21"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "list 2020-08-06 14:00"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "find"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "find book"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "find borrow"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "TanJunHong": 32
    }
  },
  {
    "path": "text-ui-test/runtest.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@ECHO OFF"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "REM create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "if not exist ..\\bin mkdir ..\\bin"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "REM delete output from previous run"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "del ACTUAL.TXT"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "REM compile the code into the bin folder"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "javac  -cp ..\\src -Xlint:none -d ..\\bin ..\\src\\main\\java\\duke\\Duke.java ..\\src\\main\\java\\duke\\commands\\*.java ..\\src\\main\\java\\duke\\data\\exception\\DukeException.java ..\\src\\main\\java\\duke\\data\\task\\*.java ..\\src\\main\\java\\duke\\data\\TaskList.java ..\\src\\main\\java\\duke\\parser\\Parser.java ..\\src\\main\\java\\duke\\storage\\Storage.java ..\\src\\main\\java\\duke\\ui\\Ui.java"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "IF ERRORLEVEL 1 ("
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    echo ********** BUILD FAILURE **********"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    exit /b 1"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ")"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "REM no error here, errorlevel \u003d\u003d 0"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "java -classpath ..\\bin duke.Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "REM compare the output to the expected output"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "FC ACTUAL.TXT EXPECTED.TXT"
      }
    ],
    "authorContributionMap": {
      "TanJunHong": 2,
      "-": 19
    }
  },
  {
    "path": "text-ui-test/runtest.sh",
    "fileType": "sh",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "#!/usr/bin/env bash"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "# create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "if [ ! -d \"../bin\" ]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    mkdir ../bin"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "# delete output from previous run"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "if [ -e \"./ACTUAL.TXT\" ]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    rm ACTUAL.TXT"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "# compile the code into the bin folder, terminates if error occurred"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "if ! javac -cp ../src -Xlint:none -d ../bin ../src/main/java/duke/Duke.java ../src/main/java/duke/commands/*.java ../src/main/java/duke/data/exception/DukeException.java ../src/main/java/duke/data/task/*.java ../src/main/java/duke/data/TaskList.java ../src/main/java/duke/parser/Parser.java ../src/main/java/duke/storage/Storage.java ../src/main/java/duke/ui/Ui.java"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"********** BUILD FAILURE **********\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "java -classpath ../bin duke.Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "# convert to UNIX format"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "cp EXPECTED.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "dos2unix ACTUAL.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "# compare the output to the expected output"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "diff ACTUAL.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "if [ $? -eq 0 ]"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"Test result: PASSED\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 0"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "else"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"Test result: FAILED\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      }
    ],
    "authorContributionMap": {
      "TanJunHong": 2,
      "-": 36
    }
  }
]
