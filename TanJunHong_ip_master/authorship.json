[
  {
    "path": "README.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# Duke project template"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "This is a project template for a greenfield Java project. It\u0027s named after the Java mascot _Duke_. Given below are instructions on how to use it."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "## Setting up in Intellij"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "Prerequisites: JDK 11, update Intellij to the most recent version."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "1. Open Intellij (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "1. Set up the correct JDK version, as follows:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Click `Configure` \u003e `Structure for New Projects` and then `Project Settings` \u003e `Project` \u003e `Project SDK`"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "   1. If JDK 11 is listed in the drop down, select it. If it is not, click `New...` and select the directory where you installed JDK 11"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Click `OK`"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "1. Import the project into Intellij as follows:"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Click `Open or Import`."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Select the project directory, and click `OK`"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "   1. If there are any further prompts, accept the defaults."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "1. After the importing is complete, locate the `src/main/java/duke/Duke.java` file, right-click it, and choose `Run Duke.main()`. If the setup is correct, you should see something like the below:"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "   Hello from"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    ____        _        "
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "   |  _ \\ _   _| | _____ "
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "   | | | | | | | |/ / _ \\"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "   | |_| | |_| |   \u003c  __/"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "   |____/ \\__,_|_|\\_\\___|"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      }
    ],
    "authorContributionMap": {
      "TanJunHong": 1,
      "-": 25
    }
  },
  {
    "path": "src/main/java/duke/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "import duke.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "import duke.data.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "import duke.data.exception.DukeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "import duke.parser.Parser;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    private final Storage storage;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    private final Ui ui;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    private TaskList tasks;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    public Duke(String filePath) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        storage \u003d new Storage(filePath);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "            tasks \u003d new TaskList(storage.load());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "            ui.showLoadingError();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "            tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        new Duke(\"data/tasks.txt\").run();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    public void run() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        ui.showWelcome();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        boolean isExit \u003d false;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        while (!isExit) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "                String fullCommand \u003d ui.readCommand();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "                ui.showLine(); // show the divider line (\"_______\")"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "                Command c \u003d Parser.parse(fullCommand);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "                c.execute(tasks, ui, storage);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "                isExit \u003d c.isExit();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "            } catch (DukeException e) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "                ui.showError(e.getMessage());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "            } finally {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "                ui.showLine();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TanJunHong": 47,
      "-": 1
    }
  },
  {
    "path": "src/main/java/duke/commands/AddCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "import duke.data.TaskList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "import duke.data.exception.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "import duke.data.task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    public static final String TODO_COMMAND_WORD \u003d \"todo\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    public static final String DEADLINE_COMMAND_WORD \u003d \"deadline\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    public static final String EVENT_COMMAND_WORD \u003d \"event\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    private final Task task;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    public AddCommand(Task task) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        this.task \u003d task;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        tasks.addTask(task);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        ui.showAdd(task, tasks.getSize());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        storage.save(tasks);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TanJunHong": 27
    }
  },
  {
    "path": "src/main/java/duke/commands/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "import duke.data.TaskList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "import duke.data.exception.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    boolean isExit;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    public Command() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        isExit \u003d false;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    public abstract void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        return isExit;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TanJunHong": 21
    }
  },
  {
    "path": "src/main/java/duke/commands/DeleteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "import duke.data.TaskList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "import duke.data.exception.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "import duke.data.task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    private final int index;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    public DeleteCommand(int index) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        Task task \u003d tasks.getTask(index);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        tasks.deleteTask(index);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        ui.showDelete(task, tasks.getSize());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        storage.save(tasks);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TanJunHong": 26
    }
  },
  {
    "path": "src/main/java/duke/commands/DoneCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "import duke.data.TaskList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "import duke.data.exception.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "public class DoneCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"done\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    private final int index;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    public DoneCommand(int index) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        tasks.markTaskAsDone(index);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        ui.showDone(tasks.getTask(index));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        storage.save(tasks);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TanJunHong": 24
    }
  },
  {
    "path": "src/main/java/duke/commands/ExitCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "import duke.data.TaskList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"bye\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        isExit \u003d true;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        ui.showExit();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TanJunHong": 16
    }
  },
  {
    "path": "src/main/java/duke/commands/ListCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "import duke.data.TaskList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"list\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        ui.showList(tasks.getTasks());"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TanJunHong": 15
    }
  },
  {
    "path": "src/main/java/duke/data/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "package duke.data;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "import duke.data.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "import duke.data.task.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    private final ArrayList\u003cTask\u003e tasks;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    public TaskList() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    public TaskList(ArrayList\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        this.tasks \u003d tasks;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    public int getSize() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        return tasks.size();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    public Task getTask(int index) throws DukeException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        verifyTaskNumber(index);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        return tasks.get(index);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    public ArrayList\u003cTask\u003e getTasks() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        return tasks;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    public void addTask(Task task) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        tasks.add(task);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    public void deleteTask(int index) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        tasks.remove(index);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    public void markTaskAsDone(int index) throws DukeException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        verifyTaskNumber(index);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        tasks.get(index).markAsDone();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    private void verifyTaskNumber(int index) throws DukeException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        if (index \u003c 0 || index \u003e\u003d tasks.size()) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "            throw new DukeException(\"Task number cannot be out of range.\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TanJunHong": 51
    }
  },
  {
    "path": "src/main/java/duke/data/exception/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "package duke.data.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    public DukeException(String message) {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        super(\"☹ OOPS!!! \" + message);"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TanJunHong": 8
    }
  },
  {
    "path": "src/main/java/duke/data/task/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "package duke.data.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    public static final String LOGO \u003d \"D\";"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    public static final String DELIMITER \u003d \"/by\";"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    private final String by;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    public Deadline(String description, boolean isDone, String by) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        super(description, isDone);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        this.by \u003d by;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    public String getFormattedTask() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        return LOGO + super.getFormattedTask() + \" | \" + by + System.lineSeparator();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        return \"[\" + LOGO + \"]\" + super.toString() + \" (by: \" + by + \")\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TanJunHong": 24
    }
  },
  {
    "path": "src/main/java/duke/data/task/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "package duke.data.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    public static final String LOGO \u003d \"E\";"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    public static final String DELIMITER \u003d \"/at\";"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    private final String at;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    public Event(String description, boolean isDone, String at) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        super(description, isDone);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        this.at \u003d at;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    public String getFormattedTask() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        return LOGO + super.getFormattedTask() + \" | \" + at + System.lineSeparator();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        return \"[\" + LOGO + \"]\" + super.toString() + \" (at: \" + at + \")\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TanJunHong": 24
    }
  },
  {
    "path": "src/main/java/duke/data/task/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "package duke.data.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "public abstract class Task {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    public static final String COMPLETE \u003d \"1\";"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    public static final String INCOMPLETE \u003d \"0\";"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    private static final String TICK \u003d \"[✓]\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    private static final String CROSS \u003d \"[✗]\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    private final String description;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    private boolean isDone;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    Task(String description, boolean isDone) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        this.isDone \u003d isDone;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    public void markAsDone() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        this.isDone \u003d true;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    private String getDescription() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    private String getStatusIcon() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        return isDone ? TICK : CROSS;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    public String getFormattedTask() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        return \" | \" + (isDone ? COMPLETE : INCOMPLETE) + \" | \" + description;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        return getStatusIcon() + \" \" + getDescription();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TanJunHong": 38
    }
  },
  {
    "path": "src/main/java/duke/data/task/ToDo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "package duke.data.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "public class ToDo extends Task {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    public static final String LOGO \u003d \"T\";"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    public ToDo(String description, boolean isDone) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        super(description, isDone);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    public String getFormattedTask() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        return LOGO + super.getFormattedTask() + System.lineSeparator();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        return \"[\" + LOGO + \"]\" + super.toString();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TanJunHong": 20
    }
  },
  {
    "path": "src/main/java/duke/parser/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "package duke.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "import duke.commands.*;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "import duke.data.exception.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "import duke.data.task.Deadline;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "import duke.data.task.Event;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "import duke.data.task.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "import duke.data.task.ToDo;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    private final static int MAX_INSTRUCTION_LENGTH \u003d 3;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    public static Command parse(String fullCommand) throws DukeException {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        String[] instructions \u003d fullCommand.split(\" \", MAX_INSTRUCTION_LENGTH - 1);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        String commandWord \u003d instructions[0].trim().toLowerCase();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        String[] furtherInstructions;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        String description;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        int taskNumber;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        Command command;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        Task task;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        case ListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "            command \u003d new ListCommand();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "            command \u003d new ExitCommand();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        case AddCommand.TODO_COMMAND_WORD:"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "            verifyInstruction(instructions);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "            description \u003d instructions[1].trim();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "            task \u003d new ToDo(description, false);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "            command \u003d new AddCommand(task);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        case AddCommand.DEADLINE_COMMAND_WORD:"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "            furtherInstructions \u003d splitDescriptionAndDateTime(instructions[1], Deadline.DELIMITER);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "            description \u003d furtherInstructions[0].trim();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "            String by \u003d furtherInstructions[1].trim();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "            task \u003d new Deadline(description, false, by);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "            command \u003d new AddCommand(task);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        case AddCommand.EVENT_COMMAND_WORD:"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "            furtherInstructions \u003d splitDescriptionAndDateTime(instructions[1], Event.DELIMITER);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "            description \u003d furtherInstructions[0].trim();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "            String at \u003d furtherInstructions[1].trim();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "            task \u003d new Event(description, false, at);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "            command \u003d new AddCommand(task);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        case DoneCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "            verifyInstruction(instructions);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "            taskNumber \u003d convertToNumber(instructions[1]);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "            command \u003d new DoneCommand(taskNumber - 1);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        case DeleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "            verifyInstruction(instructions);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "            taskNumber \u003d convertToNumber(instructions[1]);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "            command \u003d new DeleteCommand(taskNumber - 1);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "            throw new DukeException(\"I\u0027m sorry, but I don\u0027t know what that means :-(\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        return command;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    private static int convertToNumber(String instruction) throws DukeException {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        int taskNumber;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "            taskNumber \u003d Integer.parseInt(instruction);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "            throw new DukeException(\"Task number cannot be non-numeric.\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        return taskNumber;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    private static String[] splitDescriptionAndDateTime(String line, String delimiter) throws DukeException {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        String[] instructions \u003d line.split(delimiter, 2);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        verifyInstruction(instructions);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        return new String[]{instructions[0].trim(), instructions[1].trim()};"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    private static void verifyInstruction(String[] instructions) throws DukeException {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        if (instructions.length !\u003d MAX_INSTRUCTION_LENGTH - 1) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "            throw new DukeException(\"The description of a \" + instructions[0] + \" cannot be empty.\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        } else if (instructions[0].isBlank() || instructions[1].isBlank()) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "            throw new DukeException(\"Cannot decipher description or date/time.\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    public Task readTask(String line) throws DukeException {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        String[] instructions \u003d line.split(\"\\\\|\", MAX_INSTRUCTION_LENGTH + 1);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        verifyInstructionLength(instructions, MAX_INSTRUCTION_LENGTH);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        String taskType \u003d instructions[0].trim();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        boolean isDone;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        String description \u003d instructions[2].trim();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        Task task;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        switch (instructions[1].trim()) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        case Task.COMPLETE:"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "            isDone \u003d true;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        case Task.INCOMPLETE:"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "            isDone \u003d false;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "            throw new DukeException(\"Unable to read task completion status.\");"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        switch (taskType) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        case Deadline.LOGO:"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "            verifyInstructionLength(instructions, MAX_INSTRUCTION_LENGTH + 1);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "            String by \u003d instructions[3].trim();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "            task \u003d new Deadline(description, isDone, by);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        case Event.LOGO:"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "            verifyInstructionLength(instructions, MAX_INSTRUCTION_LENGTH + 1);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "            String at \u003d instructions[3].trim();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "            task \u003d new Event(description, isDone, at);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        case ToDo.LOGO:"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "            task \u003d new ToDo(description, isDone);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "            throw new DukeException(\"Unable to read task type.\");"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        return task;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    private void verifyInstructionLength(String[] instructions, int instructionLength) throws DukeException {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        if (instructions.length \u003c instructionLength) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "            throw new DukeException(\"Missing parameter(s) for task.\");"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TanJunHong": 139
    }
  },
  {
    "path": "src/main/java/duke/storage/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "package duke.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "import duke.data.TaskList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "import duke.data.exception.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "import duke.data.task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "import duke.parser.Parser;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "import java.io.BufferedReader;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "import java.io.BufferedWriter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    private final String folder;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    private final String file;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    public Storage(String filePath) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        int index \u003d filePath.lastIndexOf(\"/\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        folder \u003d filePath.substring(0, index);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        file \u003d filePath.substring(index + 1);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    public ArrayList\u003cTask\u003e load() throws DukeException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        Path path \u003d Paths.get(folder, file);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        if (Files.exists(path)) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "                BufferedReader bufferedReader \u003d Files.newBufferedReader(path);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "                Parser parser \u003d new Parser();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "                while (true) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "                    String line \u003d bufferedReader.readLine();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "                    if (line \u003d\u003d null) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "                    Task task \u003d parser.readTask(line);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "                    tasks.add(task);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "                }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "            } catch (IOException e) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "                throw new DukeException(\"Error reading file.\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        return tasks;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    public void save(TaskList tasks) throws DukeException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        StringBuilder fileContent \u003d new StringBuilder();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        for (int i \u003d 0; i \u003c tasks.getSize(); i++) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "            fileContent.append(tasks.getTask(i).getFormattedTask());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        Path folderPath \u003d Paths.get(folder);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        if (!Files.exists(folderPath) \u0026\u0026 !new File(folder).mkdir()) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "            throw new DukeException(\"Error creating directory.\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        Path filePath \u003d Paths.get(folder, file);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "            BufferedWriter bufferedWriter \u003d Files.newBufferedWriter(filePath);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "            bufferedWriter.write(fileContent.toString());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "            bufferedWriter.close();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "            throw new DukeException(\"Error writing file.\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TanJunHong": 75
    }
  },
  {
    "path": "src/main/java/duke/ui/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "package duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "import duke.data.task.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    private static final String DOTTED_LINE \u003d \"____________________________________________________________\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    private final Scanner in \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    private void printWithIndent(String string) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        System.out.println(\"\\t \" + string);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    public void showLine() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        System.out.println(\"\\t\" + DOTTED_LINE);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    public void showError(String message) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        printWithIndent(message);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    public void showWelcome() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        showLine();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        printWithIndent(\"Hello! I\u0027m Duke\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        printWithIndent(\"What can I do for you?\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        showLine();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    public void showList(ArrayList\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        printWithIndent(\"Here are the tasks in your list:\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        for (int i \u003d 0; i \u003c tasks.size(); i++) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "            printWithIndent((i + 1) + \".\" + tasks.get(i));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    public void showDone(Task task) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        printWithIndent(\"Nice! I\u0027ve marked this task as done:\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        printWithIndent(\"  \" + task);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    public void showExit() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        printWithIndent(\"Bye. Hope to see you again soon!\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    public void showLoadingError() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        showError(\"Error loading file.\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    public String readCommand() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        System.out.println();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        return in.nextLine();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    public void showAdd(Task task, int size) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        printWithIndent(\"Got it. I\u0027ve added this task:\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        printWithIndent(\"  \" + task);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        printWithIndent(\"Now you have \" + size + \" tasks in the list.\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    public void showDelete(Task task, int size) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        printWithIndent(\"Noted. I\u0027ve removed this task:\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        printWithIndent(\"  \" + task);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "        printWithIndent(\"Now you have \" + size + \" tasks in the list.\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TanJunHong": 68
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "todo read book"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "done 1"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "deadline return book /by June 6th"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "event project meeting /at Aug 6th 2-4pm"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "todo join sports club"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "done 4"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "todo borrow book"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "list"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "deadline return book /by Sunday"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "event project meeting /at Mon 2-4pm"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "todo"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "blah"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "done 0"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "done 100"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "done abc"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "todo"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "deadline a"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "deadline /by"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "deadline return book /by"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "deadline /by Sunday"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "delete 0"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "delete 20"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "delete 4"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "list"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "TanJunHong": 25
    }
  },
  {
    "path": "text-ui-test/runtest.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@ECHO OFF"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "REM create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "if not exist ..\\bin mkdir ..\\bin"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "REM delete output from previous run"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "del ACTUAL.TXT"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "REM compile the code into the bin folder"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "javac  -cp ..\\src -Xlint:none -d ..\\bin ..\\src\\main\\java\\duke\\Duke.java ..\\src\\main\\java\\duke\\commands\\*.java ..\\src\\main\\java\\duke\\data\\exception\\DukeException.java ..\\src\\main\\java\\duke\\data\\task\\*.java ..\\src\\main\\java\\duke\\data\\TaskList.java ..\\src\\main\\java\\duke\\parser\\Parser.java ..\\src\\main\\java\\duke\\storage\\Storage.java ..\\src\\main\\java\\duke\\ui\\Ui.java"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "IF ERRORLEVEL 1 ("
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    echo ********** BUILD FAILURE **********"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    exit /b 1"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ")"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "REM no error here, errorlevel \u003d\u003d 0"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "java -classpath ..\\bin duke.Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "REM compare the output to the expected output"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "FC ACTUAL.TXT EXPECTED.TXT"
      }
    ],
    "authorContributionMap": {
      "TanJunHong": 2,
      "-": 19
    }
  },
  {
    "path": "text-ui-test/runtest.sh",
    "fileType": "sh",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "#!/usr/bin/env bash"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "# create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "if [ ! -d \"../bin\" ]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    mkdir ../bin"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "# delete output from previous run"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "if [ -e \"./ACTUAL.TXT\" ]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    rm ACTUAL.TXT"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "# compile the code into the bin folder, terminates if error occurred"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "if ! javac -cp ../src -Xlint:none -d ../bin ../src/main/java/duke/Duke.java ../src/main/java/duke/commands/*.java ../src/main/java/duke/data/exception/DukeException.java ../src/main/java/duke/data/task/*.java ../src/main/java/duke/data/TaskList.java ../src/main/java/duke/parser/Parser.java ../src/main/java/duke/storage/Storage.java ../src/main/java/duke/ui/Ui.java"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"********** BUILD FAILURE **********\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TanJunHong"
        },
        "content": "java -classpath ../bin duke.Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "# convert to UNIX format"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "cp EXPECTED.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "dos2unix ACTUAL.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "# compare the output to the expected output"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "diff ACTUAL.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "if [ $? -eq 0 ]"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"Test result: PASSED\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 0"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "else"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"Test result: FAILED\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      }
    ],
    "authorContributionMap": {
      "TanJunHong": 2,
      "-": 36
    }
  }
]
