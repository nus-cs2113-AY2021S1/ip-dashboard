[
  {
    "path": "src/main/java/duke/CommandType.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "public enum CommandType {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    DELETE (\"delete\", \"delete\".length()),"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    BYE (\"bye\", \"bye\".length()),"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    LIST (\"list\", \"list\".length()),"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    DONE (\"done\", \"done\".length()),"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    CLEAR (\"clear\", \"clear\".length()),"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    TODO (\"todo\", \"todo\".length()),"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    DEADLINE (\"deadline\", \"deadline\".length()),"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    EVENT (\"event\", \"event\".length());"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    private final String commandWord;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    private final int commandWordLength;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    CommandType(String commandWord, int commandWordLength) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        this.commandWord \u003d commandWord;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        this.commandWordLength \u003d commandWordLength;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    public String getCommandWord() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        return commandWord;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    public int getCommandWordLength() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        return commandWordLength;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "}"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "HengFuYuen": 29
    }
  },
  {
    "path": "src/main/java/duke/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "/*"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "  Solution below adapted from"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "  https://github.com/nus-cs2113-AY2021S1/contacts/blob/master/src/main/java/Contacts1.java"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "import duke.exception.InvalidCommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "import duke.exception.InvalidTaskTypeException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "import duke.exception.TodoDescriptionNotFoundException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "import duke.exception.DeadlineDescriptionNotFoundException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "import duke.exception.DeadlineTimeNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "import duke.exception.EventDescriptionNotFoundException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "import duke.exception.EventTimeNotFoundException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "import duke.exception.EmptyTaskListException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "import duke.exception.InvalidTaskIndexException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "import duke.exception.TaskIndexNotFoundException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    private static final String FILE_PATH \u003d \"data/duke.txt\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    private static final String DIR_PATH \u003d \"data\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    private static TaskList taskList;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    private static Storage storage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    private static boolean isExitingDuke;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    private static final String INPUT_INSTRUCTION_MESSAGE \u003d \"Please input in the following format:\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    private static final String RANGE_OF_VALID_TASK_NUMBER_MESSAGE \u003d \"Range of valid task number: \";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    private static final String START_OF_ERROR_MESSAGE \u003d \":( OOPS!!! \";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    private static final String PRINT_TASK_LIST_INPUT_FORMAT \u003d \"  To list all tasks: list\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    private static final String MARK_TASK_AS_DONE_INPUT_FORMAT \u003d \"  To mark a task as done: done \u003ctask number\u003e\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    private static final String DELETE_TASK_INPUT_FORMAT \u003d \"  To delete a task: delete \u003ctask number\u003e\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    private static final String TODO_INPUT_FORMAT \u003d \"  To add a todo: todo \u003cdescription of todo\u003e\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    private static final String DEADLINE_INPUT_FORMAT \u003d \"  To add a deadline: deadline \u003cdescription of \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "            + \"deadline\u003e /by \u003ctime it is due\u003e\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    private static final String EVENT_INPUT_FORMAT \u003d \"  To add an event: event \u003cdescription of event\u003e /at \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "            + \"\u003cthe event time\u003e\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    private static final String EXIT_INPUT_FORMAT \u003d \"  To exit Duke: bye\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    private static final String CLEAR_TASK_LIST_INPUT_FORMAT \u003d \"  To clear task list: clear\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    private static final Scanner SCANNER \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    private static final String DIVIDER \u003d"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "            \"_____________________________________________________________________________________________\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        printWelcomeMessage();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        initDuke();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        while (!isExitingDuke) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "            String command \u003d getUserCommand();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "            processUserCommand(command);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    private static void initDuke() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "            storage \u003d new Storage(DIR_PATH, FILE_PATH);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "            taskList \u003d new TaskList(storage.load());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "            isExitingDuke \u003d false;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "            printFileNotFoundErrorMessage();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "            printIOExceptionErrorMessage(\"Duke is unable to load previously saved data...\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        } catch (InvalidTaskTypeException e) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "            printInvalidTaskTypeErrorMessage();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "            printIndexOutOfBoundsErrorMessage();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    private static String getUserCommand() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        return SCANNER.nextLine();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    private static void processUserCommand(String command) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        command \u003d command.trim();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        if (command.equals(CommandType.BYE.getCommandWord())) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "            processExit();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        } else if (command.equals(CommandType.LIST.getCommandWord())) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "            printTaskList();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        } else if (command.startsWith(CommandType.DONE.getCommandWord())) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "            processTaskAsDone(command);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        } else if (command.startsWith(CommandType.DELETE.getCommandWord())) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "            processTaskDeletion(command);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        } else if (command.equals(CommandType.CLEAR.getCommandWord())) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "            processTaskListClearance();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "            processTaskAddition(command);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    private static void processExit() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "            storage.update(taskList.getTasks());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        } catch (IOException e){"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "            printIOExceptionErrorMessage(\"Duke is unable to save current data...\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        } finally {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "            isExitingDuke \u003d true;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "            printExitMessage();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    private static void processTaskAsDone(String command) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "            Task taskMarkedAsDone \u003d taskList.markTaskAsDone(command);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "            printTaskMarkedAsDone(taskMarkedAsDone);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        } catch (TaskIndexNotFoundException e) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "            printTaskToMarkAsDoneIndexNotFoundErrorMessage();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        } catch (InvalidTaskIndexException | NumberFormatException e) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "            printInvalidTaskToMarkAsDoneIndexErrorMessage();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        } catch (EmptyTaskListException e) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "            printEmptyTaskListErrorMessage();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    private static void processTaskDeletion(String command) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "            Task deletedTask \u003d taskList.deleteTask(command);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "            printDeletedTask(deletedTask);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        } catch (TaskIndexNotFoundException e) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "            printTaskToDeleteIndexNotFoundErrorMessage();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        } catch (InvalidTaskIndexException | NumberFormatException e) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "            printInvalidTaskToDeleteIndexErrorMessage();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        } catch (EmptyTaskListException e) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "            printEmptyTaskListErrorMessage();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    private static void processTaskListClearance() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        clearTaskList();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        printClearTaskListMessage();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    private static void clearTaskList() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        taskList.clear();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    private static void processTaskAddition(String command) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "            Task newTask \u003d taskList.addNewTask(command);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "            printNewTask(newTask);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        } catch (TodoDescriptionNotFoundException e) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "            printTodoDescriptionNotFoundErrorMessage();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        } catch (DeadlineDescriptionNotFoundException e) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "            printDeadlineDescriptionNotFoundErrorMessage();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        } catch (DeadlineTimeNotFoundException e) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "            printDeadlineTimeNotFoundErrorMessage();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        } catch (EventDescriptionNotFoundException e) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "            printEventDescriptionNotFoundErrorMessage();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        } catch (EventTimeNotFoundException e) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "            printEventTimeNotFoundErrorMessage();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        } catch (InvalidCommandException e) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "            printInvalidCommandErrorMessage();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    private static void printWelcomeMessage() {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        String logo \u003d \" ____        _\" + System.lineSeparator()"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                + \"|  _ \\\\ _   _| | _____\" + System.lineSeparator()"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                + \"| | | | | | | |/ / _ \\\\\" + System.lineSeparator()"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                + \"| |_| | |_| |   \u003c  __/\" + System.lineSeparator()"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                + \"|____/ \\\\__,_|_|\\\\_\\\\___|\" + System.lineSeparator();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        System.out.println(\"Hello from\" + System.lineSeparator() + logo);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        System.out.println(DIVIDER);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        System.out.println(\"Hello! I\u0027m Duke\" + System.lineSeparator() + \"What can I do for you?\");"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        System.out.println(DIVIDER);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    private static void printIOExceptionErrorMessage(String message) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        System.out.println(DIVIDER);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        System.out.println(START_OF_ERROR_MESSAGE + \"Something went wrong...\");"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        System.out.println(message);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        System.out.println(DIVIDER);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    private static void printFileNotFoundErrorMessage() {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        System.out.println(DIVIDER);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        System.out.println(START_OF_ERROR_MESSAGE + \"There is no previously saved data.\");"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        System.out.println(DIVIDER);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    private static void printIndexOutOfBoundsErrorMessage() {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        System.out.println(DIVIDER);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        System.out.println(START_OF_ERROR_MESSAGE + \"Saved data has errors...\");"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        System.out.println(\"Duke is unable to load previously saved data...\");"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        System.out.println(DIVIDER);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    private static void printClearTaskListMessage() {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        System.out.println(DIVIDER);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        System.out.println(\"All previous data has been deleted...\");"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        System.out.println(\"The task list is now empty.\");"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        System.out.println(DIVIDER);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    private static void printInvalidTaskToDeleteIndexErrorMessage() {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        System.out.println(DIVIDER);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        System.out.println(START_OF_ERROR_MESSAGE + \"The task to delete is invalid.\" + System.lineSeparator());"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        System.out.println(INPUT_INSTRUCTION_MESSAGE);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        System.out.println(RANGE_OF_VALID_TASK_NUMBER_MESSAGE + taskList.getRangeOfValidTaskNumber());"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        System.out.println(DELETE_TASK_INPUT_FORMAT);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        System.out.println(DIVIDER);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    private static void printTaskToDeleteIndexNotFoundErrorMessage() {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        System.out.println(DIVIDER);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        System.out.println(START_OF_ERROR_MESSAGE + \"The task to delete is not found.\" + System.lineSeparator());"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        System.out.println(INPUT_INSTRUCTION_MESSAGE);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        System.out.println(RANGE_OF_VALID_TASK_NUMBER_MESSAGE + taskList.getRangeOfValidTaskNumber());"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        System.out.println(DELETE_TASK_INPUT_FORMAT);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        System.out.println(DIVIDER);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    private static void printDeletedTask(Task deletedTask) {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        System.out.println(DIVIDER);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        System.out.println(\"Noted. I\u0027ve removed this task:\");"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        System.out.println(\"  \" + deletedTask);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        System.out.println(\"Now you have \" + taskList.getNumberOfTasks() + \" task(s) in the list.\");"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        System.out.println(DIVIDER);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    private static void printTaskToMarkAsDoneIndexNotFoundErrorMessage() {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        System.out.println(DIVIDER);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        System.out.println(START_OF_ERROR_MESSAGE + \"The task to mark as done is not found.\""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                + System.lineSeparator());"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        System.out.println(INPUT_INSTRUCTION_MESSAGE);"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        System.out.println(RANGE_OF_VALID_TASK_NUMBER_MESSAGE + taskList.getRangeOfValidTaskNumber());"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        System.out.println(MARK_TASK_AS_DONE_INPUT_FORMAT);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        System.out.println(DIVIDER);"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    private static void printInvalidTaskToMarkAsDoneIndexErrorMessage() {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        System.out.println(DIVIDER);"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        System.out.println(START_OF_ERROR_MESSAGE + \"The task to mark as done is invalid.\""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                + System.lineSeparator());"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        System.out.println(INPUT_INSTRUCTION_MESSAGE);"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        System.out.println(RANGE_OF_VALID_TASK_NUMBER_MESSAGE + taskList.getRangeOfValidTaskNumber());"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        System.out.println(MARK_TASK_AS_DONE_INPUT_FORMAT);"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        System.out.println(DIVIDER);"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    private static void printEmptyTaskListErrorMessage() {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        System.out.println(DIVIDER);"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        System.out.println(START_OF_ERROR_MESSAGE + \"The task list is empty.\" + System.lineSeparator());"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        System.out.println(\"Please add a task to the task list.\");"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        System.out.println(TODO_INPUT_FORMAT);"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        System.out.println(DEADLINE_INPUT_FORMAT);"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        System.out.println(EVENT_INPUT_FORMAT);"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        System.out.println(DIVIDER);"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    private static void printInvalidTaskTypeErrorMessage() {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        System.out.println(DIVIDER);"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        System.out.println(START_OF_ERROR_MESSAGE + \"The task is neither a todo nor a deadline nor an event.\");"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        System.out.println(DIVIDER);"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    private static void printInvalidCommandErrorMessage() {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        System.out.println(DIVIDER);"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        System.out.println(START_OF_ERROR_MESSAGE + \"I\u0027m sorry, but I don\u0027t know what that means :-(\""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                + System.lineSeparator());"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        System.out.println(INPUT_INSTRUCTION_MESSAGE);"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        System.out.println(RANGE_OF_VALID_TASK_NUMBER_MESSAGE + taskList.getRangeOfValidTaskNumber());"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        System.out.println(TODO_INPUT_FORMAT);"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        System.out.println(DEADLINE_INPUT_FORMAT);"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        System.out.println(EVENT_INPUT_FORMAT);"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        System.out.println(PRINT_TASK_LIST_INPUT_FORMAT);"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        System.out.println(MARK_TASK_AS_DONE_INPUT_FORMAT);"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        System.out.println(DELETE_TASK_INPUT_FORMAT);"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        System.out.println(CLEAR_TASK_LIST_INPUT_FORMAT);"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        System.out.println(EXIT_INPUT_FORMAT);"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        System.out.println(DIVIDER);"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    private static void printTodoDescriptionNotFoundErrorMessage() {"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        System.out.println(DIVIDER);"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        System.out.println(START_OF_ERROR_MESSAGE + \"The description of a todo cannot be empty.\""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                + System.lineSeparator());"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        System.out.println(INPUT_INSTRUCTION_MESSAGE);"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        System.out.println(TODO_INPUT_FORMAT);"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        System.out.println(DIVIDER);"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    private static void printDeadlineDescriptionNotFoundErrorMessage() {"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        System.out.println(DIVIDER);"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        System.out.println(START_OF_ERROR_MESSAGE + \"The description of a deadline cannot be empty.\""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                + System.lineSeparator());"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        System.out.println(INPUT_INSTRUCTION_MESSAGE);"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        System.out.println(DEADLINE_INPUT_FORMAT);"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        System.out.println(DIVIDER);"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    private static void printDeadlineTimeNotFoundErrorMessage() {"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        System.out.println(DIVIDER);"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        System.out.println(START_OF_ERROR_MESSAGE + \"The time the deadline is due is not found as none or \" +"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                \"too many timings were given.\" + System.lineSeparator());"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        System.out.println(INPUT_INSTRUCTION_MESSAGE);"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        System.out.println(DEADLINE_INPUT_FORMAT);"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        System.out.println(DIVIDER);"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    private static void printEventDescriptionNotFoundErrorMessage() {"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        System.out.println(DIVIDER);"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        System.out.println(START_OF_ERROR_MESSAGE + \"The description of an event cannot be empty.\""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                + System.lineSeparator());"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        System.out.println(INPUT_INSTRUCTION_MESSAGE);"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        System.out.println(EVENT_INPUT_FORMAT);"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        System.out.println(DIVIDER);"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    private static void printEventTimeNotFoundErrorMessage() {"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        System.out.println(DIVIDER);"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        System.out.println(START_OF_ERROR_MESSAGE + \"The event timing is not found as none or too \" +"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                \"many timings were given.\" + System.lineSeparator());"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        System.out.println(INPUT_INSTRUCTION_MESSAGE);"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        System.out.println(EVENT_INPUT_FORMAT);"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        System.out.println(DIVIDER);"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    private static void printNewTask(Task newTask) {"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        System.out.println(DIVIDER);"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        System.out.println(\"Got it. I\u0027ve added this task:\");"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        System.out.println(\"  \" + newTask);"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        System.out.println(\"Now you have \" + (taskList.getNumberOfTasks()) + \" task(s) in the list.\");"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        System.out.println(DIVIDER);"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    private static void printTaskMarkedAsDone(Task taskMarkedAsDone) {"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        System.out.println(DIVIDER);"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        System.out.println(\"Nice! I\u0027ve marked this task as done:\");"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        System.out.println(\"  \" + taskMarkedAsDone);"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        System.out.println(DIVIDER);"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    private static void printTaskList() {"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        System.out.println(DIVIDER);"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        if (taskList.isEmpty()) {"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "            System.out.println(\"The task list is empty.\");"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "            System.out.println(\"Here are the tasks in your list:\");"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "            taskList.printTasks();"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        System.out.println(DIVIDER);"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    private static void printExitMessage() {"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        System.out.println(DIVIDER);"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        System.out.println(\"Bye. Hope to see you again soon!\");"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        System.out.println(DIVIDER);"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HengFuYuen": 354,
      "-": 3
    }
  },
  {
    "path": "src/main/java/duke/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "import duke.exception.InvalidTaskTypeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "import duke.task.Todo;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    private static final String SAVED_TODO_INDICATOR \u003d \"T\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    private static final String SAVED_DEADLINE_INDICATOR \u003d \"D\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    private static final String SAVED_EVENT_INDICATOR \u003d \"E\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    private static final String TASK_INFORMATION_SPLIT_LOCATION \u003d \":\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    private final File dukeFile;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    public Storage(String dirPath, String filePath) throws IOException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        File dukeDir \u003d new File(dirPath);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        dukeFile \u003d new File(filePath);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        if (!dukeDir.exists()) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "            dukeDir.mkdir();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        if (!dukeFile.exists()) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "            dukeFile.createNewFile();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    public ArrayList\u003cTask\u003e load() throws FileNotFoundException, InvalidTaskTypeException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        Scanner fileScanner \u003d new Scanner(dukeFile);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        while (fileScanner.hasNext()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "            String savedTask \u003d fileScanner.nextLine();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "            tasks.add(createSavedTask(savedTask));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        fileScanner.close();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        return tasks;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    private Task createSavedTask(String savedTask) throws InvalidTaskTypeException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        Task savedTaskToBeAdded;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        if (savedTask.startsWith(SAVED_TODO_INDICATOR)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "            savedTaskToBeAdded \u003d createSavedTodo(savedTask);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        } else if (savedTask.startsWith(SAVED_DEADLINE_INDICATOR)) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "            savedTaskToBeAdded \u003d createSavedDeadline(savedTask);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        } else if (savedTask.startsWith(SAVED_EVENT_INDICATOR)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "            savedTaskToBeAdded \u003d createSavedEvent(savedTask);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "            throw new InvalidTaskTypeException();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        return savedTaskToBeAdded;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    private String[] splitSavedTaskInformation(String taskInformation) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        return taskInformation.split(TASK_INFORMATION_SPLIT_LOCATION);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    private Event createSavedEvent(String savedTask) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        String[] savedEventInformation \u003d splitSavedTaskInformation(savedTask);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        boolean isSavedEventDone \u003d savedEventInformation[1].trim().equals(Task.TASK_DONE_ICON);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        String savedEventDescription \u003d savedEventInformation[2].trim();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        String savedEventTime \u003d savedEventInformation[3].trim();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        return new Event(savedEventDescription, savedEventTime, isSavedEventDone);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    private Deadline createSavedDeadline(String savedTask) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        String[] savedDeadlineInformation \u003d splitSavedTaskInformation(savedTask);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        boolean isSavedDeadlineDone \u003d savedDeadlineInformation[1].trim().equals(Task.TASK_DONE_ICON);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        String savedDeadlineDescription \u003d savedDeadlineInformation[2].trim();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        String savedDeadlineTime \u003d savedDeadlineInformation[3].trim();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        return new Deadline(savedDeadlineDescription, savedDeadlineTime, isSavedDeadlineDone);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    private Todo createSavedTodo(String savedTask) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        String[] savedTodoInformation \u003d splitSavedTaskInformation(savedTask);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        boolean isSavedTodoDone \u003d savedTodoInformation[1].trim().equals(Task.TASK_DONE_ICON);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        String savedTodoDescription \u003d savedTodoInformation[2].trim();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        return new Todo(savedTodoDescription, isSavedTodoDone);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    private void addTaskToDukeFile(Task taskToSave, boolean firstTask) throws IOException {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        FileWriter fw \u003d new FileWriter(dukeFile, true);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        if (!firstTask) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "            fw.write(System.lineSeparator());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        fw.write(taskToSave.messageToStoreInDukeFile());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        fw.close();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    public void update(ArrayList\u003cTask\u003e tasks) throws IOException {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        dukeFile.delete();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        dukeFile.createNewFile();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        boolean firstTask \u003d true;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        for (Task task : tasks) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "            addTaskToDukeFile(task, firstTask);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "            firstTask \u003d false;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HengFuYuen": 105
    }
  },
  {
    "path": "src/main/java/duke/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "import duke.exception.InvalidCommandException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "import duke.exception.TodoDescriptionNotFoundException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "import duke.exception.DeadlineDescriptionNotFoundException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "import duke.exception.DeadlineTimeNotFoundException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "import duke.exception.EventDescriptionNotFoundException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "import duke.exception.EventTimeNotFoundException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "import duke.exception.EmptyTaskListException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "import duke.exception.InvalidTaskIndexException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "import duke.exception.TaskIndexNotFoundException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "import duke.task.Todo;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    private ArrayList\u003cTask\u003e tasks;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    private int numberOfTasks;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    private static final String DEADLINE_TIME_INDICATOR \u003d \"/by\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    private static final String EVENT_TIME_INDICATOR \u003d \"/at\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    public TaskList(ArrayList\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        this.tasks \u003d tasks;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        this.numberOfTasks \u003d tasks.size();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    public ArrayList\u003cTask\u003e getTasks() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        return tasks;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    public int getNumberOfTasks() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        return numberOfTasks;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    public String getRangeOfValidTaskNumber() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        return numberOfTasks \u003d\u003d 0 ? \"none\" : \"1 to \" + numberOfTasks;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    public Task addNewTask(String command) throws InvalidCommandException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        Task newTask;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        if (command.startsWith(CommandType.TODO.getCommandWord())) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "            newTask \u003d createTodo(command);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        } else if (command.startsWith(CommandType.DEADLINE.getCommandWord())) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "            newTask \u003d createDeadline(command);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        } else if (command.startsWith(CommandType.EVENT.getCommandWord())) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "            newTask \u003d createEvent(command);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "            throw new InvalidCommandException();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        tasks.add(newTask);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        numberOfTasks++;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        return newTask;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    private String[] splitDescriptionAndTime(String taskInformation, String splitLocation) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        return taskInformation.split(splitLocation);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    private boolean hasTaskDescription(String command, CommandType commandType) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        return command.length() \u003e commandType.getCommandWordLength();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    private Event createEvent(String command) throws EventDescriptionNotFoundException,"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "            EventTimeNotFoundException {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        if (!hasTaskDescription(command, CommandType.EVENT)) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "            throw new EventDescriptionNotFoundException();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        String eventInformation \u003d command.substring(CommandType.EVENT.getCommandWordLength()).trim();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        String[] eventDescriptionAndTime \u003d splitDescriptionAndTime(eventInformation,"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                EVENT_TIME_INDICATOR);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        if (!hasTaskTime(eventDescriptionAndTime)) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "            throw new EventTimeNotFoundException();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        String eventDescription \u003d eventDescriptionAndTime[0].trim();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        String eventTime \u003d eventDescriptionAndTime[1].trim();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        return new Event(eventDescription, eventTime);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    private Deadline createDeadline(String command) throws DeadlineDescriptionNotFoundException,"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "            DeadlineTimeNotFoundException {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        if (!hasTaskDescription(command, CommandType.DEADLINE)) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "            throw new DeadlineDescriptionNotFoundException();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        String deadlineInformation \u003d command.substring(CommandType.DEADLINE.getCommandWordLength()).trim();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        String[] deadlineDescriptionAndTime \u003d splitDescriptionAndTime(deadlineInformation"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                , DEADLINE_TIME_INDICATOR);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        if (!hasTaskTime(deadlineDescriptionAndTime)) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "            throw new DeadlineTimeNotFoundException();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        String deadlineDescription \u003d deadlineDescriptionAndTime[0].trim();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        String deadlineTime \u003d deadlineDescriptionAndTime[1].trim();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        return new Deadline(deadlineDescription, deadlineTime);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    private boolean hasTaskTime(String[] taskDescriptionAndTime) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        int taskTimeIndex \u003d 2;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        return taskDescriptionAndTime.length \u003d\u003d taskTimeIndex;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    private Todo createTodo(String command) throws TodoDescriptionNotFoundException {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        if (!hasTaskDescription(command, CommandType.TODO)) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "            throw new TodoDescriptionNotFoundException();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        String todoDescription \u003d command.substring(CommandType.TODO.getCommandWordLength()).trim();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        return new Todo(todoDescription);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    public Task markTaskAsDone(String command) throws TaskIndexNotFoundException,"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "            InvalidTaskIndexException, EmptyTaskListException {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        if (isEmpty()) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "            throw new EmptyTaskListException();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        if (!isTaskIndexGiven(command, CommandType.DONE)) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "            throw new TaskIndexNotFoundException();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        int indexOfTaskToBeMarkAsDone \u003d"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                Integer.parseInt(command.substring(CommandType.DONE.getCommandWordLength()).trim()) - 1;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        if (!isTaskIndexValid(indexOfTaskToBeMarkAsDone)) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "            throw new InvalidTaskIndexException();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        Task taskMarkedAsDone \u003d tasks.get(indexOfTaskToBeMarkAsDone);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        taskMarkedAsDone.markAsDone();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        return taskMarkedAsDone;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    public Task deleteTask(String command) throws TaskIndexNotFoundException,"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "            InvalidTaskIndexException, EmptyTaskListException {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        if (isEmpty()) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "            throw new EmptyTaskListException();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        if (!isTaskIndexGiven(command, CommandType.DELETE)) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "            throw new TaskIndexNotFoundException();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        int indexOfTaskToBeDeleted \u003d"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                Integer.parseInt(command.substring(CommandType.DELETE.getCommandWordLength()).trim()) - 1 ;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        if (!isTaskIndexValid(indexOfTaskToBeDeleted)) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "            throw new InvalidTaskIndexException();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        Task removedTask \u003d tasks.get(indexOfTaskToBeDeleted);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        tasks.remove(indexOfTaskToBeDeleted);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        numberOfTasks--;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        return removedTask;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    private boolean isTaskIndexValid(int indexOfTaskToBeDeleted) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        return indexOfTaskToBeDeleted \u003e\u003d 0 \u0026\u0026 indexOfTaskToBeDeleted \u003c numberOfTasks;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    private boolean isTaskIndexGiven(String command, CommandType commandType) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        return command.length() \u003e commandType.getCommandWordLength();"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    public boolean isEmpty() {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        return numberOfTasks \u003d\u003d 0;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    public void clear() {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        tasks.clear();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        numberOfTasks \u003d 0;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    public void printTasks() {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        int taskNumber \u003d 1;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        for (Task task : tasks) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "            System.out.println(\"  \" + (taskNumber) + \".\" + task);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "            taskNumber++;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HengFuYuen": 180
    }
  },
  {
    "path": "src/main/java/duke/exception/DeadlineDescriptionNotFoundException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "public class DeadlineDescriptionNotFoundException extends InvalidCommandException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HengFuYuen": 4
    }
  },
  {
    "path": "src/main/java/duke/exception/DeadlineTimeNotFoundException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "public class DeadlineTimeNotFoundException extends InvalidCommandException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HengFuYuen": 4
    }
  },
  {
    "path": "src/main/java/duke/exception/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HengFuYuen": 4
    }
  },
  {
    "path": "src/main/java/duke/exception/EmptyTaskListException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "public class EmptyTaskListException extends DukeException{"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HengFuYuen": 4
    }
  },
  {
    "path": "src/main/java/duke/exception/EventDescriptionNotFoundException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "public class EventDescriptionNotFoundException extends InvalidCommandException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HengFuYuen": 4
    }
  },
  {
    "path": "src/main/java/duke/exception/EventTimeNotFoundException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "public class EventTimeNotFoundException extends InvalidCommandException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HengFuYuen": 4
    }
  },
  {
    "path": "src/main/java/duke/exception/InvalidCommandException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "public class InvalidCommandException extends DukeException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HengFuYuen": 4
    }
  },
  {
    "path": "src/main/java/duke/exception/InvalidTaskIndexException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "public class InvalidTaskIndexException extends InvalidCommandException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HengFuYuen": 4
    }
  },
  {
    "path": "src/main/java/duke/exception/InvalidTaskTypeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "public class InvalidTaskTypeException extends InvalidCommandException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HengFuYuen": 4
    }
  },
  {
    "path": "src/main/java/duke/exception/TaskIndexNotFoundException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "public class TaskIndexNotFoundException extends InvalidCommandException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HengFuYuen": 4
    }
  },
  {
    "path": "src/main/java/duke/exception/TodoDescriptionNotFoundException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "public class TodoDescriptionNotFoundException extends InvalidCommandException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HengFuYuen": 4
    }
  },
  {
    "path": "src/main/java/duke/task/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    protected String by;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    public Deadline(String description, String by) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        this.by \u003d by;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    public Deadline(String description, String by, boolean isDone) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        super(description, isDone);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        this.by \u003d by;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    public String messageToStoreInDukeFile() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        return \"D : \" + super.messageToStoreInDukeFile() + \" : \" + by;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        return \"[D]\" + super.toString() + \" (by: \" + by + \")\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HengFuYuen": 25
    }
  },
  {
    "path": "src/main/java/duke/task/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    protected String at;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    public Event(String description, String at) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        this.at \u003d at;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    public Event(String description, String at ,boolean isDone) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        super(description, isDone);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        this.at \u003d at;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    public String messageToStoreInDukeFile() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        return \"E : \" + super.messageToStoreInDukeFile() + \" : \" + at;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        return \"[E]\" + super.toString() + \" (at: \" + at + \")\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HengFuYuen": 25
    }
  },
  {
    "path": "src/main/java/duke/task/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "public abstract class Task {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    public static final String TASK_DONE_ICON \u003d \"Y\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    public static final String TASK_NOT_DONE_ICON \u003d \"N\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    public Task(String command) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        description \u003d command;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        isDone \u003d false;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    public Task(String command, boolean isDone) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        description \u003d command;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        this.isDone \u003d isDone;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    public void markAsDone() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        isDone \u003d true;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        return (isDone ? TASK_DONE_ICON : TASK_NOT_DONE_ICON);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    public String messageToStoreInDukeFile() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        return getStatusIcon() + \" : \" + description;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        return \"[\" + getStatusIcon() + \"] \" + description;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HengFuYuen": 37
    }
  },
  {
    "path": "src/main/java/duke/task/Todo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "public class Todo extends Task {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    public Todo(String description) {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    public Todo(String description, boolean isDone) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        super(description, isDone);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    public String messageToStoreInDukeFile() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        return \"T : \" + super.messageToStoreInDukeFile();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        return \"[T]\" + super.toString();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HengFuYuen": 21
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "delete 1"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "done 1"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "done"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "read book"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "todo read book"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "deadline return book /by June 6th"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "event project meeting /at Aug 6th 2-4pm"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "todo join sports club"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "done 1"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "done 4"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "todo borrow book"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "list"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "deadline return book /by Sunday"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "event project meeting /at Mon 2-4pm"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "buy bread"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "list"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "done 8"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "list"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "done"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "todo"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "deadline"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "deadline return card"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "event"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "event class"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "done -1"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "done 5      6"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "todobuybread"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "todo     clean     room"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "deadlinecs2113homework/byWednesday2359"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "deadline     lab report     /by     Tuesday 12pm"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "eventcareertalk/atMonday2pm-3pm"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "event     interview     /at     Sunday     3-4pm"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "done nothing"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "list"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "done 11"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "done12"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "list"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "deadline report 02/11/2020"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "deadline report by/ 02/11/2020 by/ 02/11/2020"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "event class Friday 4-6pm"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "event class /at Friday 4-6pm /at Friday 4-6pm"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "bye bye"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "delete 10"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "delete9"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "delete"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "delete -10"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "delete 6    7"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "delete 12"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "list"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "clear"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "todo read book"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "deadline return book /by June 6th"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "event project meeting /at Aug 6th 2-4pm"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "list"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "HengFuYuen": 55
    }
  },
  {
    "path": "text-ui-test/runtest.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@ECHO OFF"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "REM create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "if not exist ..\\bin mkdir ..\\bin"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "REM delete output from previous run"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "del ACTUAL.TXT"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "REM compile the code into the bin folder"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "javac  -cp ..\\src -Xlint:none -d ..\\bin ..\\src\\main\\java\\duke\\*.java ..\\src\\main\\java\\duke\\exception\\*.java ..\\src\\main\\java\\duke\\task\\*.java"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "IF ERRORLEVEL 1 ("
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    echo ********** BUILD FAILURE **********"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    exit /b 1"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ")"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "REM no error here, errorlevel \u003d\u003d 0"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "java -Dfile.encoding\u003dUTF-8 -classpath ../bin duke.Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "REM compare the output to the expected output"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "FC ACTUAL.TXT EXPECTED.TXT"
      }
    ],
    "authorContributionMap": {
      "HengFuYuen": 2,
      "-": 19
    }
  }
]
