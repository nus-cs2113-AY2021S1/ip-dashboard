[
  {
    "path": "docs/README.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "# Duke User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "Duke is a desktop application for managing tasks using **Command Line Interface**."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "## Quick start"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "1. Ensure that your computer has java `11` installed."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "1. Download the latest `ip.jar`."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "1. Copy the jar file to an empty folder you want to use as the home folder for Duke."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "1. Navigate to the folder containing the jar file on command prompt and run the command `java -jar ip.jar`. "
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "1. Type in a command and press Enter to execute it."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "1. Refer to the Features below for details of each command."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "## Features "
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "**Note**: "
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "* Words in `UPPER_CASE` are parameters that the user needs to supply."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "  * e.g. `todo DESCRIPTION`, `DESCRIPTION` is a parameter which can be used as `todo buy bread`."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "* Commands and parameter indicators are case-sensitive."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "  * e.g. `list` will show a list of all tasks in Duke but `List` would throw an invalid command error."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "  * e.g. `/at` indicates that whatever follows it will be event timing while `\\At` will throw an error"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "   stating that the event time is not given."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "### Adding a todo: `todo` "
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "Adds a todo, a task without any date/time attached, to Duke."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "Format: `todo DESCRIPTION`"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "Example of usage: `todo buy bread`"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "Expected outcome:\u003cbr/\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "`Got it. I\u0027ve added this task:`\u003cbr/\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "\u0026nbsp;\u0026nbsp;`[T][N] read book`\u003cbr/\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "`Now you have 1 task(s) in the list.`"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "### Adding a deadline: `deadline` "
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "Adds a deadline, a task that needs to be done before a specific time/date, to Duke."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "Format: `deadline DESCRIPTION /by TIME_IT_IS_DUE_BY`"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "Example of usage: `deadline return book /by Sunday 1pm`"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "Expected outcome:\u003cbr/\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "`Got it. I\u0027ve added this task:`\u003cbr/\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "\u0026nbsp;\u0026nbsp;`[D][N] return book (by: Sunday 1pm)`\u003cbr/\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "`Now you have 2 task(s) in the list.`"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "### Adding an event: `event` "
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "Adds an event, a task that starts at a specific time and ends at a specific time, to Duke."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "Format: `event DESCRIPTION /at EVENT_TIMING`"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "Example of usage:`event meeting /at 30/10/2020 1300-1400`"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "Expected outcome:\u003cbr/\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "`Got it. I\u0027ve added this task:`\u003cbr/\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "\u0026nbsp;\u0026nbsp;`[E][N] meeting (at: 30/10/2020 1300-1400)`\u003cbr/\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "`Now you have 2 task(s) in the list.`"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "### Listing all tasks: `list` "
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "Shows a list of all tasks in Duke."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "Format: `list`"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "Example of usage: `list`"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "Expected outcome:\u003cbr/\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "`Here are the tasks in your list:`\u003cbr/\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "\u0026nbsp;\u0026nbsp;`[T][N] read book`\u003cbr/\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "\u0026nbsp;\u0026nbsp;`[D][N] return book (by: Sunday 1pm)`\u003cbr/\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "\u0026nbsp;\u0026nbsp;`[E][N] meeting (at: 30/10/2020 1300-1400)`\u003cbr/\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "### Deleting a task: `delete` "
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "Deletes the specified task from Duke."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "Format: `delete TASK_INDEX`"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "* Deletes the task at the specified `TASK_INDEX`."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "* The `TASK_INDEX` refers to the task number shown in the displayed task list."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "* The `TASK_INDEX` **must be a positive integer** greater than 0."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "Example of usage: `delete 2`"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "Expected outcome:\u003cbr/\u003e"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "`Noted. I\u0027ve removed this task:`\u003cbr/\u003e"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "\u0026nbsp;\u0026nbsp;`[D][N] return book (by: Sunday 1pm)`\u003cbr/\u003e"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "`Now you have 2 task(s) in the list.`"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "### Marking a task as done: `done` "
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "Marks the specified task in Duke as done."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "Format: `done TASK_INDEX`"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "* Marks the task at the specified `TASK_INDEX` as done."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "* The `TASK_INDEX` refers to the task number shown in the displayed task list."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "* The `TASK_INDEX` **must be a positive integer** greater than 0."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "Example of usage: `done 1`"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "Expected outcome:\u003cbr/\u003e"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "`Nice! I\u0027ve marked this task as done:`\u003cbr/\u003e"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "\u0026nbsp;\u0026nbsp;`[T][Y] read book`\u003cbr/\u003e"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "### Finding tasks using a keyword: `find` "
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "Finds all the tasks in Duke that contains the given keyword."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "Format: `find KEYWORD`"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "* The search is case-sensitive. e.g. `Book` will not match `book`"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "* Both the task description and timing (if any) will be searched."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "* The task number of the task shown corresponds to its task number in the full displayed task list."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "Example of usage: `find meeting`"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "Expected outcome:\u003cbr/\u003e"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "`Here is(are) the 1 matching task(s) in your list:`\u003cbr/\u003e"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "\u0026nbsp;\u0026nbsp;`2.[E][N] meeting (at: 30/10/2020 1300-1400)`\u003cbr/\u003e"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "### Clearing all tasks: `clear` "
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "Clears all tasks from Duke."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "Format: `clear`"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "Example of usage: `clear`"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "Expected outcome:\u003cbr/\u003e"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "`All previous data has been deleted...`\u003cbr/\u003e"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "`The task list is now empty.`"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "### Exiting the program: `bye` "
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "Exits Duke."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "Format: `bye`"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "Example of usage: `bye`"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "Expected outcome:\u003cbr/\u003e"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "`Bye. Hope to see you again soon!`"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "### Saving the data"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "Duke data is automatically saved in the hard disk whenever any changes to the data is made. There is no"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": " need for manual saving. Previously saved data would also be loaded (if any) when Duke is booted up."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "## Command Summary"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "Command | Format, Examples"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "--- | ---"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "todo | `todo DESCRIPTION`\u003cbr/\u003e e.g., `todo buy bread`"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "deadline | `deadline DESCRIPTION by/ TIME_DEADLINE_IS_DUE`\u003cbr/\u003e e.g., `deadline return book /by Sunday 1pm`"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "event | `event DESCRIPTION at/ EVENT_TIMING`\u003cbr/\u003e e.g., `event meeting /at 30/10/2020 1300-1400`"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "list | `list`"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "delete | `delete TASK_INDEX`\u003cbr/\u003e e.g., `delete 2`"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "done | `done TASK_INDEX`\u003cbr/\u003e e.g., `done 1`"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "find | `find KEYWORD`\u003cbr/\u003e e.g., `find meeting`"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "clear | `clear`"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "bye | `bye`"
      }
    ],
    "authorContributionMap": {
      "HengFuYuen": 145,
      "-": 10
    }
  },
  {
    "path": "src/main/java/duke/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "/*"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "  Solution below adapted from"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "  https://github.com/nus-cs2113-AY2021S1/contacts/blob/master/src/main/java/Contacts1.java"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "  https://github.com/se-edu/addressbook-level2/tree/master/src/seedu/addressbook"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "import duke.exception.DeadlineDescriptionNotFoundException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "import duke.exception.DeadlineTimeNotFoundException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "import duke.exception.DeleteNumberFormatException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "import duke.exception.TaskIndexToDeleteNotFoundException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "import duke.exception.EventDescriptionNotFoundException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "import duke.exception.EventTimeNotFoundException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "import duke.exception.InvalidCommandException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "import duke.exception.InvalidTaskTypeException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "import duke.exception.KeywordNotFoundException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "import duke.exception.MarkAsDoneNumberFormatException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "import duke.exception.TaskIndexToMarkAsDoneNotFoundException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "import duke.exception.TodoDescriptionNotFoundException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": " * Represents a task manager that tracks different types of tasks."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": " * A \u003ccode\u003eDuke\u003c/code\u003e object corresponds to a task tracking application that has a"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": " * \u003ccode\u003eStorage\u003c/code\u003e which saves tasks into the hard disk and loads any previously saved task, a"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": " * \u003ccode\u003eUi\u003c/code\u003e that is in charge of user interaction, a \u003ccode\u003eParser\u003c/code\u003e that deciphers the user"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": " * command and a \u003ccode\u003eTaskList\u003c/code\u003e that contains all the tasks and carries out operations related to"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": " * adding, deleting, etc. of tasks to the task list."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": " *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": " * @author Heng Fu Yuen"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": " * @version 2.0"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": " */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    private TaskList tasks;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    private final Ui ui;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    private final Parser parser;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * The main method for \u003ccode\u003eDuke\u003c/code\u003e."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * Creates a new \u003ccode\u003eDuke\u003c/code\u003e object and runs it."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @param args Unused."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        String dirPath \u003d \"data\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        String filePath \u003d \"data/duke.txt\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        new Duke(dirPath,filePath).run();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * Constructs a \u003ccode\u003eDuke\u003c/code\u003e object with a Storage that uses the directory and file path given,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * a Ui, a Parser and a TaskList and initializes it."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * Any previously saved tasks are also loaded."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @param dirPath  Directory path that indicates the directory where the file storing tasks is saved."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @param filePath File path where the file storing the tasks is found."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    private Duke(String dirPath, String filePath) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        parser \u003d new Parser();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "            storage \u003d new Storage(dirPath, filePath);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "            tasks \u003d new TaskList(storage.load());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "            ui.printFileNotFoundErrorMessage();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "            ui.printIOExceptionErrorMessage(\"Duke is unable to create a directory or file to save tasks in\""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                    + \" the hard disk...\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        } catch (InvalidTaskTypeException e) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "            ui.printInvalidTaskTypeErrorMessage();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "            ui.printDukeFileCannotBeLoadedErrorMessage();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * Runs the \u003ccode\u003eDuke\u003c/code\u003e application by continuously taking in the user command, deciphering it"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * and executing it until the \u003ccode\u003eDuke\u003c/code\u003e application is exited."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    private void run() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        ui.printWelcomeMessage();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        boolean isExit \u003d false;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        while (!isExit) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                String fullCommand \u003d ui.readCommand();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                Command command \u003d parser.parse(fullCommand);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                command.execute(tasks, ui, storage);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                isExit \u003d command.isExit();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "            } catch (TaskIndexToMarkAsDoneNotFoundException e) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                ui.printTaskIndexToMarkAsDoneNotFoundErrorMessage(tasks.getRangeOfValidTaskIndex());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "            } catch (TaskIndexToDeleteNotFoundException e) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                ui.printTaskIndexToDeleteNotFoundErrorMessage(tasks.getRangeOfValidTaskIndex());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "            } catch (KeywordNotFoundException e) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                ui.printKeywordNotFoundErrorMessage();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "            } catch (MarkAsDoneNumberFormatException e) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                ui.printInvalidTaskIndexToMarkAsDoneErrorMessage(tasks.getRangeOfValidTaskIndex());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "            } catch (DeleteNumberFormatException e) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                ui.printInvalidTaskIndexToDeleteErrorMessage(tasks.getRangeOfValidTaskIndex());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "            } catch (TodoDescriptionNotFoundException e) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                ui.printTodoDescriptionNotFoundErrorMessage();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "            } catch (DeadlineDescriptionNotFoundException e) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                ui.printDeadlineDescriptionNotFoundErrorMessage();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "            } catch (DeadlineTimeNotFoundException e) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                ui.printDeadlineTimeNotFoundErrorMessage();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "            } catch (EventDescriptionNotFoundException e) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                ui.printEventDescriptionNotFoundErrorMessage();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "            } catch (EventTimeNotFoundException e) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                ui.printEventTimeNotFoundErrorMessage();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "            } catch (InvalidCommandException e) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                ui.printInvalidCommandErrorMessage(tasks.getRangeOfValidTaskIndex());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "            }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HengFuYuen": 118,
      "-": 2
    }
  },
  {
    "path": "src/main/java/duke/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "import duke.command.ByeCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "import duke.command.ClearCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "import duke.command.DeadlineCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "import duke.command.DeleteCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "import duke.command.DoneCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "import duke.command.EventCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "import duke.command.FindCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "import duke.command.ListCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "import duke.command.TodoCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "import duke.exception.DeadlineDescriptionNotFoundException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "import duke.exception.DeadlineTimeNotFoundException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "import duke.exception.DeleteNumberFormatException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "import duke.exception.TaskIndexToDeleteNotFoundException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "import duke.exception.EventDescriptionNotFoundException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "import duke.exception.EventTimeNotFoundException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "import duke.exception.InvalidCommandException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "import duke.exception.KeywordNotFoundException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "import duke.exception.MarkAsDoneNumberFormatException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "import duke.exception.TaskIndexToMarkAsDoneNotFoundException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "import duke.exception.TodoDescriptionNotFoundException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "import duke.task.Todo;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": " * Represents a user input decipherer."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": " * A \u003ccode\u003eParser\u003c/code\u003e object deciphers the user input meaning and validity and repackages it into a command"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": " * that the \u003ccode\u003eDuke\u003c/code\u003e application can understand."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": " *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": " * @author Heng Fu Yuen"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": " * @version 2.0"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": " */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * Constructs a \u003ccode\u003eParser\u003c/code\u003e object."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    public Parser() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * Returns a \u003ccode\u003eDuke\u003c/code\u003e understandable command that represents a corresponding user input after"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * deciphering it."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @param fullCommand The user input."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @return A command, representing the given input, that the \u003ccode\u003eDuke\u003c/code\u003e application can understand."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @throws InvalidCommandException If the user input is invalid or cannot be deciphered."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    public Command parse(String fullCommand) throws InvalidCommandException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        fullCommand \u003d fullCommand.trim();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        Command command;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        if (fullCommand.equals(ByeCommand.COMMAND_WORD)) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "            command \u003d createByeCommand();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        } else if (fullCommand.equals(ListCommand.COMMAND_WORD)) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "            command \u003d createListCommand();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        } else if (fullCommand.startsWith(DoneCommand.COMMAND_WORD)) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "            command \u003d createDoneCommand(fullCommand);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        } else if (fullCommand.startsWith(DeleteCommand.COMMAND_WORD)) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "            command \u003d createDeleteCommand(fullCommand);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        } else if (fullCommand.equals(ClearCommand.COMMAND_WORD)) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "            command \u003d createClearCommand();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        } else if (fullCommand.startsWith(DeadlineCommand.COMMAND_WORD)) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "            command \u003d createDeadlineCommand(fullCommand);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        } else if (fullCommand.startsWith(EventCommand.COMMAND_WORD)) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "            command \u003d createEventCommand(fullCommand);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        } else if (fullCommand.startsWith(TodoCommand.COMMAND_WORD)) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "            command \u003d createTodoCommand(fullCommand);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        } else if (fullCommand.startsWith(FindCommand.COMMAND_WORD)) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "            command \u003d createFindCommand(fullCommand);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "            throw new InvalidCommandException();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        return command;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * Returns a \u003ccode\u003eDuke\u003c/code\u003e understandable list command that represents a corresponding user input."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @return A list command."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    private ListCommand createListCommand() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        return new ListCommand();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * Returns a \u003ccode\u003eDuke\u003c/code\u003e understandable done command that represents a corresponding user input."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @param fullCommand The user input."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @return A done command."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @throws TaskIndexToMarkAsDoneNotFoundException If task index of the task to mark as done is not given."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @throws MarkAsDoneNumberFormatException If task index of the task to mark as done does not have"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     *                                         an appropriate format and cannot be converted to an integer."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    private DoneCommand createDoneCommand(String fullCommand) throws TaskIndexToMarkAsDoneNotFoundException,"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "            MarkAsDoneNumberFormatException {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        String taskIndexString \u003d fullCommand.substring(DoneCommand.COMMAND_WORD_LENGTH).trim();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        if (!isTaskIndexGiven(taskIndexString)) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "            throw new TaskIndexToMarkAsDoneNotFoundException();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "            int taskIndex \u003d Integer.parseInt(taskIndexString) - 1;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "            return new DoneCommand(taskIndex);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "            throw new MarkAsDoneNumberFormatException();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * Returns a \u003ccode\u003eDuke\u003c/code\u003e understandable delete command that represents a corresponding user input."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @param fullCommand The user input."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @return A delete command."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @throws TaskIndexToDeleteNotFoundException If task index of the task to delete is not given."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @throws DeleteNumberFormatException If task index of the task to delete does not have an appropriate"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     *                                     format and cannot be converted to an integer."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    private DeleteCommand createDeleteCommand(String fullCommand) throws TaskIndexToDeleteNotFoundException,"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "            DeleteNumberFormatException {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        String taskIndexString \u003d fullCommand.substring(DeleteCommand.COMMAND_WORD_LENGTH).trim();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        if (!isTaskIndexGiven(taskIndexString)) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "            throw new TaskIndexToDeleteNotFoundException();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "            int taskIndex \u003d Integer.parseInt(taskIndexString) - 1;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "            return new DeleteCommand(taskIndex);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "            throw new DeleteNumberFormatException();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    private boolean isTaskIndexGiven(String taskIndex) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        return taskIndex.length() \u003e 0;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * Returns a \u003ccode\u003eDuke\u003c/code\u003e understandable clear command that represents a corresponding user input."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @return A clear command."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    private ClearCommand createClearCommand() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        return new ClearCommand();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * Returns a \u003ccode\u003eDuke\u003c/code\u003e understandable todo command that represents a corresponding user input."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @param fullCommand The user input."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @return A todo command."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @throws TodoDescriptionNotFoundException If the todo task description is not given."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    private TodoCommand createTodoCommand(String fullCommand) throws TodoDescriptionNotFoundException {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        String todoDescription \u003d fullCommand.substring(TodoCommand.COMMAND_WORD_LENGTH).trim();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        if (!hasTaskDescription(todoDescription)) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "            throw new TodoDescriptionNotFoundException();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        Todo newTodo \u003d new Todo(todoDescription);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        return new TodoCommand(newTodo);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * Returns a \u003ccode\u003eDuke\u003c/code\u003e understandable event command that represents a corresponding user input."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @param fullCommand The user input."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @return A event command."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @throws EventDescriptionNotFoundException If the event task description is not given."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @throws EventTimeNotFoundException If the event task timing is not given."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    private EventCommand createEventCommand(String fullCommand) throws EventDescriptionNotFoundException"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "            , EventTimeNotFoundException {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        String eventInformation \u003d fullCommand.substring(EventCommand.COMMAND_WORD_LENGTH).trim();"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        if (!hasTaskDescription(eventInformation)) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "            throw new EventDescriptionNotFoundException();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        String[] eventDescriptionAndTime \u003d splitDescriptionAndTime(eventInformation,"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                EventCommand.EVENT_TIME_INDICATOR);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        if (!hasOneTaskTime(eventDescriptionAndTime)) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "            throw new EventTimeNotFoundException();"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        String eventDescription \u003d eventDescriptionAndTime[0].trim();"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        String eventTime \u003d eventDescriptionAndTime[1].trim();"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        Event newEvent \u003d new Event(eventDescription, eventTime);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        return new EventCommand(newEvent);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * Returns a \u003ccode\u003eDuke\u003c/code\u003e understandable deadline command that represents a corresponding user input."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @param fullCommand The user input."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @return A deadline command."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @throws DeadlineDescriptionNotFoundException If the deadline task description is not given."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @throws DeadlineTimeNotFoundException If the time the deadline task is due is not given."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    private DeadlineCommand createDeadlineCommand(String fullCommand) throws DeadlineDescriptionNotFoundException"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "            , DeadlineTimeNotFoundException {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        String deadlineInformation \u003d fullCommand.substring(DeadlineCommand.COMMAND_WORD_LENGTH).trim();"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        if (!hasTaskDescription(deadlineInformation)) {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "            throw new DeadlineDescriptionNotFoundException();"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        String[] deadlineDescriptionAndTime \u003d splitDescriptionAndTime(deadlineInformation"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                , DeadlineCommand.DEADLINE_TIME_INDICATOR);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        if (!hasOneTaskTime(deadlineDescriptionAndTime)) {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "            throw new DeadlineTimeNotFoundException();"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        String deadlineDescription \u003d deadlineDescriptionAndTime[0].trim();"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        String deadlineTime \u003d deadlineDescriptionAndTime[1].trim();"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        Deadline newDeadline \u003d new Deadline(deadlineDescription, deadlineTime);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        return new DeadlineCommand(newDeadline);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    private boolean hasTaskDescription(String taskInformation) {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        return taskInformation.length() \u003e 0;"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    private boolean hasOneTaskTime(String[] taskDescriptionAndTime) {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        int taskTimeIndex \u003d 2;"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        return taskDescriptionAndTime.length \u003d\u003d taskTimeIndex;"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    private String[] splitDescriptionAndTime(String taskInformation, String splitLocation) {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        return taskInformation.split(splitLocation);"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * Returns a \u003ccode\u003eDuke\u003c/code\u003e understandable bye command that represents a corresponding user input."
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @return A bye command."
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    private Command createByeCommand() {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        return new ByeCommand();"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * Returns a \u003ccode\u003eDuke\u003c/code\u003e understandable find command that represents a corresponding user input."
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @param fullCommand The user input."
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @return A find command."
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @throws KeywordNotFoundException If the keyword to find is not given."
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    private FindCommand createFindCommand(String fullCommand) throws KeywordNotFoundException {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        String keyword \u003d fullCommand.substring(FindCommand.COMMAND_WORD_LENGTH).trim();"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        if (!isKeywordGiven(keyword)) {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "            throw new KeywordNotFoundException();"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        return new FindCommand(keyword);"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    private boolean isKeywordGiven(String keyword) {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        return keyword.length() \u003e 0;"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HengFuYuen": 261
    }
  },
  {
    "path": "src/main/java/duke/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "import duke.exception.InvalidTaskTypeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "import duke.task.Todo;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": " * Represents a data storage manager."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": " * A \u003ccode\u003eStorage\u003c/code\u003e object helps to save tasks in the task list into the hard disk and loads any"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": " * previously saved task when Duke is first booted up."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": " *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": " * @author Heng Fu Yuen"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": " * @version 2.0"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    /* String in saved task information that indicates that the task is a todo */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    private static final String SAVED_TODO_INDICATOR \u003d \"T\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    /* String in saved task information that indicates that the task is a deadline */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    private static final String SAVED_DEADLINE_INDICATOR \u003d \"D\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    /* String in saved task information that indicates that the task is a event */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    private static final String SAVED_EVENT_INDICATOR \u003d \"E\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    /* Divider that separates task type, done status, description and time (if any) of a task in the file */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    private static final String TASK_INFORMATION_DIVIDER \u003d \":\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    /* The file that the tasks are saved in */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    private final File dukeFile;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * Constructs a \u003ccode\u003eStorage\u003c/code\u003e object with a directory containing the file that saves tasks and"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * where previously saved tasks can be loaded from."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @param dirPath Directory path that indicates the directory where the file storing tasks is saved."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @param filePath File path where the file storing the tasks is found."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @throws IOException If an I/O error occurred while creating the file that stores tasks."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    public Storage(String dirPath, String filePath) throws IOException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        File dukeDir \u003d new File(dirPath);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        dukeFile \u003d new File(filePath);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        if (!dukeDir.exists()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "            dukeDir.mkdir();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        if (!dukeFile.exists()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "            dukeFile.createNewFile();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * Returns an arraylist of all previously saved tasks or an empty arraylist if there are no previously"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * saved tasks."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * Reads in all previously saved task information, deciphers it and adds them into an arraylist."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @return An arraylist of all previously saved tasks or an empty arraylist if there are no saved tasks."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @throws FileNotFoundException If the file that should contain all previously saved tasks is not found."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @throws InvalidTaskTypeException If the the task type of a previously saved task is not recognised."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    public ArrayList\u003cTask\u003e load() throws FileNotFoundException, InvalidTaskTypeException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        Scanner fileScanner \u003d new Scanner(dukeFile);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        while (fileScanner.hasNext()) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "            String savedTask \u003d fileScanner.nextLine();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "            tasks.add(createSavedTask(savedTask));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        fileScanner.close();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        return tasks;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * Returns a task that represents the task information previously saved in the file."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @param savedTask The previously saved task information including its description, time (if any) and"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     *                  done status."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @return An task that was previously saved in the file."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @throws InvalidTaskTypeException If the the task type of a previously saved task is not recognised."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    private Task createSavedTask(String savedTask) throws InvalidTaskTypeException {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        Task savedTaskToBeAdded;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        if (savedTask.startsWith(SAVED_TODO_INDICATOR)) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "            savedTaskToBeAdded \u003d createSavedTodo(savedTask);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        } else if (savedTask.startsWith(SAVED_DEADLINE_INDICATOR)) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "            savedTaskToBeAdded \u003d createSavedDeadline(savedTask);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        } else if (savedTask.startsWith(SAVED_EVENT_INDICATOR)) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "            savedTaskToBeAdded \u003d createSavedEvent(savedTask);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "            throw new InvalidTaskTypeException();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        return savedTaskToBeAdded;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    private String[] splitSavedTaskInformation(String taskInformation) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        return taskInformation.split(TASK_INFORMATION_DIVIDER);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * Returns an event that represents the event information previously saved in the file."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @param savedTask The previously saved event information including its description, time and done"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     *                  status."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @return An event that was previously saved in the file."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    private Event createSavedEvent(String savedTask) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        String[] savedEventInformation \u003d splitSavedTaskInformation(savedTask);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        boolean isSavedEventDone \u003d savedEventInformation[1].trim().equals(Task.TASK_DONE_ICON);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        String savedEventDescription \u003d savedEventInformation[2].trim();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        String savedEventTime \u003d savedEventInformation[3].trim();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        return new Event(savedEventDescription, savedEventTime, isSavedEventDone);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * Returns a deadline that represents the deadline information previously saved in the file."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @param savedTask The previously saved deadline information including its description, due time and"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     *                  done status."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @return A deadline that was previously saved in the file."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    private Deadline createSavedDeadline(String savedTask) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        String[] savedDeadlineInformation \u003d splitSavedTaskInformation(savedTask);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        boolean isSavedDeadlineDone \u003d savedDeadlineInformation[1].trim().equals(Task.TASK_DONE_ICON);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        String savedDeadlineDescription \u003d savedDeadlineInformation[2].trim();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        String savedDeadlineTime \u003d savedDeadlineInformation[3].trim();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        return new Deadline(savedDeadlineDescription, savedDeadlineTime, isSavedDeadlineDone);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * Returns a todo that represents the todo information previously saved in the file."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @param savedTask The previously saved todo information including its description and done status."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @return A todo that was previously saved in the file."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    private Todo createSavedTodo(String savedTask) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        String[] savedTodoInformation \u003d splitSavedTaskInformation(savedTask);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        boolean isSavedTodoDone \u003d savedTodoInformation[1].trim().equals(Task.TASK_DONE_ICON);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        String savedTodoDescription \u003d savedTodoInformation[2].trim();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        return new Todo(savedTodoDescription, isSavedTodoDone);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * Saves a task to the file."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @param taskToSave The task to be saved in the file."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @throws IOException If an I/O error occurred while saving the task to the file."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    public void saveTask(Task taskToSave) throws IOException {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        FileWriter fw \u003d new FileWriter(dukeFile, true);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        if (dukeFile.length() !\u003d 0) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "            fw.write(System.lineSeparator());"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        fw.write(taskToSave.messageToStoreInDukeFile());"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        fw.close();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * Updates the tasks in the file."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @param tasks The arraylist containing all the tasks in the task list."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @throws IOException If an I/O error occurred while updating the file."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    public void update(ArrayList\u003cTask\u003e tasks) throws IOException {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        dukeFile.delete();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        dukeFile.createNewFile();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        for (Task task : tasks) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "            saveTask(task);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * Removes all the tasks from the file."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * The file will be empty after this call returns."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @throws IOException If an I/O error occurred while clearing the file."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    public void clear() throws IOException {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        dukeFile.delete();"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        dukeFile.createNewFile();"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HengFuYuen": 185
    }
  },
  {
    "path": "src/main/java/duke/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "import duke.exception.EmptyTaskListException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "import duke.exception.InvalidTaskIndexException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": " * Represents a list of tasks."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": " * A \u003ccode\u003eTaskList\u003c/code\u003e object stores all the tasks and provides methods related to adding, deleting,"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": " * etc, of tasks to the task list."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": " *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": " * @author Heng Fu Yuen"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": " * @version 2.0"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    private final ArrayList\u003cTask\u003e tasks;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    private int numberOfTasks;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * Constructs a \u003ccode\u003eTaskList\u003c/code\u003e object that stores tasks and is initialized with previously"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * saved tasks if any."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * The task list also keeps track of the number of tasks."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @param tasks An arraylist containing previously saved tasks or an empty arraylist if there are"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     *              no previously saved tasks."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    public TaskList(ArrayList\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        this.tasks \u003d tasks;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        this.numberOfTasks \u003d tasks.size();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * Returns an arraylist containing all the tasks in the list."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @return An arraylist containing all the tasks in the list."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    public ArrayList\u003cTask\u003e getTasks() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        return tasks;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * Returns the number of tasks in the list."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @return The number of tasks in the list."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    public int getNumberOfTasks() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        return numberOfTasks;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * Returns a string representation of the range of valid task indexes."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * If the task list is empty, a \u003ccode\u003e\"none\"\u003c/code\u003e string is returned."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @return A string representation of the range of valid task indexes."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    public String getRangeOfValidTaskIndex() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        return numberOfTasks \u003d\u003d 0 ? \"none\" : \"1 to \" + numberOfTasks;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * Adds a new task to the list."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @param newTask The new task to be added."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    public void add(Task newTask) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        tasks.add(newTask);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        numberOfTasks++;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * Returns the task that was marked as done."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * The task with the given task index is marked as done."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @param taskIndex The task index of the task to be marked as done."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @return The task that was marked as done."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @throws EmptyTaskListException If the task list is empty."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @throws InvalidTaskIndexException If the the task index given is \u003c\u003d 0 or \u003e number of tasks in the list."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    public Task markTaskAsDone(int taskIndex) throws EmptyTaskListException, InvalidTaskIndexException {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        if (isEmpty()) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "            throw new EmptyTaskListException();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        if (!isTaskIndexValid(taskIndex)) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "            throw new InvalidTaskIndexException();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        Task taskMarkedAsDone \u003d tasks.get(taskIndex);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        taskMarkedAsDone.markAsDone();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        return taskMarkedAsDone;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    private boolean isTaskIndexValid(int taskIndex) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        return taskIndex \u003e\u003d 0 \u0026\u0026 taskIndex \u003c numberOfTasks;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * Returns the task that was deleted from the list."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * The task with the given task index is removed from the list."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @param taskIndex The task index of the task to be deleted."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @return The task that was deleted from the list."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @throws EmptyTaskListException If the task list is empty."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @throws InvalidTaskIndexException If the the task index given is \u003c\u003d 0 or \u003e number of tasks in the list."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    public Task delete(int taskIndex) throws EmptyTaskListException, InvalidTaskIndexException {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        if (isEmpty()) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "            throw new EmptyTaskListException();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        if (!isTaskIndexValid(taskIndex)) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "            throw new InvalidTaskIndexException();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        Task taskDeleted \u003d tasks.get(taskIndex);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        tasks.remove(taskIndex);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        numberOfTasks--;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        return taskDeleted;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    private boolean isEmpty() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        return numberOfTasks \u003d\u003d 0;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * Removes all the tasks from the task list."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * The list will be empty after this call returns."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    public void clear() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        tasks.clear();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        numberOfTasks \u003d 0;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * Returns an arraylist of tasks in the task list containing the given keyword."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @param keyword The keyword to search for."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @return An arraylist of tasks in the task list containing the given keyword."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @throws EmptyTaskListException If the task list is empty."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    public ArrayList\u003cTask\u003e find(String keyword) throws EmptyTaskListException {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        if (isEmpty()) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "            throw new EmptyTaskListException();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        return (ArrayList\u003cTask\u003e) tasks.stream()"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                .filter((task) -\u003e task.getAllInformation().contains(keyword))"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HengFuYuen": 149
    }
  },
  {
    "path": "src/main/java/duke/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": " * Represents a text user interface."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": " * A \u003ccode\u003eUi\u003c/code\u003e object deals with user interactions by reading the user command and showing users the"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": " * appropriate messages after a valid command is executed or when an error occurs."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": " *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": " * @author Heng Fu Yuen"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": " * @version 2.0"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    static final String INPUT_INSTRUCTION_MESSAGE \u003d \"Please input in the following format:\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    static final String RANGE_OF_VALID_TASK_NUMBER_MESSAGE \u003d \"Range of valid task number: \";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    static final String START_OF_ERROR_MESSAGE \u003d \":( OOPS!!! \";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    static final String PRINT_TASK_LIST_INPUT_FORMAT \u003d \"  To list all tasks: list\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    static final String MARK_TASK_AS_DONE_INPUT_FORMAT \u003d \"  To mark a task as done: done \u003ctask number\u003e\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    static final String DELETE_TASK_INPUT_FORMAT \u003d \"  To delete a task: delete \u003ctask number\u003e\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    static final String TODO_INPUT_FORMAT \u003d \"  To add a todo: todo \u003cdescription of todo\u003e\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    static final String DEADLINE_INPUT_FORMAT \u003d \"  To add a deadline: deadline \u003cdescription of \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "            + \"deadline\u003e /by \u003ctime it is due\u003e\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    static final String EVENT_INPUT_FORMAT \u003d \"  To add an event: event \u003cdescription of event\u003e /at \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "            + \"\u003cthe event time\u003e\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    static final String EXIT_INPUT_FORMAT \u003d \"  To exit Duke: bye\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    static final String FIND_INPUT_FORMAT \u003d \"  To find task(s): find \u003ckeyword\u003e\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    static final String CLEAR_TASK_LIST_INPUT_FORMAT \u003d \"  To clear task list: clear\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    static final String DIVIDER \u003d"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "            \"_____________________________________________________________________________________________\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    private static final Scanner SCANNER \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * Constructs a \u003ccode\u003eUi\u003c/code\u003e object."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    public Ui() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * Reads in and returns the command given."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @return The command given."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    public String readCommand() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        return SCANNER.nextLine();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * Prints the welcome message from Duke when it is first opened."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    public void printWelcomeMessage() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        String logo \u003d \" ____        _\" + System.lineSeparator()"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                + \"|  _ \\\\ _   _| | _____\" + System.lineSeparator()"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                + \"| | | | | | | |/ / _ \\\\\" + System.lineSeparator()"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                + \"| |_| | |_| |   \u003c  __/\" + System.lineSeparator()"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                + \"|____/ \\\\__,_|_|\\\\_\\\\___|\" + System.lineSeparator();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        System.out.println(\"Hello from\" + System.lineSeparator() + logo);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        System.out.println(DIVIDER);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        System.out.println(\"Hello! I\u0027m Duke\" + System.lineSeparator() + \"What can I do for you?\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        System.out.println(DIVIDER);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * Prints an error message when an IOException is thrown."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @param message The place where the error occurred resulting in an IOException to be thrown."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    public void printIOExceptionErrorMessage(String message) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        System.out.println(DIVIDER);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        System.out.println(START_OF_ERROR_MESSAGE + \"Something went wrong...\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        System.out.println(message);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        System.out.println(DIVIDER);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * Prints an error message when the file used to store previously saved tasks cannot be found."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    public void printFileNotFoundErrorMessage() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        System.out.println(DIVIDER);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        System.out.println(START_OF_ERROR_MESSAGE + \"There is no previously saved data.\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        System.out.println(DIVIDER);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * Prints an error message when the previously saved tasks has missing data and cannot be loaded."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    public void printDukeFileCannotBeLoadedErrorMessage() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        System.out.println(DIVIDER);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        System.out.println(START_OF_ERROR_MESSAGE + \"Saved data has errors...\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        System.out.println(\"Duke is unable to load previously saved data...\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        System.out.println(DIVIDER);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * Prints a message to show that the task list has been successfully cleared and is now empty."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    public void printClearTaskListMessage() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        System.out.println(DIVIDER);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        System.out.println(\"All previous data has been deleted...\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        System.out.println(\"The task list is now empty.\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        System.out.println(DIVIDER);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * Prints an error message when a invalid task index to delete is given and provide input suggestions."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * A range of valid task indexes and correct input format for deleting a task will be shown."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @param rangeOfValidTaskNumbers The range of valid task indexes of tasks that can be deleted."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    public void printInvalidTaskIndexToDeleteErrorMessage(String rangeOfValidTaskNumbers) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        System.out.println(DIVIDER);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        System.out.println(START_OF_ERROR_MESSAGE + \"The task to delete is invalid.\""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                + System.lineSeparator());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        System.out.println(INPUT_INSTRUCTION_MESSAGE);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        System.out.println(RANGE_OF_VALID_TASK_NUMBER_MESSAGE + rangeOfValidTaskNumbers);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        System.out.println(DELETE_TASK_INPUT_FORMAT);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        System.out.println(DIVIDER);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * Prints an error message when a task index to delete is not given and provide input suggestions."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * A range of valid task indexes and correct input format for deleting a task will be shown."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @param rangeOfValidTaskNumbers The range of valid task indexes of tasks that can be deleted."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    public void printTaskIndexToDeleteNotFoundErrorMessage(String rangeOfValidTaskNumbers) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        System.out.println(DIVIDER);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        System.out.println(START_OF_ERROR_MESSAGE + \"The task to delete is not found.\""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                + System.lineSeparator());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        System.out.println(INPUT_INSTRUCTION_MESSAGE);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        System.out.println(RANGE_OF_VALID_TASK_NUMBER_MESSAGE + rangeOfValidTaskNumbers);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        System.out.println(DELETE_TASK_INPUT_FORMAT);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        System.out.println(DIVIDER);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * Prints a message to show that the task specified has been deleted and how many tasks are still left"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * in the task list."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @param deletedTask The task that was deleted from the task list."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @param getNumberOfTasks The number of tasks left in the task list."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    public void printDeletedTask(Task deletedTask, int getNumberOfTasks) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        System.out.println(DIVIDER);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        System.out.println(\"Noted. I\u0027ve removed this task:\");"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        System.out.println(\"  \" + deletedTask);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        System.out.println(\"Now you have \" + getNumberOfTasks + \" task(s) in the list.\");"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        System.out.println(DIVIDER);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * Prints an error message when a task index to mark as done is not given and provide input suggestions."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * A range of valid task indexes and correct input format to mark a task as done will be shown."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @param rangeOfValidTaskNumbers The range of valid task indexes of tasks that can be marked as done."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    public void printTaskIndexToMarkAsDoneNotFoundErrorMessage(String rangeOfValidTaskNumbers) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        System.out.println(DIVIDER);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        System.out.println(START_OF_ERROR_MESSAGE + \"The task to mark as done is not found.\""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                + System.lineSeparator());"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        System.out.println(INPUT_INSTRUCTION_MESSAGE);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        System.out.println(RANGE_OF_VALID_TASK_NUMBER_MESSAGE + rangeOfValidTaskNumbers);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        System.out.println(MARK_TASK_AS_DONE_INPUT_FORMAT);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        System.out.println(DIVIDER);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * Prints an error message when a invalid task index to mark as done is given and provide input"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * suggestions."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * A range of valid task indexes and correct input format to mark a task as done will be shown."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @param rangeOfValidTaskNumbers The range of valid task indexes of tasks that can be marked as done."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    public void printInvalidTaskIndexToMarkAsDoneErrorMessage(String rangeOfValidTaskNumbers) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        System.out.println(DIVIDER);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        System.out.println(START_OF_ERROR_MESSAGE + \"The task to mark as done is invalid.\""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                + System.lineSeparator());"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        System.out.println(INPUT_INSTRUCTION_MESSAGE);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        System.out.println(RANGE_OF_VALID_TASK_NUMBER_MESSAGE + rangeOfValidTaskNumbers);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        System.out.println(MARK_TASK_AS_DONE_INPUT_FORMAT);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        System.out.println(DIVIDER);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * Prints an error message when a command to delete or mark a task as done is given in the correct"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * format but the task list is empty."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    public void printEmptyTaskListErrorMessage() {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        System.out.println(DIVIDER);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        System.out.println(START_OF_ERROR_MESSAGE + \"The task list is empty.\" + System.lineSeparator());"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        System.out.println(\"Please add a task to the task list.\");"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        System.out.println(TODO_INPUT_FORMAT);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        System.out.println(DEADLINE_INPUT_FORMAT);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        System.out.println(EVENT_INPUT_FORMAT);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        System.out.println(DIVIDER);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * Prints an error message when the task type of a previously saved task cannot be deciphered."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    public void printInvalidTaskTypeErrorMessage() {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        System.out.println(DIVIDER);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        System.out.println(START_OF_ERROR_MESSAGE + \"The task is neither a todo nor a deadline nor an event.\");"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        System.out.println(DIVIDER);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * Prints an error message when an invalid command is given and provide input suggestions."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * A range of valid task indexes and correct input formats for the various commands will be shown."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @param rangeOfValidTaskNumbers The range of valid task indexes of tasks that can be deleted or marked"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     *                               as done."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    public void printInvalidCommandErrorMessage(String rangeOfValidTaskNumbers) {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        System.out.println(DIVIDER);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        System.out.println(START_OF_ERROR_MESSAGE + \"I\u0027m sorry, but I don\u0027t know what that means :-(\""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                + System.lineSeparator());"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        System.out.println(INPUT_INSTRUCTION_MESSAGE);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        System.out.println(RANGE_OF_VALID_TASK_NUMBER_MESSAGE + rangeOfValidTaskNumbers);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        System.out.println(TODO_INPUT_FORMAT);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        System.out.println(DEADLINE_INPUT_FORMAT);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        System.out.println(EVENT_INPUT_FORMAT);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        System.out.println(PRINT_TASK_LIST_INPUT_FORMAT);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        System.out.println(MARK_TASK_AS_DONE_INPUT_FORMAT);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        System.out.println(DELETE_TASK_INPUT_FORMAT);"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        System.out.println(CLEAR_TASK_LIST_INPUT_FORMAT);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        System.out.println(FIND_INPUT_FORMAT);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        System.out.println(EXIT_INPUT_FORMAT);"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        System.out.println(DIVIDER);"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * Prints an error message when a command to add a todo task without a description is given."
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    public void printTodoDescriptionNotFoundErrorMessage() {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        System.out.println(DIVIDER);"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        System.out.println(START_OF_ERROR_MESSAGE + \"The description of a todo cannot be empty.\""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                + System.lineSeparator());"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        System.out.println(INPUT_INSTRUCTION_MESSAGE);"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        System.out.println(TODO_INPUT_FORMAT);"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        System.out.println(DIVIDER);"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * Prints an error message when a command to add a deadline task without a description is given."
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    public void printDeadlineDescriptionNotFoundErrorMessage() {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        System.out.println(DIVIDER);"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        System.out.println(START_OF_ERROR_MESSAGE + \"The description of a deadline cannot be empty.\""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                + System.lineSeparator());"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        System.out.println(INPUT_INSTRUCTION_MESSAGE);"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        System.out.println(DEADLINE_INPUT_FORMAT);"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        System.out.println(DIVIDER);"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * Prints an error message when a command to add a deadline task without a timing at which it is due is"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * given."
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    public void printDeadlineTimeNotFoundErrorMessage() {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        System.out.println(DIVIDER);"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        System.out.println(START_OF_ERROR_MESSAGE + \"The time the deadline is due is not found as none or \" +"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                \"too many timings were given.\" + System.lineSeparator());"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        System.out.println(INPUT_INSTRUCTION_MESSAGE);"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        System.out.println(DEADLINE_INPUT_FORMAT);"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        System.out.println(DIVIDER);"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * Prints an error message when a command to add an event task without a description is given."
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    public void printEventDescriptionNotFoundErrorMessage() {"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        System.out.println(DIVIDER);"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        System.out.println(START_OF_ERROR_MESSAGE + \"The description of an event cannot be empty.\""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                + System.lineSeparator());"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        System.out.println(INPUT_INSTRUCTION_MESSAGE);"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        System.out.println(EVENT_INPUT_FORMAT);"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        System.out.println(DIVIDER);"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * Prints an error message when a command to add an event task without a timing is given."
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    public void printEventTimeNotFoundErrorMessage() {"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        System.out.println(DIVIDER);"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        System.out.println(START_OF_ERROR_MESSAGE + \"The event timing is not found as none or too \" +"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                \"many timings were given.\" + System.lineSeparator());"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        System.out.println(INPUT_INSTRUCTION_MESSAGE);"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        System.out.println(EVENT_INPUT_FORMAT);"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        System.out.println(DIVIDER);"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * Prints a message to show that the task specified has been added and how many tasks are in the task"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * list."
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @param newTask The new task that was added to the task list."
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @param getNumberOfTasks The number of tasks in the task list."
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    public void printNewTask(Task newTask, int getNumberOfTasks) {"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        System.out.println(DIVIDER);"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        System.out.println(\"Got it. I\u0027ve added this task:\");"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        System.out.println(\"  \" + newTask);"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        System.out.println(\"Now you have \" + getNumberOfTasks + \" task(s) in the list.\");"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        System.out.println(DIVIDER);"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * Prints a message to show that the task specified has been marked as done."
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @param taskMarkedAsDone The task that was marked as done."
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    public void printTaskMarkedAsDone(Task taskMarkedAsDone) {"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        System.out.println(DIVIDER);"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        System.out.println(\"Nice! I\u0027ve marked this task as done:\");"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        System.out.println(\"  \" + taskMarkedAsDone);"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        System.out.println(DIVIDER);"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * Prints out all the tasks in the task list in the order that they were added or a message stating"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * that the task list is empty if there are no tasks."
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @param tasks The arraylist containing all the tasks in the task list."
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    public void printTaskList(ArrayList\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        System.out.println(DIVIDER);"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        if (tasks.isEmpty()) {"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "            System.out.println(\"The task list is empty.\");"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "            System.out.println(\"Here are the tasks in your list:\");"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "            int taskNumber \u003d 1;"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "            for (Task task : tasks) {"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                System.out.println(\"  \" + (taskNumber) + \".\" + task);"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                taskNumber++;"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "            }"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        System.out.println(DIVIDER);"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * Prints an exit message when Duke is closed."
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    public void printExitMessage() {"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        System.out.println(DIVIDER);"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        System.out.println(\"Bye. Hope to see you again soon!\");"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        System.out.println(DIVIDER);"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * Prints out all the tasks in the task list containing the keyword given in the order that they were"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * added."
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * The tasks containing the keyword is numbered after its original task index in the full task list."
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @param tasksWithKeyword The arraylist containing all the tasks with the given keyword."
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @param tasks The arraylist containing all the tasks in the task list."
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    public void printTasksWithKeyword(ArrayList\u003cTask\u003e tasksWithKeyword, ArrayList\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        System.out.println(DIVIDER);"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        if (tasksWithKeyword.isEmpty()) {"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "            System.out.println(\"There are no matching task(s) in your list.\");"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "            int numberOfTasksWithKeyword \u003d tasksWithKeyword.size();"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "            System.out.println(\"Here is(are) the \" + numberOfTasksWithKeyword + \" matching task(s) in your \" +"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                    \"list:\");"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "            for (Task task : tasksWithKeyword) {"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                int taskIndexInUnfilteredTaskList \u003d tasks.indexOf(task) + 1;"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                System.out.println(\"  \" + (taskIndexInUnfilteredTaskList) + \".\" + task);"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "            }"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        System.out.println(DIVIDER);"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * Prints an error message when a keyword to search for in the task list is not given and provide the"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * correct input format for finding tasks using a keyword."
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    public void printKeywordNotFoundErrorMessage() {"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        System.out.println(DIVIDER);"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        System.out.println(START_OF_ERROR_MESSAGE + \"The keyword to search for is not found.\""
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                + System.lineSeparator());"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        System.out.println(INPUT_INSTRUCTION_MESSAGE);"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        System.out.println(FIND_INPUT_FORMAT);"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        System.out.println(DIVIDER);"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HengFuYuen": 388
    }
  },
  {
    "path": "src/main/java/duke/command/ByeCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": " * Represents a user instruction to exit the system."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": " * A \u003ccode\u003eByeCommand\u003c/code\u003e will signify to \u003ccode\u003eDuke\u003c/code\u003e to exit the application."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": " *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": " * @author Heng Fu Yuen"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": " * @version 2.0"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "public class ByeCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    /* A string that signifies the input is a bye command */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"bye\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * Constructs a \u003ccode\u003eByeCommand\u003c/code\u003e object."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    public ByeCommand() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * Prints the exiting message."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @param tasks The task list that stores all the tasks."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @param ui The ui in charge of user interaction."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @param storage The storage that saves tasks into a file and loads tasks from the file."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    public void execute (TaskList tasks, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "            ui.printExitMessage();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * Returns \u003ccode\u003etrue\u003c/code\u003e if user is exiting the application."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @return \u003ccode\u003etrue\u003c/code\u003e if user is exiting the application."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HengFuYuen": 47
    }
  },
  {
    "path": "src/main/java/duke/command/ClearCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": " * Represents a user instruction to clear the task list."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": " * A \u003ccode\u003eClearCommand\u003c/code\u003e will signify to \u003ccode\u003eDuke\u003c/code\u003e to remove all tasks from the task list."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": " *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": " * @author Heng Fu Yuen"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": " * @version 2.0"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "public class ClearCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    /* A string that signifies the input is a clear command */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"clear\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * Constructs a \u003ccode\u003eClearCommand\u003c/code\u003e object."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    public ClearCommand() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * Clears the task list and informs the user that the task list is cleared."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @param tasks The task list that stores all the tasks."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @param ui The ui in charge of user interaction."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @param storage The storage that saves tasks into a file and loads tasks from the file."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    public void execute (TaskList tasks, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        tasks.clear();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        ui.printClearTaskListMessage();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "            storage.clear();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "            ui.printIOExceptionErrorMessage(\"Duke is unable to clear data of tasks saved in the \" +"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                    \"hard disk...\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HengFuYuen": 45
    }
  },
  {
    "path": "src/main/java/duke/command/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": " * Represents a user instruction."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": " * A \u003ccode\u003eCommand\u003c/code\u003e cannot be instantiated as it is abstract."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": " *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": " * @author Heng Fu Yuen"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": " * @version 2.0"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * Constructs a \u003ccode\u003eCommand\u003c/code\u003e object."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    public Command() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * Returns \u003ccode\u003etrue\u003c/code\u003e if user is exiting the application."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @return \u003ccode\u003etrue\u003c/code\u003e if user is exiting the application."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    public boolean isExit () {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * Abstract method that executes the command."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * The implementation is left to subclasses."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @param tasks The task list that stores all the tasks."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @param ui The ui in charge of user interaction."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @param storage The storage that saves tasks into a file and loads tasks from the file."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    public abstract void execute(TaskList tasks, Ui ui, Storage storage);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HengFuYuen": 40
    }
  },
  {
    "path": "src/main/java/duke/command/DeadlineCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": " * Represents a user instruction to add a deadline task."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": " * A \u003ccode\u003eDeadlineCommand\u003c/code\u003e will signify to \u003ccode\u003eDuke\u003c/code\u003e to add a deadline task to the task list."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": " *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": " * @author Heng Fu Yuen"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": " * @version 2.0"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "public class DeadlineCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    /* A string that signifies the input is a deadline command */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"deadline\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    public static final int COMMAND_WORD_LENGTH \u003d COMMAND_WORD.length();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    /* A string that indicates the following string is the timing at which the deadline is due */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    public static final String DEADLINE_TIME_INDICATOR \u003d \"/by\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    /* The deadline to be added to the task list */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    private final Deadline newDeadline;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * Constructs a \u003ccode\u003eDeadlineCommand\u003c/code\u003e object given the deadline to be added."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    public DeadlineCommand(Deadline newDeadline) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        this.newDeadline \u003d newDeadline;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * Adds a deadline to the task list and storage file and informs the user that the deadline has been"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * added."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @param tasks The task list that stores all the tasks."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @param ui The ui in charge of user interaction."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @param storage The storage that saves tasks into a file and loads tasks from the file."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        tasks.add(newDeadline);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        ui.printNewTask(newDeadline, tasks.getNumberOfTasks());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "            storage.saveTask(newDeadline);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "            ui.printIOExceptionErrorMessage(\"Duke is unable to save the task to the hard drive...\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HengFuYuen": 55
    }
  },
  {
    "path": "src/main/java/duke/command/DeleteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "import duke.exception.EmptyTaskListException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "import duke.exception.InvalidTaskIndexException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": " * Represents a user instruction to delete a specified task."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": " * A \u003ccode\u003eDeleteCommand\u003c/code\u003e will signify to \u003ccode\u003eDuke\u003c/code\u003e to delete the specified task from the"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": " * task list."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": " *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": " * @author Heng Fu Yuen"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": " * @version 2.0"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    /* A string that signifies the input is a delete command */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    public static final int COMMAND_WORD_LENGTH \u003d COMMAND_WORD.length();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    /* The task index of the task to be deleted */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    private final int taskIndex;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * Constructs a \u003ccode\u003eDeleteCommand\u003c/code\u003e object given the task index of the task to be deleted."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    public DeleteCommand(int taskIndex) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        this.taskIndex \u003d taskIndex;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * Removes the task specified from the task list and the storage file and informs the user that the task"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * has been deleted."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @param tasks The task list that stores all the tasks."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @param ui The ui in charge of user interaction."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @param storage The storage that saves tasks into a file and loads tasks from the file."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "            Task taskDeleted \u003d tasks.delete(taskIndex);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "            ui.printDeletedTask(taskDeleted, tasks.getNumberOfTasks());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "            storage.update(tasks.getTasks());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "            ui.printIOExceptionErrorMessage(\"Duke is unable to delete the task in the hard disk...\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        } catch (InvalidTaskIndexException e) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "            ui.printInvalidTaskIndexToDeleteErrorMessage(tasks.getRangeOfValidTaskIndex());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        } catch (EmptyTaskListException e) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "            ui.printEmptyTaskListErrorMessage();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HengFuYuen": 58
    }
  },
  {
    "path": "src/main/java/duke/command/DoneCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "import duke.exception.EmptyTaskListException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "import duke.exception.InvalidTaskIndexException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": " * Represents a user instruction to mark a specified task as done."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": " * A \u003ccode\u003eDoneCommand\u003c/code\u003e will signify to \u003ccode\u003eDuke\u003c/code\u003e to mark the specified task from the task"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": " * list as done."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": " *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": " * @author Heng Fu Yuen"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": " * @version 2.0"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "public class DoneCommand extends Command {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    /* A string that signifies the input is a done command */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"done\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    public static final int COMMAND_WORD_LENGTH \u003d COMMAND_WORD.length();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    /* The task index of the task to be marked as done */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    private final int taskIndex;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * Constructs a \u003ccode\u003eDoneCommand\u003c/code\u003e object given the task index of the task to be marked as done."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    public DoneCommand(int taskIndex) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        this.taskIndex \u003d taskIndex;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * Marks the task specified as done, updates the task in the storage file and informs the user that"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * the task has been marked as done."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @param tasks The task list that stores all the tasks."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @param ui The ui in charge of user interaction."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @param storage The storage that saves tasks into a file and loads tasks from the file."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "            Task taskMarkedAsDone \u003d tasks.markTaskAsDone(taskIndex);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "            ui.printTaskMarkedAsDone(taskMarkedAsDone);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "            storage.update(tasks.getTasks());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "            ui.printIOExceptionErrorMessage(\"Duke is unable to mark the task in the hard disk as done...\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        } catch (InvalidTaskIndexException e) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "            ui.printInvalidTaskIndexToMarkAsDoneErrorMessage(tasks.getRangeOfValidTaskIndex());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        } catch (EmptyTaskListException e) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "            ui.printEmptyTaskListErrorMessage();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HengFuYuen": 58
    }
  },
  {
    "path": "src/main/java/duke/command/EventCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": " * Represents a user instruction to add an event task."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": " * A \u003ccode\u003eEventCommand\u003c/code\u003e will signify to \u003ccode\u003eDuke\u003c/code\u003e to add an event task to the task list."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": " *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": " * @author Heng Fu Yuen"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": " * @version 2.0"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "public class EventCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    /* A string that signifies the input is an event command */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"event\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    public static final int COMMAND_WORD_LENGTH \u003d COMMAND_WORD.length();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    /* A string that indicates the following string is the timing of the event */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    public static final String EVENT_TIME_INDICATOR \u003d \"/at\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    /* The event to be added to the task list */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    private final Event newEvent;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * Constructs an \u003ccode\u003eEventCommand\u003c/code\u003e object given the event to be added."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    public EventCommand(Event newEvent) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        this.newEvent \u003d newEvent;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * Adds an event to the task list and storage file and informs the user that the event has been added."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @param tasks The task list that stores all the tasks."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @param ui The ui in charge of user interaction."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @param storage The storage that saves tasks into a file and loads tasks from the file."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        tasks.add(newEvent);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        ui.printNewTask(newEvent, tasks.getNumberOfTasks());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "            storage.saveTask(newEvent);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "            ui.printIOExceptionErrorMessage(\"Duke is unable to save the task to the hard disk...\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HengFuYuen": 54
    }
  },
  {
    "path": "src/main/java/duke/command/FindCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "import duke.exception.EmptyTaskListException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": " * Represents a user instruction to search for tasks containing the given keyword."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": " * A \u003ccode\u003eFindCommand\u003c/code\u003e will signify to \u003ccode\u003eDuke\u003c/code\u003e to find and print out tasks in"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": " * the task list containing the given keyword."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": " *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": " * @author Heng Fu Yuen"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": " * @version 2.0"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    /* A string that signifies the input is a find command */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"find\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    public static final int COMMAND_WORD_LENGTH \u003d COMMAND_WORD.length();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    /* The keyword to find in the task list */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    private final String keyword;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * Constructs a \u003ccode\u003eFindCommand\u003c/code\u003e object given the keyword to search for."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    public FindCommand(String keyword) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        this.keyword \u003d keyword;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * Finds and prints all the tasks in the task list containing the given keyword."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @param tasks The task list that stores all the tasks."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @param ui The ui in charge of user interaction."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @param storage The storage that saves tasks into a file and loads tasks from the file."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "            ArrayList\u003cTask\u003e tasksWithKeyword \u003d tasks.find(keyword);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "            ui.printTasksWithKeyword(tasksWithKeyword, tasks.getTasks());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        } catch (EmptyTaskListException e) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "            ui.printEmptyTaskListErrorMessage();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HengFuYuen": 51
    }
  },
  {
    "path": "src/main/java/duke/command/ListCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": " * Represents a user instruction to list out all the tasks."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": " * A \u003ccode\u003eListCommand\u003c/code\u003e will signify to \u003ccode\u003eDuke\u003c/code\u003e to print out all the tasks in the task list."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": " *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": " * @author Heng Fu Yuen"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": " * @version 2.0"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    /* A string that signifies the input is a list command */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"list\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * Constructs a \u003ccode\u003eListCommand\u003c/code\u003e object."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    public ListCommand() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * Prints all the tasks in task list."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @param tasks The task list that stores all the tasks."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @param ui The ui in charge of user interaction."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @param storage The storage that saves tasks into a file and loads tasks from the file."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        ui.printTaskList(tasks.getTasks());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HengFuYuen": 36
    }
  },
  {
    "path": "src/main/java/duke/command/TodoCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "import duke.task.Todo;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": " * Represents a user instruction to add a todo task."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": " * A \u003ccode\u003eTodoCommand\u003c/code\u003e will signify to \u003ccode\u003eDuke\u003c/code\u003e to add a todo task to the task list."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": " *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": " * @author Heng Fu Yuen"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": " * @version 2.0"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "public class TodoCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    /* A string that signifies the input is a todo command */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"todo\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    public static final int COMMAND_WORD_LENGTH \u003d COMMAND_WORD.length();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    /* The todo to be added to the task list */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    private final Todo newTodo;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * Constructs a \u003ccode\u003eTodoCommand\u003c/code\u003e object given the todo to be added."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    public TodoCommand(Todo newTodo) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        this.newTodo \u003d newTodo;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * Adds a todo to the task list and storage file and informs the user that the todo has been added."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @param tasks The task list that stores all the tasks."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @param ui The ui in charge of user interaction."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @param storage The storage that saves tasks into a file and loads tasks from the file."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        tasks.add(newTodo);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        ui.printNewTask(newTodo, tasks.getNumberOfTasks());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "            storage.saveTask(newTodo);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "            ui.printIOExceptionErrorMessage(\"Duke is unable to save the task to the hard disk...\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HengFuYuen": 51
    }
  },
  {
    "path": "src/main/java/duke/exception/DeadlineDescriptionNotFoundException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": " * Signals that deadline description is not given."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": " *"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": " * @author Heng Fu Yuen"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": " * @version 2.0"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "public class DeadlineDescriptionNotFoundException extends InvalidCommandException {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HengFuYuen": 10
    }
  },
  {
    "path": "src/main/java/duke/exception/DeadlineTimeNotFoundException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": " * Signals that deadline given has no time it is due by."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": " *"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": " * @author Heng Fu Yuen"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": " * @version 2.0"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "public class DeadlineTimeNotFoundException extends InvalidCommandException {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HengFuYuen": 10
    }
  },
  {
    "path": "src/main/java/duke/exception/DeleteNumberFormatException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": " * Signals that task index of the task to delete does not have an appropriate format and cannot be"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": " * converted to an integer."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": " *"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": " * @author Heng Fu Yuen"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": " * @version 2.0"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "public class DeleteNumberFormatException extends NumberFormatException {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HengFuYuen": 11
    }
  },
  {
    "path": "src/main/java/duke/exception/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": " * Signals that a Duke exception of some sort has occurred."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": " * This class is the super class of most exceptions produced by Duke."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": " *"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": " * @author Heng Fu Yuen"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": " * @version 2.0"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HengFuYuen": 11
    }
  },
  {
    "path": "src/main/java/duke/exception/EmptyTaskListException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": " * Signals that task list is empty."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": " *"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": " * @author Heng Fu Yuen"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": " * @version 2.0"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "public class EmptyTaskListException extends DukeException{"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HengFuYuen": 10
    }
  },
  {
    "path": "src/main/java/duke/exception/EventDescriptionNotFoundException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": " * Signals that event description is not given."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": " *"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": " * @author Heng Fu Yuen"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": " * @version 2.0"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "public class EventDescriptionNotFoundException extends InvalidCommandException {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HengFuYuen": 10
    }
  },
  {
    "path": "src/main/java/duke/exception/EventTimeNotFoundException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": " * Signals that event given has no attached timing."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": " *"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": " * @author Heng Fu Yuen"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": " * @version 2.0"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "public class EventTimeNotFoundException extends InvalidCommandException {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HengFuYuen": 10
    }
  },
  {
    "path": "src/main/java/duke/exception/InvalidCommandException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": " * Signals that user input is invalid and Duke is unable to understand it."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": " *"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": " * @author Heng Fu Yuen"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": " * @version 2.0"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "public class InvalidCommandException extends DukeException {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HengFuYuen": 10
    }
  },
  {
    "path": "src/main/java/duke/exception/InvalidTaskIndexException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": " * Signals that task index given is invalid and cannot be traced to a task in the task list."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": " *"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": " * @author Heng Fu Yuen"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": " * @version 2.0"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "public class InvalidTaskIndexException extends InvalidCommandException {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HengFuYuen": 10
    }
  },
  {
    "path": "src/main/java/duke/exception/InvalidTaskTypeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": " * Signals that task type given is invalid and the task cannot be classified as a todo, deadline or event."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": " *"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": " * @author Heng Fu Yuen"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": " * @version 2.0"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "public class InvalidTaskTypeException extends InvalidCommandException {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HengFuYuen": 10
    }
  },
  {
    "path": "src/main/java/duke/exception/KeywordNotFoundException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": " * Signals that the keyword to find in the task list is not given."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": " *"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": " * @author Heng Fu Yuen"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": " * @version 2.0"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "public class KeywordNotFoundException extends InvalidCommandException {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HengFuYuen": 10
    }
  },
  {
    "path": "src/main/java/duke/exception/MarkAsDoneNumberFormatException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": " * Signals that task index of the task to mark as done does not have an appropriate format and cannot be"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": " * converted to an integer."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": " *"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": " * @author Heng Fu Yuen"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": " * @version 2.0"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "public class MarkAsDoneNumberFormatException extends NumberFormatException {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HengFuYuen": 11
    }
  },
  {
    "path": "src/main/java/duke/exception/TaskIndexNotFoundException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": " * Signals that task index is not given."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": " *"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": " * @author Heng Fu Yuen"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": " * @version 2.0"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "public class TaskIndexNotFoundException extends InvalidCommandException {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HengFuYuen": 10
    }
  },
  {
    "path": "src/main/java/duke/exception/TaskIndexToDeleteNotFoundException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": " * Signals that task index of task to delete is not given."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": " *"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": " * @author Heng Fu Yuen"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": " * @version 2.0"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "public class TaskIndexToDeleteNotFoundException extends TaskIndexNotFoundException {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HengFuYuen": 10
    }
  },
  {
    "path": "src/main/java/duke/exception/TaskIndexToMarkAsDoneNotFoundException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": " * Signals that task index of the task to mark as done is not given."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": " *"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": " * @author Heng Fu Yuen"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": " * @version 2.0"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "public class TaskIndexToMarkAsDoneNotFoundException extends TaskIndexNotFoundException {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HengFuYuen": 10
    }
  },
  {
    "path": "src/main/java/duke/exception/TodoDescriptionNotFoundException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": " * Signals that the todo description is not given."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": " *"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": " * @author Heng Fu Yuen"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": " * @version 2.0"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "public class TodoDescriptionNotFoundException extends InvalidCommandException {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HengFuYuen": 10
    }
  },
  {
    "path": "src/main/java/duke/task/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": " * Represents a task that needs to be done before a specific time/date."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": " * A \u003ccode\u003eDeadline\u003c/code\u003e object is a task that has a description and timing at which it is due."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": " *"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": " * @author Heng Fu Yuen"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": " * @version 2.0"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    /* The time a deadline task is due by */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    private final String by;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    private final String allInformation;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * Constructs a \u003ccode\u003eDeadline\u003c/code\u003e object with the given description and timing at which it is due"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * while initializing its done status to \u003ccode\u003efalse\u003c/code\u003e."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @param description A description of the deadline."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @param by The time the deadline is due by."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    public Deadline(String description, String by) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        this.by \u003d by;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        allInformation \u003d description + \"\" + by;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * Constructs a \u003ccode\u003eDeadline\u003c/code\u003e object with the given description, timing at which it is due and"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * a boolean indicating if the deadline is done."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @param description A description of the deadline."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @param by The time the deadline is due by."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @param isDone If \u003ccode\u003etrue\u003c/code\u003e, then the deadline is marked as done."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    public Deadline(String description, String by, boolean isDone) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        super(description, isDone);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        this.by \u003d by;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        allInformation \u003d description + \"\" + by;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    public String getAllInformation() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        return allInformation;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * Returns a string representation of the deadline information to be saved in a file."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @return A string representation of the deadline information to be saved in a file."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    public String messageToStoreInDukeFile() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        return \"D : \" + super.messageToStoreInDukeFile() + \" : \" + by;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * Returns a string representation of all the information related to the deadline."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @return A string representation of all the information related to the deadline."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        return \"[D]\" + super.toString() + \" (by: \" + by + \")\";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HengFuYuen": 66
    }
  },
  {
    "path": "src/main/java/duke/task/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": " * Represents a task that starts at a specific time and ends at a specific time."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": " * An \u003ccode\u003eEvent\u003c/code\u003e object is a task that has a description and a start and end timing."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": " *"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": " * @author Heng Fu Yuen"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": " * @version 2.0"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    /* The timing at which an event starts and ends */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    private final String at;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    private final String allInformation;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * Constructs an \u003ccode\u003eEvent\u003c/code\u003e object with the given description and time while initializing"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * its done status to \u003ccode\u003efalse\u003c/code\u003e."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @param description A description of the event."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @param at The start and end time of the event."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    public Event(String description, String at) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        this.at \u003d at;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        allInformation \u003d description + \"\" + at;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * Constructs an \u003ccode\u003eEvent\u003c/code\u003e object with the given description,time and a boolean indicating"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * if the event is done."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @param description A description of the event."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @param at The start and end time of the event."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @param isDone If \u003ccode\u003etrue\u003c/code\u003e, then the event is marked as done."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    public Event(String description, String at ,boolean isDone) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        super(description, isDone);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        this.at \u003d at;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        allInformation \u003d description + \"\" + at;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    public String getAllInformation() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        return allInformation;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * Returns a string representation of the event information to be saved in a file."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @return A string representation of the event information to be saved in a file."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    public String messageToStoreInDukeFile() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        return \"E : \" + super.messageToStoreInDukeFile() + \" : \" + at;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * Returns a string representation of all the information related to the event."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @return A string representation of all the information related to the event."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        return \"[E]\" + super.toString() + \" (at: \" + at + \")\";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HengFuYuen": 66
    }
  },
  {
    "path": "src/main/java/duke/task/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": " * Represents a task that the user wants to track."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": " * A \u003ccode\u003eTask\u003c/code\u003e object that only has a description but cannot be instantiated as it is abstract."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": " *"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": " * @author Heng Fu Yuen"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": " * @version 2.0"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "public abstract class Task {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    /* Indicates whether the task is done */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    protected final String description;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    public static final String TASK_DONE_ICON \u003d \"Y\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    public static final String TASK_NOT_DONE_ICON \u003d \"N\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * Constructs a \u003ccode\u003eTask\u003c/code\u003e object with the given description while initializing its done status"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * to \u003ccode\u003efalse\u003c/code\u003e."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @param description A description of the task."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    protected Task(String description) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        isDone \u003d false;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * Constructs a \u003ccode\u003eTask\u003c/code\u003e object with the given description and a boolean indicating if the"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * task is done."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @param description A description of the task."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @param isDone If \u003ccode\u003etrue\u003c/code\u003e, then the task is marked as done."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    protected Task(String description, boolean isDone) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        this.isDone \u003d isDone;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    public String getAllInformation() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * Marks a task as done."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    public void markAsDone() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        isDone \u003d true;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * Returns the string icon indicating whether the task is done."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @return The string icon indicating whether the task is done."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        return (isDone ? TASK_DONE_ICON : TASK_NOT_DONE_ICON);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * Returns a string representation of the task information to be saved in a file."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @return A string representation of the task information to be saved in a file."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    public String messageToStoreInDukeFile() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        return getStatusIcon() + \" : \" + description;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * Returns a string representation of all the information related to the task."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @return A string representation of all the information related to the task."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        return \"[\" + getStatusIcon() + \"] \" + description;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HengFuYuen": 80
    }
  },
  {
    "path": "src/main/java/duke/task/Todo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": " * Represents a task without any date/time attached to it."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": " * A \u003ccode\u003eTodo\u003c/code\u003e object is a task that only has a description."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": " *"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": " * @author Heng Fu Yuen"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": " * @version 2.0"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "public class Todo extends Task {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * Constructs a \u003ccode\u003eTodo\u003c/code\u003e object with the given description while initializing its done status"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * to \u003ccode\u003efalse\u003c/code\u003e."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @param description A description of the todo."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    public Todo(String description) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * Constructs a \u003ccode\u003eTodo\u003c/code\u003e object with the given description and a boolean indicating if the"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * todo is done."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @param description A description of the todo."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @param isDone If \u003ccode\u003etrue\u003c/code\u003e, then the todo is marked as done."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    public Todo(String description, boolean isDone) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        super(description, isDone);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * Returns a string representation of the todo information to be saved in a file."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @return A string representation of the todo information to be saved in a file."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    public String messageToStoreInDukeFile() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        return \"T : \" + super.messageToStoreInDukeFile();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * Returns a string representation of all the information related to the todo."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @return A string representation of all the information related to the todo."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        return \"[T]\" + super.toString();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HengFuYuen": 51
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "find bread"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "delete 1"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "done 1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "done"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "delete"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "read book"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "todo read book"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "deadline return book /by June 6th"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "event project meeting /at Aug 6th 2-4pm"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "done 1"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "list"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "done 8"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "clear"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "list"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "todo"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "deadline"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "deadline return card"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "event"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "event class"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "todobuybread"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "todo     clean     room"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "deadlinecs2113homework/byWednesday2359"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "deadline     lab report     /by     Tuesday 12pm"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "eventcareertalk/atMonday2pm-3pm"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "event     interview     /at     Sunday     3-4pm"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "done -1"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "done 5      6"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "done2"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "done nothing"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "deadline report 02/11/2020"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "deadline report by/ 02/11/2020 by/ 02/11/2020"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "event class Friday 4-6pm"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "event class /at Friday 4-6pm /at Friday 4-6pm"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "bye bye"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "delete 3"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "delete2"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "delete"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "delete -10"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "delete 6    7"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "delete 12"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "list"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "find re"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "find"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "findMonday"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "find hello world"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "HengFuYuen": 46
    }
  },
  {
    "path": "text-ui-test/runtest.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@ECHO OFF"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "REM create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "if not exist ..\\bin mkdir ..\\bin"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "REM delete output from previous run"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "del ACTUAL.TXT"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "REM compile the code into the bin folder"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "javac  -cp ..\\src -Xlint:none -d ..\\bin ..\\src\\main\\java\\duke\\*.java ..\\src\\main\\java\\duke\\exception\\*.java ..\\src\\main\\java\\duke\\task\\*.java ..\\src\\main\\java\\duke\\command\\*.java"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "IF ERRORLEVEL 1 ("
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    echo ********** BUILD FAILURE **********"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    exit /b 1"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ")"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "REM no error here, errorlevel \u003d\u003d 0"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "java -Dfile.encoding\u003dUTF-8 -classpath ../bin duke.Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "REM compare the output to the expected output"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "FC ACTUAL.TXT EXPECTED.TXT"
      }
    ],
    "authorContributionMap": {
      "HengFuYuen": 2,
      "-": 19
    }
  }
]
