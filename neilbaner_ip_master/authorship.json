[
  {
    "path": "docs/README.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "# Duke User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "Welcome to Duke! Duke is an intelligent personal assistant that can help you get organised, manage your tasks, and"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "neilbaner"
        },
        "content": " keep track of your busy life. "
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "neilbaner"
        },
        "content": " "
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "Duke is a command-line application, designed for fast navigation and usage with fast, easy commands and an intuitive"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "neilbaner"
        },
        "content": " syntax. "
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "## Features "
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "### The Three types of Tasks"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "Duke supports three different types of Tasks: ToDos, Deadlines, and Events. "
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "#### ToDo"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "A ToDo is a simple type of task, that you plan to do, but don\u0027t really have a strict due date for. It just has a name."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "#### Deadline"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "A Deadline is a task which needs to get done by a certain date. For example, most homework has due dates and as such"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "neilbaner"
        },
        "content": " would be ideal for storing as a Deadline. It has a name, and an associated due date/time. "
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "neilbaner"
        },
        "content": " "
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "#### Event"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "An Event is a task which will be done at a certain date and time. For example, you may have a meeting with some"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "neilbaner"
        },
        "content": " colleagues at a certain time, and this should be stored as an Event. Like a Deadline, it has a name and an"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "  associated date and time. "
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "  "
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "### Personal, unique messages"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "Duke randomly generates messages to address you differently every time you use it!"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "### Organising tasks"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "See a list of all your tasks!"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "Find tasks easily by their name or their date!"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "Mark tasks as done or delete them! "
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "## Usage"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "### Adding new tasks"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "#### `todo` - Adding a new todo task"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "Add a new todo task, with a specified title. "
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "Syntax: `todo \u003ctaskname\u003e`"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "```"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "todo learn to solve a rubik\u0027s cube"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "```"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "```"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "____________________________________________________________"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "Understood, chief. I\u0027ve added the following to-do to your list: learn to solve a rubik\u0027s cube"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "____________________________________________________________"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "```"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "NB the message may be different as it is randomly generated :D"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "#### `event` - Adding a new event task"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "Add a new event, with a specified title and a date. If the date provided is in ISO8601 format, it will be added to"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "neilbaner"
        },
        "content": " the task list as a date, otherwise it will be added as a string of text. If it is added as a date, you will be able"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "  to find the task when searching for tasks before or at a certain date. "
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "  "
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "  Syntax: `event \u003ceventtitle\u003e /at \u003cdate\u003e`"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "```"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "event meet Prof /at 2020-10-10"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "```"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "```"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "____________________________________________________________"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "Of course, kahuna. I\u0027ve added this event to your list: meet Prof"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "____________________________________________________________"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "```"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "NB the message may be different as it is randomly generated :D"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "#### `deadline` - Adding a new deadline"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "Add a new deadline, with a specified title and a due date. If the date provided is in ISO8601 format, it will be"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "neilbaner"
        },
        "content": " added to"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "neilbaner"
        },
        "content": " the task list as a date, otherwise it will be added as a string of text. If it is added as a date, you will be able"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "  to find the task when searching for tasks before or at a certain date. "
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "```"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "deadline submit iP /by 2020-10-02"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "```"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "```"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "____________________________________________________________"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "Understood, kahuna. Added a new deadline to your list, titled : submit iP"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "____________________________________________________________"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "```"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "NB the message may be different as it is randomly generated :D"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "### Finding existing tasks"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "#### `list` - List all the tasks added"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "```"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "list"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "```"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "```"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "____________________________________________________________"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "[T][ ] learn to solve a rubik\u0027s cube"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "[E][ ] meet Prof, at 10/10/2020"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "[D][ ] submit iP, at 02/10/2020"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "neilbaner"
        },
        "content": " ____________________________________________________________"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "```"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "#### `find` - Find all tasks matching a search key"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "Find all the tasks that contain a certain string of characters, the search key, in the task title. "
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "Syntax: `find \u003csearchkey\u003e` "
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "```"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "find rubik"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "```"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "```"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "____________________________________________________________"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "[T][ ] learn to solve a rubik\u0027s cube"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "____________________________________________________________"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "```"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "NB this will be different depending on the tasks you have added!"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "#### `before` - Find all tasks before a certain date"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "Find all the tasks before a certain date, specified in ISO8601 YYYY-MM-DD format. The tasks must have been added with"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "neilbaner"
        },
        "content": " a properly formatted date before. "
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "Syntax: `before YYYY-MM-DD`"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "```"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "before 2020-10-05"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "```"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "```"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "____________________________________________________________"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "[D][ ] submit iP, at 02/10/2020"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "____________________________________________________________"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "```"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "NB this will be different depending on the tasks you have added!"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "#### `at` - Find all tasks at a certain date"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "Find all the tasks before a certain date, specified in ISO8601 YYYY-MM-DD format. The tasks must have been added with"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "neilbaner"
        },
        "content": " a properly formatted date before. "
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "```"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "at 2020-10-10"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "```"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "```"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "____________________________________________________________"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "[E][ ] meet Prof, at 10/10/2020"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "____________________________________________________________"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "```"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "### Managing existing tasks"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "#### `done` - Mark a task as done"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "Mark the task at the specified position on the list as done. "
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "Syntax: `done \u003cnumber\u003e`"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "```"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "done 2"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "```"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "```"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "____________________________________________________________"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "Gotcha, kahuna. meet Prof marked as done."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "____________________________________________________________"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "```"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "#### `delete` - Describe action"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "Delete at the specified position on the list. "
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "Syntax: `delete \u003cnumber\u003e`"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "```"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "delete 1"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "```"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "```"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "____________________________________________________________"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "Of course, kahuna. [T][ ] learn to solve a rubik\u0027s cube deleted. "
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "____________________________________________________________"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "```"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "### Others"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "#### `help` - Get help about Duke and learn the different commands"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "```"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "help"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "```"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "```"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "help"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "Here are all the commands I know. "
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "Adding a new to-do task: "
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "todo \u003ctodoname\u003e"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "Adding a new event: "
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "event \u003ceventname\u003e /at \u003ceventtime\u003e"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "Adding a new deadline: "
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "deadline \u003cdeadlinename\u003e /by \u003cdeadlineduedate\u003e"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "Viewing all the tasks: "
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "list"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "Deleting a task: "
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "delete \u003ctasknumber\u003e"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "\u003ctasknumber\u003e represents the number associated with the task, as seen on screen. "
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "Marking a task as done: "
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "done \u003ctasknumber\u003e"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "\u003ctasknumber\u003e represents the number associated with the task, as seen on screen. "
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "Getting all tasks before a date: "
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "before YYYY-MM-DD"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "YYYY-MM-DD is the date before which you want to find tasks."
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "Getting all tasks at a date: "
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "at YYYY-MM-DD"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "YYYY-MM-DD is the date at which you want to find tasks."
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "Searching for tasks: "
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "find \u003ckey\u003e"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "\u003ckey\u003e represents whatever you want to search for. "
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "Accessing help: "
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "help"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "Quitting: "
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "bye"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "Read the full user guide at https://neilbaner.github.io/ip/"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "```"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "#### `bye` - Quit Duke and save your tasks"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "```"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "bye"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "```"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "```"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "____________________________________________________________"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "Bye. Hope to see you again soon!"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "Shutting down..."
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "____________________________________________________________"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "```"
      }
    ],
    "authorContributionMap": {
      "neilbaner": 286,
      "-": 15
    }
  },
  {
    "path": "src/main/java/com/neilbaner/duke/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "package com.neilbaner.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "import com.neilbaner.duke.exceptions.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "import com.neilbaner.duke.files.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "import com.neilbaner.duke.task.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "import com.neilbaner.duke.ui.UserInterface;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "import static com.neilbaner.duke.ui.Commands.EXIT_COMMAND;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "class Duke {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    private static final String SAVE_FILE_PATH \u003d \"dukesave.txt\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    private static final TaskList list \u003d new TaskList();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        String input \u003d \"\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        Storage storage \u003d new Storage(SAVE_FILE_PATH);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        UserInterface ui \u003d new UserInterface(list);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        Scanner k \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "            storage.loadState(list);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "            e.printErrorMessage(\"\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        ui.startUI();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        while (!input.equals(EXIT_COMMAND)) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "            input \u003d k.nextLine();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "                ui.executeCommand(input);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "            } catch (DukeException e) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "                e.printErrorMessage(input);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "            }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "            storage.saveState(list);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "            e.printErrorMessage(\"\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "neilbaner": 40,
      "-": 2
    }
  },
  {
    "path": "src/main/java/com/neilbaner/duke/exceptions/BadDateFormatException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "package com.neilbaner.duke.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "import com.neilbaner.duke.messages.ErrorMessages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "neilbaner"
        },
        "content": " * @author Neil Banerjee"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "neilbaner"
        },
        "content": " * @version 1.0"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "neilbaner"
        },
        "content": " * This exception is thrown when the user enters a date that cannot be parsed by the LocalDate.parse() function."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "neilbaner"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "public class BadDateFormatException extends DukeException {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    public BadDateFormatException() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    public void printErrorMessage(String command) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        ErrorMessages.printBadDateFormat();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "neilbaner": 19
    }
  },
  {
    "path": "src/main/java/com/neilbaner/duke/exceptions/BlankBeforeAtDateException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "package com.neilbaner.duke.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "import com.neilbaner.duke.messages.ErrorMessages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "neilbaner"
        },
        "content": " * @author Neil Banerjee"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "neilbaner"
        },
        "content": " * @version 1.0"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "neilbaner"
        },
        "content": " * This exception is thrown when the user doesn\u0027t enter a date after using the \u003ccode\u003ebefore\u003c/code\u003e or \u003ccode\u003eat\u003c/code\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "neilbaner"
        },
        "content": " * commands."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "neilbaner"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "public class BlankBeforeAtDateException extends DukeException {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    public BlankBeforeAtDateException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    public void printErrorMessage(String command) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        ErrorMessages.printBlankBeforeAt();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "neilbaner": 20
    }
  },
  {
    "path": "src/main/java/com/neilbaner/duke/exceptions/BlankDeadlineDateException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "package com.neilbaner.duke.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "import com.neilbaner.duke.messages.ErrorMessages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "neilbaner"
        },
        "content": " * @author Neil Banerjee"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "neilbaner"
        },
        "content": " * @version 1.0"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "neilbaner"
        },
        "content": " * This exception is thrown when the user doesn\u0027t enter a date after \u003ccode\u003e/by\u003c/code\u003e in the \u003ccode\u003edeadline\u003c/code\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "neilbaner"
        },
        "content": " * command."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "neilbaner"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "public class BlankDeadlineDateException extends DukeException {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    public BlankDeadlineDateException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    public void printErrorMessage(String command) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        ErrorMessages.printBlankDeadlineDate();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "neilbaner": 20
    }
  },
  {
    "path": "src/main/java/com/neilbaner/duke/exceptions/BlankEventTimeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "package com.neilbaner.duke.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "import com.neilbaner.duke.messages.ErrorMessages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "neilbaner"
        },
        "content": " * @author Neil Banerjee"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "neilbaner"
        },
        "content": " * @version 1.0"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "neilbaner"
        },
        "content": " * This exception is thrown when the user doesn\u0027t enter a date after \u003ccode\u003e/at\u003c/code\u003e in the \u003ccode\u003eevent\u003c/code\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "neilbaner"
        },
        "content": " * command."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "neilbaner"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "public class BlankEventTimeException extends DukeException {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    public BlankEventTimeException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    public void printErrorMessage(String command) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        ErrorMessages.printBlankEventTime();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "neilbaner": 20
    }
  },
  {
    "path": "src/main/java/com/neilbaner/duke/exceptions/BlankIndexToDeleteException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "package com.neilbaner.duke.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "import com.neilbaner.duke.messages.ErrorMessages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "neilbaner"
        },
        "content": " * @author Neil Banerjee"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "neilbaner"
        },
        "content": " * @version 1.0"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "neilbaner"
        },
        "content": " * This exception is thrown when the user does not specify an index to delete after the \u003ccode\u003edelete\u003c/code\u003e command."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "neilbaner"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "public class BlankIndexToDeleteException extends DukeException {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    public BlankIndexToDeleteException() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    public void printErrorMessage(String command) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        ErrorMessages.printBlankIndexToDelete();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "neilbaner": 19
    }
  },
  {
    "path": "src/main/java/com/neilbaner/duke/exceptions/BlankIndexToMarkException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "package com.neilbaner.duke.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "import com.neilbaner.duke.messages.ErrorMessages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "neilbaner"
        },
        "content": " * @author Neil Banerjee"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "neilbaner"
        },
        "content": " * @version 1.0"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "neilbaner"
        },
        "content": " * This exception is thrown when the user does not enter an index to delete after the \u003ccode\u003edone\u003c/code\u003e command."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "neilbaner"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "public class BlankIndexToMarkException extends DukeException {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    public BlankIndexToMarkException() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    public void printErrorMessage(String command) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        ErrorMessages.printBlankIndexToMark();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "neilbaner": 19
    }
  },
  {
    "path": "src/main/java/com/neilbaner/duke/exceptions/BlankSearchKeyException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "package com.neilbaner.duke.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "import com.neilbaner.duke.messages.ErrorMessages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "neilbaner"
        },
        "content": " * @author Neil Banerjee"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "neilbaner"
        },
        "content": " * @version 1.0"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "neilbaner"
        },
        "content": " * This exception is thrown when the user does not enter a search key/term after using the \u003ccode\u003efind\u003c/code\u003e command."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "neilbaner"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "public class BlankSearchKeyException extends DukeException {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    public BlankSearchKeyException() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    public void printErrorMessage(String command) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        ErrorMessages.printBlankSearchKey();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "neilbaner": 19
    }
  },
  {
    "path": "src/main/java/com/neilbaner/duke/exceptions/BlankTaskTitleException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "package com.neilbaner.duke.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "import com.neilbaner.duke.messages.ErrorMessages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "neilbaner"
        },
        "content": " * @author Neil Banerjee"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "neilbaner"
        },
        "content": " * @version 1.0"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "neilbaner"
        },
        "content": " * This exception is thrown when the user does not enter a title for their task."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "neilbaner"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "public class BlankTaskTitleException extends DukeException {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    public BlankTaskTitleException() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    public void printErrorMessage(String command) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        ErrorMessages.printBlankTaskTitle();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "neilbaner": 19
    }
  },
  {
    "path": "src/main/java/com/neilbaner/duke/exceptions/DeserializerException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "package com.neilbaner.duke.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "import com.neilbaner.duke.messages.ErrorMessages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "neilbaner"
        },
        "content": " * @author Neil Banerjee"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "neilbaner"
        },
        "content": " * @version 1.0"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "neilbaner"
        },
        "content": " * This exception is thrown when there is an error deserializing the save file. It should not ever occur unless the"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "neilbaner"
        },
        "content": " * save file has been corrupted or tampered with."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "neilbaner"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "public class DeserializerException extends DukeException {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    public DeserializerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    public void printErrorMessage(String command) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        ErrorMessages.printDeserializerError();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "neilbaner": 20
    }
  },
  {
    "path": "src/main/java/com/neilbaner/duke/exceptions/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "package com.neilbaner.duke.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "neilbaner"
        },
        "content": " * @author Neil Banerjee"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "neilbaner"
        },
        "content": " * @version 1.0"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "neilbaner"
        },
        "content": " * Superclass for all the types of exceptions Duke can throw."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "neilbaner"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "public abstract class DukeException extends Exception {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    DukeException() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "     * Prints the relevant error message for each exception."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "     * @param command : the command that was entered by the user to cause the exception. May be used to provide"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "     *                feedback to the user about what went wrong."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    public abstract void printErrorMessage(String command);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "neilbaner": 19
    }
  },
  {
    "path": "src/main/java/com/neilbaner/duke/exceptions/FileSavingException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "package com.neilbaner.duke.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "import com.neilbaner.duke.messages.ErrorMessages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "neilbaner"
        },
        "content": " * @author Neil Banerjee"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "neilbaner"
        },
        "content": " * @version 1.0"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "neilbaner"
        },
        "content": " * This exception is thrown when there is an error saving the save file for Duke. It should not usually be thrown in"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "neilbaner"
        },
        "content": " * normal operation."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "neilbaner"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "public class FileSavingException extends DukeException {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    public FileSavingException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    public void printErrorMessage(String command) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        ErrorMessages.printSaveError();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "neilbaner": 20
    }
  },
  {
    "path": "src/main/java/com/neilbaner/duke/exceptions/IncorrectFormattingException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "package com.neilbaner.duke.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "import com.neilbaner.duke.messages.ErrorMessages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "neilbaner"
        },
        "content": " * @author Neil Banerjee"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "neilbaner"
        },
        "content": " * @version 1.0"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "neilbaner"
        },
        "content": " * This exception is thrown when the command entered by the user is not formatted correctly."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "neilbaner"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "public class IncorrectFormattingException extends DukeException {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    public IncorrectFormattingException() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    public void printErrorMessage(String command) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        ErrorMessages.printFormattingError();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "neilbaner": 19
    }
  },
  {
    "path": "src/main/java/com/neilbaner/duke/exceptions/NoSaveFileException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "package com.neilbaner.duke.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "import com.neilbaner.duke.messages.ErrorMessages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "neilbaner"
        },
        "content": " * @author Neil Banerjee"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "neilbaner"
        },
        "content": " * @version 1.0"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "neilbaner"
        },
        "content": " * This exception is thrown when Duke is unable to find a save file to load. The program should recover from this"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "neilbaner"
        },
        "content": " * error and continue without loading the tasks."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "neilbaner"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "public class NoSaveFileException extends DukeException {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    public NoSaveFileException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    public void printErrorMessage(String command) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        ErrorMessages.printReadError();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "neilbaner": 20
    }
  },
  {
    "path": "src/main/java/com/neilbaner/duke/exceptions/TaskIndexOutOfBoundsException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "package com.neilbaner.duke.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "import com.neilbaner.duke.messages.ErrorMessages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "neilbaner"
        },
        "content": " * @author Neil Banerjee"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "neilbaner"
        },
        "content": " * @version 1.0"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "neilbaner"
        },
        "content": " * This exception is thrown when the user attempts to delete, or mark done, a task index that does not exist (eg. a"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "neilbaner"
        },
        "content": " * negative number or greater than the length of the task list)."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "neilbaner"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "public class TaskIndexOutOfBoundsException extends DukeException {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    public TaskIndexOutOfBoundsException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    public void printErrorMessage(String command) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        ErrorMessages.printTaskIndexOutOfBounds();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "neilbaner": 20
    }
  },
  {
    "path": "src/main/java/com/neilbaner/duke/exceptions/UnknownCommandException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "package com.neilbaner.duke.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "import com.neilbaner.duke.messages.ErrorMessages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "neilbaner"
        },
        "content": " * @author Neil Banerjee"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "neilbaner"
        },
        "content": " * @version 1.0"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "neilbaner"
        },
        "content": " * This exception is thrown when the user enters a command that Duke doesn\u0027t know how to perform (yet!). "
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "neilbaner"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "public class UnknownCommandException extends DukeException {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    public UnknownCommandException() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    public void printErrorMessage(String command) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        ErrorMessages.printUnknownCommand(command);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "neilbaner": 19
    }
  },
  {
    "path": "src/main/java/com/neilbaner/duke/files/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "package com.neilbaner.duke.files;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "import com.neilbaner.duke.exceptions.DeserializerException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "import com.neilbaner.duke.exceptions.FileSavingException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "import com.neilbaner.duke.exceptions.NoSaveFileException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "import com.neilbaner.duke.serialize.Serializer;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "import com.neilbaner.duke.task.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "import com.neilbaner.duke.task.TaskList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "neilbaner"
        },
        "content": " * @author Neil Banerjee"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "neilbaner"
        },
        "content": " * @version 1.0"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "neilbaner"
        },
        "content": " * This class is used for file storage operations to save and load Duke\u0027s state to and from a text file stored on the"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "neilbaner"
        },
        "content": " * disk."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "neilbaner"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    private final String filePath;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "     * Load the state of Duke that was previously saved onto a file on the disk."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "     * @param list the \u003ccode\u003eTaskList\u003c/code\u003e to which to copy the tasks read from the file."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "     * @throws NoSaveFileException if the save file could not be found on the disk."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "     * @throws DeserializerException if there is some error deserializing the text file, should only occur if the"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "     * save is corrupted or tampered with in some way."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    public void loadState(TaskList list) throws NoSaveFileException, DeserializerException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        File saveFile \u003d new File(filePath);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "            Scanner fs \u003d new Scanner(saveFile);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "            while (fs.hasNext()) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "                String currentLine \u003d fs.nextLine();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "                Task currentTask \u003d Serializer.deserializeTask(currentLine);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "                list.addTask(currentTask);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "            }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "            fs.close();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "            throw new NoSaveFileException();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "     * Save the state of Duke to a file on the disk."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "     * @param list the \u003ccode\u003eTaskList\u003c/code\u003e from which to read the tasks to write to the file on the disk."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "     * @throws FileSavingException if there is some error writing the file to the disk."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    public void saveState(TaskList list) throws FileSavingException{"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "            FileWriter fw \u003d new FileWriter(filePath, false);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "            fw.write(Serializer.serializeTaskList(list));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "            fw.close();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "            System.out.println(Serializer.serializeTaskList(list));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "            throw new FileSavingException();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    public Storage(String filePath) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "neilbaner": 66
    }
  },
  {
    "path": "src/main/java/com/neilbaner/duke/messages/ErrorMessages.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "package com.neilbaner.duke.messages;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "neilbaner"
        },
        "content": " * @author Neil Banerjee"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "neilbaner"
        },
        "content": " * @version 1.0"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "neilbaner"
        },
        "content": " * Extends the Messages class, includes methods for printing various error messages. Should be called by"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "neilbaner"
        },
        "content": " * DukeExceptions only."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "neilbaner"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "public class ErrorMessages extends Messages {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    public static void printBadDateFormat() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        System.err.println(\"The date must be formatted as ISO8601, that is, as YYYY-MM-DD. \");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        printHorizontalLine();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    public static void printBlankDeadlineDate() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        System.err.println(\"Every deadline needs to have a due date. The syntax for adding a deadline is as follows: \");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        printDeadlineSyntax();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        printHorizontalLine();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    public static void printBlankEventTime() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        System.err.println(\"Every event needs to have a time. The syntax for adding an event is as follows: \");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        printEventSyntax();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        printHorizontalLine();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    public static void printBlankIndexToDelete() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        System.err.println(\"You need to include the index number of the task to delete. \");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        printDeleteSyntax();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        printHorizontalLine();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    public static void printBlankIndexToMark() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        System.err.println(\"You need to include the index number of the task to mark as done. \");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        printDoneSyntax();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        printHorizontalLine();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    public static void printBlankSearchKey() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        System.err.println(\"You need to include something to search for. \");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        printFindSyntax();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        printHorizontalLine();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    public static void printBlankBeforeAt() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        System.err.println(\"You need to include a date to search. \");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        printBeforeSyntax();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        printAtSyntax();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        printHorizontalLine();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    public static void printBlankTaskTitle() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        System.err.println(\"Sorry, you need to add a title for the task. \");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        printHorizontalLine();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    public static void printFormattingError() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        System.err.println(\"Incorrectly formatted input\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        printHorizontalLine();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    public static void printNonExistError() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        System.err.println(\"Task does not exist in list\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        printHorizontalLine();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    public static void printUnknownCommand(String command) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        System.err.println(\"I\u0027m sorry, I\u0027m not sure what \" + command + \" means. \");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        printHelp();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        printHorizontalLine();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    public static void printTaskIndexOutOfBounds() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        System.err.println(\"Please make sure that the task number you enter to mark as done is on the list. \");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        System.out.println(\"For reference, here\u0027s how to mark a task as done: \");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        printDoneSyntax();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        printHorizontalLine();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    public static void printDeserializerError() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        System.err.println(\"Some error reading the save file. \");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        System.err.println(\"Continuing without loading a save file. \");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        printHorizontalLine();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    public static void printSaveError() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        System.err.println(\"Some error saving the file. \");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        System.err.println(\"The content that would be saved to the file is above. \");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        System.err.println(\"You may copy it and paste it elsewhere as a backup. \");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        printHorizontalLine();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    public static void printReadError() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        System.err.println(\"The save file could not be found, continuing without loading. \");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        System.err.println(\"A new one will be created when you quit. \");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        printHorizontalLine();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "neilbaner": 99
    }
  },
  {
    "path": "src/main/java/com/neilbaner/duke/messages/MessageGenerator.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "package com.neilbaner.duke.messages;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "import java.io.*;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "neilbaner"
        },
        "content": " * @author Neil Banerjee"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "neilbaner"
        },
        "content": " * @version 1.0"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "neilbaner"
        },
        "content": " * A collection of methods to randomly generate messages for the Duke UI."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "neilbaner"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "public class MessageGenerator {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "     * Generates a random confirmation message, comprised of one randomly chosen affirmative phrase followed by"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "     * another randomly chosen name to address the user as."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "     * @return the generated message."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    public static String generateConfirmationMessage() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        ClassLoader classLoader \u003d MessageGenerator.class.getClassLoader();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        // Create two InputStreams for the two parts of the message, from the resources in /src/main/resources"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        InputStream confirmationsInputStream \u003d classLoader.getResourceAsStream(\"txt/confirmationmessages\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        InputStream namesInputStream \u003d classLoader.getResourceAsStream(\"txt/names\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        String finalMessage \u003d \"\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "            BufferedReader confirmationsReader \u003d new BufferedReader(new InputStreamReader(confirmationsInputStream));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "            BufferedReader namesReader \u003d new BufferedReader(new InputStreamReader(namesInputStream));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "            int numberOfMessages \u003d Integer.parseInt(confirmationsReader.readLine());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "            int numberOfNames \u003d Integer.parseInt(namesReader.readLine());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "            int messageToDisplay \u003d (int) (Math.random() * (numberOfMessages - 1));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "            int nameToDisplay \u003d (int) (Math.random() * (numberOfNames - 1));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "            String chosenMessage \u003d confirmationsReader.readLine();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "            String chosenName \u003d namesReader.readLine();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "            // iterate a random number of times to get to a random line in the file."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "            for (int i \u003d 0; i \u003c messageToDisplay; i++) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "                chosenMessage \u003d confirmationsReader.readLine();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "            }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "            for (int i \u003d 0; i \u003c nameToDisplay; i++) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "                chosenName \u003d namesReader.readLine();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "            }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "            finalMessage \u003d chosenMessage + \", \" + chosenName + \". \";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "            finalMessage \u003d \"Done. \";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        } finally {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "            return finalMessage;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "neilbaner": 52
    }
  },
  {
    "path": "src/main/java/com/neilbaner/duke/messages/Messages.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "package com.neilbaner.duke.messages;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "neilbaner"
        },
        "content": " * @author Neil Banerjee"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "neilbaner"
        },
        "content": " * @version 1.0"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "neilbaner"
        },
        "content": " * A collection of various messages printed throughout the operation of Duke."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "neilbaner"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "public class Messages {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    public static void printHorizontalLine() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        System.out.println(\"____________________________________________________________\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    public static void printHelp() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        System.out.println(\"Here are all the commands I know. \");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        System.out.println(\"Adding a new to-do task: \");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        printTodoSyntax();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        System.out.println(\"Adding a new event: \");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        printEventSyntax();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        System.out.println(\"Adding a new deadline: \");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        printDeadlineSyntax();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        System.out.println(\"Viewing all the tasks: \");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        printListSyntax();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        System.out.println(\"Deleting a task: \");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        printDeleteSyntax();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        System.out.println(\"Marking a task as done: \");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        printDoneSyntax();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        System.out.println(\"Getting all tasks before a date: \");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        printBeforeSyntax();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        System.out.println(\"Getting all tasks at a date: \");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        printAtSyntax();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        System.out.println(\"Searching for tasks: \");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        printFindSyntax();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        System.out.println(\"Accessing help: \");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        printHelpSyntax();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        System.out.println(\"Quitting: \");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        printByeSyntax();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        System.out.println(\"Read the full user guide at https://neilbaner.github.io/ip/\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    private static void printTodoSyntax() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        System.out.println(\"todo \u003ctodoname\u003e\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    static void printEventSyntax() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        System.out.println(\"event \u003ceventname\u003e /at \u003ceventtime\u003e\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    static void printDeadlineSyntax() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        System.out.println(\"deadline \u003cdeadlinename\u003e /by \u003cdeadlineduedate\u003e\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    static void printDoneSyntax() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        System.out.println(\"done \u003ctasknumber\u003e\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        System.out.println(\"\u003ctasknumber\u003e represents the number associated with the task, as seen on screen. \");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    static void printDeleteSyntax() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        System.out.println(\"delete \u003ctasknumber\u003e\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        System.out.println(\"\u003ctasknumber\u003e represents the number associated with the task, as seen on screen. \");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    static void printFindSyntax() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        System.out.println(\"find \u003ckey\u003e\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        System.out.println(\"\u003ckey\u003e represents whatever you want to search for. \");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    static void printBeforeSyntax() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        System.out.println(\"before YYYY-MM-DD\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        System.out.println(\"YYYY-MM-DD is the date before which you want to find tasks.\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    static void printAtSyntax() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        System.out.println(\"at YYYY-MM-DD\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        System.out.println(\"YYYY-MM-DD is the date at which you want to find tasks.\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    private static void printHelpSyntax() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        System.out.println(\"help\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    private static void printListSyntax() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        System.out.println(\"list\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    private static void printByeSyntax() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        System.out.println(\"bye\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "neilbaner": 88
    }
  },
  {
    "path": "src/main/java/com/neilbaner/duke/messages/OperationMessages.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "package com.neilbaner.duke.messages;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "neilbaner"
        },
        "content": " * @author Neil Banerjee"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "neilbaner"
        },
        "content": " * @version 1.0"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "neilbaner"
        },
        "content": " * Extends the Messages class, includes methods for printing various operational messages. Should be printed during"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "neilbaner"
        },
        "content": " * normal, non-error operation of Duke."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "neilbaner"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "public class OperationMessages extends Messages {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    public static void printGoodBye() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        printHorizontalLine();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        System.out.println(\"Bye. Hope to see you again soon!\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        System.out.println(\"Shutting down...\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        printHorizontalLine();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    public static void printAddedToDo(String title) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        String confirmation \u003d MessageGenerator.generateConfirmationMessage();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        printHorizontalLine();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        System.out.print(confirmation);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        System.out.println(\"I\u0027ve added the following to-do to your list: \" + title);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        printHorizontalLine();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    public static void printAddedEvent(String title) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        String confirmation \u003d MessageGenerator.generateConfirmationMessage();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        printHorizontalLine();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        System.out.print(confirmation);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        System.out.println(\"I\u0027ve added this event to your list: \" + title);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        printHorizontalLine();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    public static void printAddedDeadline(String title) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        String confirmation \u003d MessageGenerator.generateConfirmationMessage();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        printHorizontalLine();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        System.out.print(confirmation);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        System.out.println(\"Added a new deadline to your list, titled : \" + title);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        printHorizontalLine();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    public static void printMarkedDone(String title) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        String confirmation \u003d MessageGenerator.generateConfirmationMessage();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        printHorizontalLine();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        System.out.print(confirmation);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        System.out.println(title + \" marked as done.\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        printHorizontalLine();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    public static void printDeleted(String title) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        String confirmation \u003d MessageGenerator.generateConfirmationMessage();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        printHorizontalLine();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        System.out.print(confirmation);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        System.out.println(title + \" deleted. \");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        printHorizontalLine();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    public static void printHello() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        printHorizontalLine();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        System.out.println(\"Hello! I\u0027m Duke. \");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        System.out.println(\"What can I do for you?\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        printHorizontalLine();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "neilbaner": 65
    }
  },
  {
    "path": "src/main/java/com/neilbaner/duke/serialize/Serializer.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "package com.neilbaner.duke.serialize;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "import com.neilbaner.duke.exceptions.DeserializerException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "import com.neilbaner.duke.task.*;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "import java.lang.reflect.Type;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "neilbaner"
        },
        "content": " * A collection of static methods to serialize and deserialize"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "neilbaner"
        },
        "content": " * Task and TaskList objects."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "neilbaner"
        },
        "content": " * \u003cbr/\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "neilbaner"
        },
        "content": " * Output format:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "neilbaner"
        },
        "content": " * A single line of plain text"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "neilbaner"
        },
        "content": " * \u003cbr/\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "neilbaner"
        },
        "content": " * The delimiter \"~~\" is used to separate each Task"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "neilbaner"
        },
        "content": " * \u003cbr/\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "neilbaner"
        },
        "content": " * The delimiter \"~\" is used to separate each property of a Task"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "neilbaner"
        },
        "content": " * \u003cbr/\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "neilbaner"
        },
        "content": " * The first token of any Task is a single character T, E, or D"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "neilbaner"
        },
        "content": " * representing the type of the task"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "neilbaner"
        },
        "content": " * \u003cbr/\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "neilbaner"
        },
        "content": " * The next token, for Event or Deadline tasks, is the event time"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "neilbaner"
        },
        "content": " * or due date respectively. This is skipped for to-do tasks."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "neilbaner"
        },
        "content": " * \u003cbr/\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "neilbaner"
        },
        "content": " * The last two tokens represent the task title, and the \"done\" status"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "neilbaner"
        },
        "content": " * (as Y/N for done/not done) respectively."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "neilbaner"
        },
        "content": " *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "neilbaner"
        },
        "content": " * @author neilbaner"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "neilbaner"
        },
        "content": " */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "public class Serializer {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    private static final String TASK_DELIMITER \u003d \"\\n\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    private static final String PART_DELIMITER \u003d \"~\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "     * Takes in an object of type TaskList and returns a String"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "     * which can then be written to a file or used otherwise."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "     * @param tl TaskList that we want to serialize."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "     * @return String containing serialized output"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    public static String serializeTaskList(TaskList tl) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        String serialized \u003d \"\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        for (Task t : tl.getAllTasksList()) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "            serialized +\u003d serializeTask(t);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "            serialized +\u003d TASK_DELIMITER;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        return serialized;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "     * Takes a String created by serializeTaskList() and deserializes it"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "     * into an ArrayList\u0026lt;Task\u0026rt;."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "     *"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "     * @param s The String (eg. from a text file) for the entire task list"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "     * @return ArrayList\u0026lt;Task\u0026gt; containing all the Task objects represented in the String"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "     * @throws DeserializerException if there is an error deserializing any task"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    public static ArrayList\u003cTask\u003e deserializeTaskList(String s) throws DeserializerException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        ArrayList\u003cTask\u003e taskList \u003d new ArrayList\u003cTask\u003e();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        String[] tasks \u003d s.split(TASK_DELIMITER);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        for (int i \u003d 0; i \u003c tasks.length; i++) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "            taskList.add(deserializeTask(tasks[i]));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        return taskList;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "     * Takes a single Task object, and converts it into a String"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "     * to be written to a file or otherwise stored/transmitted."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "     *"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "     * @param t the Task object to be serialized"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "     * @return String representing the task"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    private static String serializeTask(Task t) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        Type taskType \u003d t.getClass();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        String serialized \u003d \"\";"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        if (taskType \u003d\u003d ToDo.class) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "            serialized +\u003d \"T\" + PART_DELIMITER;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        } else if (taskType \u003d\u003d Event.class) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "            serialized +\u003d \"E\" + PART_DELIMITER;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "            serialized +\u003d ((Event) t).getAssociatedDateString() + PART_DELIMITER;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        } else if (taskType \u003d\u003d Deadline.class) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "            serialized +\u003d \"D\" + PART_DELIMITER;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "            serialized +\u003d ((Deadline) t).getAssociatedDateString() + PART_DELIMITER;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        serialized +\u003d t.getTitle() + PART_DELIMITER;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        serialized +\u003d (t.getDone()) ? \"Y\" : \"N\";"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        return serialized;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "     * Takes a String generated by serializeTask() and attempts to deserialize it"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "     * into a single Task object (will be of correct subclass type, i.e. ToDo, Deadline, Event)"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "     *"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "     * @param s A string, generated by serializeTask() to deserialize"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "     * @return Task subclass (ToDo, Event, Deadline) as represented by s"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "     * @throws DeserializerException if there is some error in the string."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    public static Task deserializeTask(String s) throws DeserializerException {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        String[] parts;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        Task deserialized;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        parts \u003d s.split(PART_DELIMITER);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "            if (parts[0].equals(\"T\")) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "                deserialized \u003d new ToDo(parts[1]);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "                if (parts[2].equals(\"Y\")) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "                    deserialized.setDone();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "                }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "            } else if (parts[0].equals(\"E\")) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "                deserialized \u003d new Event(parts[2], parts[1]);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "                if (parts[3].equals(\"Y\")) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "                    deserialized.setDone();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "                }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "            } else if (parts[0].equals(\"D\")) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "                deserialized \u003d new Deadline(parts[2], parts[1]);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "                if (parts[3].equals(\"Y\")) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "                    deserialized.setDone();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "                }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "                throw new DeserializerException();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "            }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "            throw new DeserializerException();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        return deserialized;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "neilbaner": 128
    }
  },
  {
    "path": "src/main/java/com/neilbaner/duke/task/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "package com.neilbaner.duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "neilbaner"
        },
        "content": " * @author Neil Banerjee"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "neilbaner"
        },
        "content": " * @version 1.0"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "neilbaner"
        },
        "content": " * Represents a task of type Deadline. Contains the title, the associated due date, and whether or not the task is"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "neilbaner"
        },
        "content": " * done (false by default)."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "neilbaner"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "public class Deadline extends TaskWithAssociatedDate {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    public Deadline(String title, String dueDate) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        super(title, dueDate);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        setDateTime(this.associatedDateString);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    public Deadline(String title, String description, String dueDate) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        super(title, description, dueDate);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        if (associatedDate !\u003d null) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "            return \"[D]\" + super.toString() + \", at \" + associatedDate.format(DateTimeFormatter.ofPattern(\"dd/MM\" +"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "                    \"/yyyy\"));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        return \"[D]\" + super.toString() + \", at \" + associatedDateString;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "neilbaner": 30
    }
  },
  {
    "path": "src/main/java/com/neilbaner/duke/task/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "package com.neilbaner.duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "public class Event extends TaskWithAssociatedDate {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    public Event(String title, String eventTime) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        super(title, eventTime);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        this.associatedDateString \u003d eventTime;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    public Event(String title, String description, String eventTime) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        super(title, description, eventTime);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        this.associatedDateString \u003d eventTime;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        if (associatedDate !\u003d null) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "            return \"[E]\" + super.toString() + \", at \" + associatedDate.format(DateTimeFormatter.ofPattern(\"dd/MM/yyyy\"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        return \"[E]\" + super.toString() + \", at \" + associatedDateString;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "neilbaner": 24
    }
  },
  {
    "path": "src/main/java/com/neilbaner/duke/task/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "package com.neilbaner.duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "neilbaner"
        },
        "content": " * @author Neil Banerjee"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "neilbaner"
        },
        "content": " * @version 1.0"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "neilbaner"
        },
        "content": " * A class to represent any sort of Task. Any task will contain a title and whether or not the task is done."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "neilbaner"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "public abstract class Task {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    private String title;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    private String description;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    private boolean isDone;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    Task(String title, String description) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        this.title \u003d title;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    Task(String title) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        this.title \u003d title;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        this.description \u003d \"\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    public String getTitle() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        return title;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    public void setTitle(String title) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        this.title \u003d title;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    public void setDescription(String description) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    public boolean getDone() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        return isDone;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    public void setDone() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        isDone \u003d true;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    public void setNotDone() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        isDone \u003d false;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        return \"[\" + (isDone ? \"*\" : \" \") + \"] \" + title;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "neilbaner": 57
    }
  },
  {
    "path": "src/main/java/com/neilbaner/duke/task/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "package com.neilbaner.duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "import com.neilbaner.duke.exceptions.TaskIndexOutOfBoundsException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "neilbaner"
        },
        "content": " * @author Neil Banerjee"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "neilbaner"
        },
        "content": " * @version 1.0"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "neilbaner"
        },
        "content": " * A class to store the tasks that have been added by the user, and manage and manipulate them in various ways."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "neilbaner"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    private final ArrayList\u003cTask\u003e tasks;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    public TaskList() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        tasks \u003d new ArrayList\u003cTask\u003e();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    public ArrayList\u003cTask\u003e getAllTasksList() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        return tasks;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    public void addTask(Task t) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        tasks.add(t);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "     * Deletes the task at an index specified."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "     * @param index the index of the task to be deleted, precondition: 0-indexed."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "     * @throws TaskIndexOutOfBoundsException if the index does not exist in the list."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    public void deleteTask(int index) throws TaskIndexOutOfBoundsException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "            tasks.remove(index);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "            throw new TaskIndexOutOfBoundsException();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "     * Marks the task at an index as done."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "     * @param index the index of the task to be marked as done, precondition: 0-indexed."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "     * @throws TaskIndexOutOfBoundsException if the index does not exist in the list."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    public void markTaskDone(int index) throws TaskIndexOutOfBoundsException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "            tasks.get(index).setDone();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "            throw new TaskIndexOutOfBoundsException();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    public int getSize() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        return tasks.size();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "     * Gets the task at a specified index"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "     * @param index the index of the task to get, precondition: 0-indexed"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "     * @return the Task at that index"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "     * @throws TaskIndexOutOfBoundsException if the index does not exist in the list"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    public Task getTask(int index) throws TaskIndexOutOfBoundsException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "            return tasks.get(index);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "            throw new TaskIndexOutOfBoundsException();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "     * Gets all the tasks in the list that have a date before the one specified."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "     * @param dateBeforeWhich the specified date before which we want to get tasks."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "     * @return all the tasks before that date, as an ArrayList of tasks."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    public ArrayList\u003cTask\u003e getAllTasksBeforeList(LocalDate dateBeforeWhich) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        ArrayList\u003cTask\u003e allTasksBeforeList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        for (Task t : tasks) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "            if (t instanceof TaskWithAssociatedDate) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "                TaskWithAssociatedDate tWithAssociatedDate \u003d (TaskWithAssociatedDate) t;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "                if (tWithAssociatedDate.getAssociatedDate() !\u003d null) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "                    LocalDate dateOfCurrentTask \u003d tWithAssociatedDate.getAssociatedDate();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "                    if (dateOfCurrentTask.isBefore(dateBeforeWhich)) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "                        allTasksBeforeList.add(t);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "                }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "            }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        return allTasksBeforeList;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "     * Gets all the tasks in the list that have a date the same as the one specified."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "     * @param dateBeforeWhich the specified date on which we want to get tasks."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "     * @return all the tasks on that date, as an ArrayList of tasks."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    public ArrayList\u003cTask\u003e getAllTasksOnList(LocalDate dateBeforeWhich) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        ArrayList\u003cTask\u003e allTasksOnList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        for (Task t : tasks) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "            if (t instanceof TaskWithAssociatedDate) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "                TaskWithAssociatedDate tWithAssociatedDate \u003d (TaskWithAssociatedDate) t;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "                if(tWithAssociatedDate.getAssociatedDate() !\u003d null) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "                    LocalDate dateOfCurrentTask \u003d tWithAssociatedDate.getAssociatedDate();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "                    if (dateOfCurrentTask.isEqual(dateBeforeWhich)) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "                        allTasksOnList.add(t);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "                }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "            }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        return allTasksOnList;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "     * Gets all the tasks in the list whose titles contain a certain string, the search key."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "     * @param searchKey the string to search for."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "     * @return all the tasks containing that string, as an ArrayList of tasks. "
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    public ArrayList\u003cTask\u003e searchTasksResults(String searchKey) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        ArrayList\u003cTask\u003e results \u003d new ArrayList\u003cTask\u003e();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        for (Task t : tasks) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "            if (t.getTitle().contains(searchKey)) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "                results.add(t);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "            }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        return results;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "neilbaner": 129
    }
  },
  {
    "path": "src/main/java/com/neilbaner/duke/task/TaskWithAssociatedDate.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "package com.neilbaner.duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "import java.time.DateTimeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "neilbaner"
        },
        "content": " * @author Neil Banerjee"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "neilbaner"
        },
        "content": " * @version 1.0"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "neilbaner"
        },
        "content": " * An abstract class for any type of task that has a date, such as a deadline. Currently, Event and Deadline extend"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "neilbaner"
        },
        "content": " * this class."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "neilbaner"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "public abstract class TaskWithAssociatedDate extends Task {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    String associatedDateString;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    LocalDate associatedDate;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    private LocalTime associatedTime;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    TaskWithAssociatedDate(String title, String associatedDate) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        super(title);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        this.associatedDateString \u003d associatedDate;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        setDateTime(associatedDate);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    TaskWithAssociatedDate(String title, String description, String associatedDate) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        super(title, description);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        this.associatedDateString \u003d associatedDate;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        setDateTime(associatedDate);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    public LocalDate getAssociatedDate() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        return associatedDate;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    public LocalTime getAssociatedTime() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        return associatedTime;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    void setDateTime(String dateString) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        setDate(dateString);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        setTime(dateString);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "     * Sets the date of the task based on a string that has been input by the user. If a properly formatted date has"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "     * not been entered by the user, then the LocalDate object is simply not set and the string is used directly"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "     * instead."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "     * @param dateString the string input by the user which may or may not contain a properly formatted date."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    private void setDate(String dateString) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        String[] tokens \u003d dateString.split(\" \");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        for (String token : tokens) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "                associatedDate \u003d LocalDate.parse(token);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "            } catch (DateTimeException e) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "            }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "     * Sets the time of the task based on a string that has been input by the user. If a properly formatted time has"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "     * not been entered by the user, then the LocalTime object is simply not set and the string is used directly"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "     * instead."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "     * @param dateString the string input by the user which may or may not contain a properly formatted time."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    private void setTime(String dateString) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        String[] tokens \u003d dateString.split(\" \");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        for (String token : tokens) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "                associatedTime \u003d LocalTime.parse(token);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "            } catch (DateTimeException e) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "            }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "     * Gets the associated date of the task as a String instead of as a LocalDate"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "     * @return the date of the task as a String"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    public String getAssociatedDateString() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        return associatedDateString;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "neilbaner": 87
    }
  },
  {
    "path": "src/main/java/com/neilbaner/duke/task/ToDo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "package com.neilbaner.duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "neilbaner"
        },
        "content": " * @author Neil Banerjee"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "neilbaner"
        },
        "content": " * @version 1.0"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "neilbaner"
        },
        "content": " * Represents a todo task. Contains the task title, and whether or not the task is done (false by default)."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "neilbaner"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "public class ToDo extends Task {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    public ToDo(String title) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        super(title);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    public ToDo(String title, String description) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        super(title, description);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        return \"[T]\" + super.toString();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "neilbaner": 22
    }
  },
  {
    "path": "src/main/java/com/neilbaner/duke/ui/Commands.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "package com.neilbaner.duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "neilbaner"
        },
        "content": " * @author Neil Banerjee"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "neilbaner"
        },
        "content": " * @version 1.0"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "neilbaner"
        },
        "content": " * A collection of constants for the various commands known by Duke."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "neilbaner"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "public class Commands {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    public static final String EVENT_AT_DELIMITER \u003d \"/at\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    public static final String DEADLINE_BY_DELIMITER \u003d \"/by\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    public static final String DONE_COMMAND \u003d \"done\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    public static final String DELETE_COMMAND \u003d \"delete\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    public static final String FIND_COMMAND \u003d \"find\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    public static final String LIST_COMMAND \u003d \"list\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    public static final String ADD_EVENT_COMMAND \u003d \"event\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    public static final String ADD_DEADLINE_COMMAND \u003d \"deadline\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    public static final String ADD_TODO_COMMAND \u003d \"todo\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    public static final String EXIT_COMMAND \u003d \"bye\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    public static final String BEFORE_COMMAND \u003d \"before\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    public static final String AT_COMMAND \u003d \"at\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    public static final String HELP_COMMAND \u003d \"help\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "neilbaner": 27
    }
  },
  {
    "path": "src/main/java/com/neilbaner/duke/ui/InputParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "package com.neilbaner.duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "import com.neilbaner.duke.exceptions.*;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "neilbaner"
        },
        "content": " * @author Neil Banerjee"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "neilbaner"
        },
        "content": " * @version 1.0"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "neilbaner"
        },
        "content": " * A collection of methods to parse the input from the user and get the relevant information from the entered commands."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "neilbaner"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "public class InputParser {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "     * Gets the title of a ToDo to be added, from the entered command."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "     * @param input the command that has been input to add a new todo, directly from the user. Precondition: must be"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "     *              a todo command."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "     * @return the title of the ToDo to be added"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "     * @throws BlankTaskTitleException if the title is blank/has not been entered."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    public static String getTodoTitle(String input) throws BlankTaskTitleException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "            int commandLength \u003d Commands.ADD_TODO_COMMAND.length();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "            String todoTitle \u003d input.substring(commandLength + 1);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "            if (todoTitle.equals(\"\")) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "                throw new BlankTaskTitleException();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "            }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "            return todoTitle;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "            throw new BlankTaskTitleException();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "     * Gets the title of an Event to be added, from the entered command."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "     * @param input the command that has been input to add a new event, directly from the user. Precondition: must be"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "     *             an event command"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "     * @return the title of the Event to be added"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "     * @throws BlankTaskTitleException if the title is blank/has not been entered"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    public static String getEventTitle(String input) throws BlankTaskTitleException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "            int commandLength \u003d Commands.ADD_EVENT_COMMAND.length();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "            int delimiterIndex \u003d input.indexOf(Commands.EVENT_AT_DELIMITER);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "            String eventTitle \u003d input.substring(commandLength + 1, delimiterIndex).strip();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "            if (eventTitle.equals(\"\")) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "                throw new BlankTaskTitleException();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "            }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "            return eventTitle;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "            throw new BlankTaskTitleException();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "     * Gets the title of a Deadline to be added, from the entered command."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "     * @param input the command that has been input to add a new Deadline, stripped user input. Precondition: must be"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "     *             a deadline command"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "     * @return the title of the Deadline to be added"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "     * @throws BlankTaskTitleException if the title is blank/has not been entered"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    public static String getDeadlineTitle(String input) throws BlankTaskTitleException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "            int commandLength \u003d Commands.ADD_DEADLINE_COMMAND.length();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "            int delimiterIndex \u003d input.indexOf(Commands.DEADLINE_BY_DELIMITER);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "            String deadlineTitle \u003d input.substring(commandLength, delimiterIndex).strip();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "            if (deadlineTitle.equals(\"\")) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "                throw new BlankTaskTitleException();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "            }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "            return deadlineTitle;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "            throw new BlankTaskTitleException();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "     * Gets the date of an Event to be added, from the entered command."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "     * @param input the command that has been input to add a new Event, stripped user input. Precondition: must be an"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "     *             event command."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "     * @return the part of the command that corresponds to the event time as a String"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "     * @throws BlankEventTimeException if the event at is blank."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    public static String getEventTime(String input) throws BlankEventTimeException {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "            int delimiterLength \u003d Commands.EVENT_AT_DELIMITER.length();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "            int delimiterIndex \u003d input.indexOf(Commands.EVENT_AT_DELIMITER);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "            if(delimiterIndex \u003d\u003d -1) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "                throw new BlankEventTimeException();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "            }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "            String eventTimeString \u003d input.substring(delimiterIndex + delimiterLength).strip();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "            if (eventTimeString.equals(\"\")) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "                throw new BlankEventTimeException();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "            }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "            return eventTimeString;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "            throw new BlankEventTimeException();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "     * Gets the date of an Deadline to be added, from the entered command."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "     * @param input the command that has been input to add a new Deadline, stripped user input. Precondition: must be"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "     *             a deadline command."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "     * @return the part of the command that corresponds to the deadline time as a String"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "     * @throws BlankEventTimeException if the deadline by is blank."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    public static String getDeadlineDueDate(String input) throws BlankDeadlineDateException {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "            int delimiterLength \u003d Commands.DEADLINE_BY_DELIMITER.length();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "            int delimiterIndex \u003d input.indexOf(Commands.DEADLINE_BY_DELIMITER);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "            if(delimiterIndex \u003d\u003d -1) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "                throw new BlankDeadlineDateException();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "            }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "            String dueDateString \u003d input.substring(delimiterIndex + delimiterLength + 1).strip();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "            if (dueDateString.equals(\"\")) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "                throw new BlankDeadlineDateException();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "            }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "            return dueDateString;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "            throw new BlankDeadlineDateException();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "     * Gets the index of the task to be marked as Done."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "     * @param input the command that has been entered by the user, stripped. Precondition: must be a done command."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "     * @return the index of the task to be marked as done"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "     * @throws IncorrectFormattingException if the index is not a number, or some other error."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "     * @throws BlankIndexToMarkException if the index is not specified"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    public static int getIndexToMark(String input) throws IncorrectFormattingException, BlankIndexToMarkException {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "            int commandLength \u003d Commands.DONE_COMMAND.length();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "            String indexAsString \u003d input.substring(commandLength + 1);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "            if (indexAsString.equals(\"\")) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "                throw new BlankIndexToMarkException();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "            }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "            return Integer.parseInt(indexAsString) - 1;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "            throw new IncorrectFormattingException();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "            throw new BlankIndexToMarkException();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "     * Gets the index of the task to be deleted."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "     * @param input the command that has been entered by the user, stripped. Precondition: must be a delete command."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "     * @return the index of the task to be deleted"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "     * @throws IncorrectFormattingException if the index is not a number, or some other error."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "     * @throws BlankIndexToDeleteException if the index is not specified"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "     */"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    public static int getIndexToDelete(String input) throws IncorrectFormattingException, BlankIndexToDeleteException {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "            int commandLength \u003d Commands.DELETE_COMMAND.length();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "            String indexAsString \u003d input.substring(commandLength + 1);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "            if (indexAsString.equals(\"\")) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "                throw new BlankIndexToDeleteException();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "            }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "            return Integer.parseInt(indexAsString) - 1;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "            throw new IncorrectFormattingException();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "            throw new BlankIndexToDeleteException();"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "     * Gets the search key to search for"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "     * @param input the command that has been entered by the user, stripped. Precondition: must be a find command."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "     * @return the key to search for"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "     * @throws BlankSearchKeyException if the user has not entered a search key."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "     */"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    public static String getSearchKey(String input) throws BlankSearchKeyException {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "            int beginIndex \u003d Commands.FIND_COMMAND.length() + 1;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "            String key \u003d input.substring(beginIndex);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "            if (key.equals(\"\")) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "                throw new BlankSearchKeyException();"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "            }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "            return key;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "            throw new BlankSearchKeyException();"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "     * Gets the date to search for"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "     * @param input the command that has been entered by the user, stripped."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "     * @param command the type of command (before or at) that has been entered."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "     * @return the date that has been input"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "     * @throws IncorrectFormattingException if the command is incorrectly formatted"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "     * @throws BlankBeforeAtDateException if the date is blank"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "     * @throws BadDateFormatException if the date is incorrectly formatted"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "     */"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    public static LocalDate getDateFromInput(String input, String command) throws IncorrectFormattingException, BlankBeforeAtDateException, BadDateFormatException {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "            String dateString \u003d input.substring(command.length() + 1);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "            if (dateString.strip().equals(\"\")) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "                throw new BlankBeforeAtDateException();"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "            }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "            return LocalDate.parse(dateString);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "            throw new IncorrectFormattingException();"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "            throw new BadDateFormatException();"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "neilbaner": 210
    }
  },
  {
    "path": "src/main/java/com/neilbaner/duke/ui/UserInterface.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "package com.neilbaner.duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "import com.neilbaner.duke.exceptions.*;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "import com.neilbaner.duke.messages.OperationMessages;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "import com.neilbaner.duke.task.*;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "neilbaner"
        },
        "content": " * @author Neil Banerjee"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "neilbaner"
        },
        "content": " * @version 1.0"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "neilbaner"
        },
        "content": " * Class for the user interface of Duke."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "neilbaner"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "public class UserInterface {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    // The task list we are working with"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    private final TaskList taskList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "     * Constructor"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "     * @param taskList the TaskList object with the tasks from the current instance."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    public UserInterface(TaskList taskList) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        this.taskList \u003d taskList;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "     * Prints all the tasks in the current working TaskList"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    private void printTaskList() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        OperationMessages.printHorizontalLine();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        if (taskList.getSize() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "            System.out.println(\"No tasks added yet\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        for (Task task : taskList.getAllTasksList()) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "            System.out.println(task.toString());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        OperationMessages.printHorizontalLine();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "     * Prints an ArrayList of tasks, to be used when printing the results of a search/before/at command"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "     * @param taskListToPrint the ArrayList of Tasks to be printed"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    private void printTaskList(ArrayList\u003cTask\u003e taskListToPrint) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        OperationMessages.printHorizontalLine();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        if (taskListToPrint.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "            System.out.println(\"No tasks that match. \");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        for (Task task : taskListToPrint) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "            System.out.println(task.toString());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        OperationMessages.printHorizontalLine();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "     * Prints the help for Duke."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    private void printHelp() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        OperationMessages.printHelp();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "     * Add a new todo task to the TaskList with a given title"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "     * @param title the title of the task to be added."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    private void addToDo(String title) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        taskList.addTask(new ToDo(title));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        OperationMessages.printAddedToDo(title);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "     * Add a new event task to the TaskList with a given title and event at time."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "     * @param title the title of the event to be added"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "     * @param eventTime the time of the event to be added"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    private void addEvent(String title, String eventTime) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        taskList.addTask(new Event(title, eventTime));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        OperationMessages.printAddedEvent(title);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "     * Add a new Deadline task to the TaskList with a given title and a deadline by date."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "     * @param title the title of the Deadline to be added"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "     * @param dueDate the due date of the Deadline to be added"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    private void addDeadline(String title, String dueDate) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        taskList.addTask(new Deadline(title, dueDate));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        OperationMessages.printAddedDeadline(title);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "     * Marks a task in the TaskList as Done."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "     * @param indexToMark the index to be marked as done."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "     * @throws TaskIndexOutOfBoundsException if the index to be marked as done doesn\u0027t exist in the TaskList ArrayList."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    private void markAsDone(int indexToMark) throws  TaskIndexOutOfBoundsException {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        taskList.markTaskDone(indexToMark);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        OperationMessages.printMarkedDone(taskList.getTask(indexToMark).getTitle());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "     * Deletes a task in the TaskList."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "     * @param indexToDelete the index of the task to be deleted."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "     * @throws TaskIndexOutOfBoundsException if the index to be deleted doesn\u0027t exist in the TaskList ArrayList."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    private void deleteTask(int indexToDelete) throws TaskIndexOutOfBoundsException {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        String deletedTitle \u003d taskList.getTask(indexToDelete).toString();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        taskList.deleteTask(indexToDelete);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        OperationMessages.printDeleted(deletedTitle);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "     * Executes a command entered by a user"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "     * @param command the input directly from the user, unprocessed."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "     * @throws DukeException if there is some error executing the command."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    public void executeCommand(String command) throws DukeException {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        // removes leading and trailing spaces"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        String cleanInput \u003d command.strip();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        // accounts for different cases"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        String lowerCaseCleanInput \u003d cleanInput.toLowerCase();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        // for each command:"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        if (lowerCaseCleanInput.equals(Commands.EXIT_COMMAND)) { // to exit"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "            OperationMessages.printGoodBye();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        } else if (lowerCaseCleanInput.equals(Commands.LIST_COMMAND)) { // to list all Tasks"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "            printTaskList();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        } else if (lowerCaseCleanInput.startsWith(Commands.DONE_COMMAND)) { // to mark a task as done"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "            int indexToMark \u003d InputParser.getIndexToMark(cleanInput);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "            markAsDone(indexToMark);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        } else if (lowerCaseCleanInput.startsWith(Commands.DELETE_COMMAND)) { // to delete a task"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "            int indexToDelete \u003d InputParser.getIndexToDelete(cleanInput);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "            deleteTask(indexToDelete);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        } else if (lowerCaseCleanInput.startsWith(Commands.ADD_TODO_COMMAND)) { // to add a new todo"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "            addToDo(InputParser.getTodoTitle(cleanInput));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        } else if (lowerCaseCleanInput.startsWith(Commands.ADD_DEADLINE_COMMAND)) { // to add a new deadline"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "            String title \u003d InputParser.getDeadlineTitle(cleanInput);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "            String dueDate \u003d InputParser.getDeadlineDueDate(cleanInput);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "            if (dueDate.equals(\"\")) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "                throw new BlankDeadlineDateException();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "            }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "            addDeadline(title, dueDate);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        } else if (lowerCaseCleanInput.startsWith(Commands.ADD_EVENT_COMMAND)) { // to add a new event"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "            String title \u003d InputParser.getEventTitle(cleanInput);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "            String eventTime \u003d InputParser.getEventTime(cleanInput);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "            if (eventTime.equals(\"\")) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "                throw new BlankEventTimeException();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "            }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "            addEvent(title, eventTime);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        } else if (lowerCaseCleanInput.startsWith(Commands.BEFORE_COMMAND)) { // to get all tasks before a date"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "            LocalDate dateInput \u003d InputParser.getDateFromInput(cleanInput, Commands.BEFORE_COMMAND);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "            ArrayList\u003cTask\u003e tasksBeforeDateList \u003d taskList.getAllTasksBeforeList(dateInput);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "            printTaskList(tasksBeforeDateList);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        } else if (lowerCaseCleanInput.startsWith(Commands.AT_COMMAND)) { // to get all tasks at a date"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "            LocalDate dateInput \u003d InputParser.getDateFromInput(cleanInput, Commands.AT_COMMAND);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "            ArrayList\u003cTask\u003e tasksBeforeDateList \u003d taskList.getAllTasksOnList(dateInput);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "            printTaskList(tasksBeforeDateList);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        } else if (lowerCaseCleanInput.startsWith(Commands.FIND_COMMAND)) { // to search for tasks with a key"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "            String searchKey \u003d InputParser.getSearchKey(cleanInput);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "            ArrayList\u003cTask\u003e searchResults \u003d taskList.searchTasksResults(searchKey);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "            printTaskList(searchResults);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        } else if (lowerCaseCleanInput.equals(Commands.HELP_COMMAND)) { // to print the help command"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "            printHelp();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        } else { // if the command is not one of the known ones"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "            throw new UnknownCommandException();"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "neilbaner"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    public void startUI() {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "        OperationMessages.printHello();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "neilbaner"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "neilbaner": 172
    }
  }
]
