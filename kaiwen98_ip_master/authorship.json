[
  {
    "path": "savestates/test.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "| T | X | walk the dog in the park"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "| D | O | walk the cat in the sea  | by: tuesday"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "| E | X | party in te sun          | at: tuesday 2-3pm"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "| T | O | jump the rope"
      }
    ],
    "authorContributionMap": {
      "kaiwen98": 4
    }
  },
  {
    "path": "savestates/test1.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "| T | X | hello                      "
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "| D | O | walk the dog                | by: monday 2-6pm         "
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "| T | X | goodbye                    "
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "| E | X | party                       | at: Monday 6-9pm         "
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "| T | X | Eat the hotdog at the beach"
      }
    ],
    "authorContributionMap": {
      "kaiwen98": 5
    }
  },
  {
    "path": "savestates/test2.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "| T | O | hello                      "
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "| T | X | Eat the hotdog at the beach"
      }
    ],
    "authorContributionMap": {
      "kaiwen98": 2
    }
  },
  {
    "path": "savestates/test3.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "| T | X | asdasdasd"
      }
    ],
    "authorContributionMap": {
      "kaiwen98": 1
    }
  },
  {
    "path": "src/main/java/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": " * Main class to execute program"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "import static duke.dukehelper.Routine.queryRoutine;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        queryRoutine(args);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "-": 4,
      "kaiwen98": 8
    }
  },
  {
    "path": "src/main/java/duke/dukehelper/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": " * Abstract class that all classes that are commands in nature inherits from."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": " * This abstracts the ability to capture params from packet and evaluate with their local requirements."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": " * The evaluation function is handleParams, which must be overwritten by the subclasses."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "package duke.dukehelper;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "import java.util.Hashtable;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    protected Hashtable paramMap;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    public Constants.Error error \u003d Constants.Error.OTHER_ERROR;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    protected abstract Constants.Error handleParams(String paramType);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "     * For each param type in the hash table (Param Map), task to handle the contents accordingly with a corresponding action."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    protected void processParamMap() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        String customErrorMessage \u003d \"\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        if (!this.paramMap.isEmpty()) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            for (Object paramType : this.getParamTypes()) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                // If there is at least one valid param type and param to process, no need to dismiss the entire task."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                if (this.handleParams((String) paramType) \u003d\u003d Constants.Error.NO_ERROR) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                    this.error \u003d Constants.Error.NO_ERROR;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            customErrorMessage \u003d \"This command expects a param type-param input, eg. /by Monday etc.\\n\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            DukeException.printErrorMessage(Constants.Error.WRONG_ARGUMENTS, customErrorMessage);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    public void setParamMap(Hashtable paramMap){"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        this.paramMap \u003d new Hashtable();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        this.paramMap \u003d (Hashtable) paramMap.clone();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        processParamMap();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    public Set getParamTypes() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        return paramMap.keySet();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kaiwen98": 42
    }
  },
  {
    "path": "src/main/java/duke/dukehelper/CommandHandler.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": " * Class to handle command inputs by user"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "package duke.dukehelper;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "import duke.taskhelper.ListTasks;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "import duke.taskhelper.Packet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "import duke.tasks.Deadline;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "import duke.tasks.Event;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "import duke.tasks.Task;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "import duke.tasks.ToDo;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "import static duke.dukehelper.Routine.replyRoutine;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "public class CommandHandler {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    public static ListTasks list \u003d new ListTasks();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    private static SaveManager saveManager \u003d null;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    private static int conversationCounter \u003d 0;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "     * Validates if the input supplies a description as needed by the command"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "     * @param packet"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "     * @throws DukeException.InvalidDescription"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    private static void validatePayload(Packet packet) throws DukeException.InvalidDescription {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        if (packet.getPacketPayload() \u003d\u003d null){"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            throw new DukeException.InvalidDescription();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "     * Validates if list is empty"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "     * @throws DukeException.NoList"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    private static void validateList() throws DukeException.NoList {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        if (list.getNumTasks() \u003d\u003d 0){"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            throw new DukeException.NoList();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "     * Handles command and prints messages, if any onto console depending on input parameter."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "     * @param command a string of a simple root word to represent a particular message"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "     * @param packet an input parameter for the message to print, given the command requires further inputs."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    public static Constants.Command handleCommand(Constants.Command command, Packet packet, boolean verbose, boolean isReply){"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        String output \u003d \"\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        String customErrorMessage \u003d \"\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        boolean isDrawPartition \u003d true;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        // If true, data will not be overwritten, and user will be prompted to input to respond to the command requirements."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        boolean exit \u003d false;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        // If a command demands a response from the user, this variable will relay to Duke the command to reply to."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        // If no reply is needed, this variable stays at null."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        Constants.Command commandToReply \u003d null;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        // Error code where applicable."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        Constants.Error err \u003d null;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        //System.out.println(String.format(\"[%s] %s\", command, packet));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        switch(command){"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        case HELLO:"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            output \u003d UiManager.MESSAGE_LOGO;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            output +\u003d UiManager.MESSAGE_HELLO;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        case BYE:"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            output \u003d UiManager.MESSAGE_BYE;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        case PROMPT_INPUT:"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            output \u003d \"\u003e\u003e\u003e \";"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            isDrawPartition \u003d false;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        case ECHO:"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            output \u003d \"\u003cECHO\u003e \" + packet.getRawInput() + \"\\n\";"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        case INSERT_TASK_DEADLINE:"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            //Fall through"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        case INSERT_TASK_TODO:"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            //Fall through"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        case INSERT_TASK_EVENT:"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "             *  The exception handling task is split into 2 types."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "             *  The first exception type should be detected by the command handler; If the command needs a"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "             *  description and the input does not supply any, we throw an exception here."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "             *  The second exception type is unique to what the different variants of tasks want,"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "             *  so we encapsulate the task-unique exception handling within their own class."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "             *  This principle is the same with saving, loading, task removing and marking as done."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "             */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            label: try {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                validatePayload(packet);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                Task inputEvent \u003d generateTask(command, packet);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                err \u003d list.addTask(inputEvent);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                if (err !\u003d Constants.Error.NO_ERROR) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                    break label;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                output \u003d UiManager.getMessageTaskAdded(inputEvent);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                output +\u003d UiManager.getMessageReportNumTasks(list);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            } catch (DukeException.InvalidDescription exception) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                customErrorMessage \u003d \"You have not entered a valid description!\\n\";"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                DukeException.printErrorMessage(Constants.Error.WRONG_ARGUMENTS, customErrorMessage);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            } finally {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                if (err !\u003d Constants.Error.NO_ERROR ) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                    DukeException.printErrorMessage(Constants.Error.TASK_NOT_CREATED);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        case SHOW_LIST:"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            if (list.getNumTasks() \u003d\u003d 0){"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                customErrorMessage \u003d \"Begin by adding some tasks!\\n\";"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                DukeException.printErrorMessage(Constants.Error.NO_LIST, customErrorMessage);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                output \u003d list.showAllTasks();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        case REMOVE_TASK:"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            label:try {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                validatePayload(packet);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                validateList();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                // We offset index by negative 1 to correspond with array index sequence."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                int index \u003d Integer.parseInt(packet.getPacketPayload().trim()) - 1;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                err \u003d list.removeTask(index);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                if (err !\u003d Constants.Error.NO_ERROR) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                    break label;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                Task outputTask \u003d list.getDeletedTask();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                output \u003d getMessageTaskCommands(command, outputTask);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            } catch (DukeException.InvalidDescription exception){"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                customErrorMessage \u003d \"You have not entered a valid task number!\\n\";"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                DukeException.printErrorMessage(Constants.Error.WRONG_ARGUMENTS, customErrorMessage);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            } catch (DukeException.NoList exception) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                DukeException.printErrorMessage(Constants.Error.NO_LIST);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            } finally {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                if (err !\u003d Constants.Error.NO_ERROR){"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                    DukeException.printErrorMessage(Constants.Error.TASK_COMMAND_FAIL);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                    customErrorMessage \u003d String.format(\"You have %d task/s left.\\n\", list.getNumTasks());"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                    DukeException.printErrorMessage(Constants.Error.NO_ERROR, customErrorMessage);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        case MARK_TASK_DONE:"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            label:try {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                validatePayload(packet);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                validateList();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                // We offset index by negative 1 to correspond with array index sequence."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                int index \u003d Integer.parseInt(packet.getPacketPayload().trim()) - 1;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                err \u003d list.markTaskAsDone(index);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                if (err !\u003d Constants.Error.NO_ERROR) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                    break label;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                Task outputTask \u003d list.getTaskByIndex(index);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                output \u003d getMessageTaskCommands(command, outputTask);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            } catch (DukeException.InvalidDescription exception){"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                customErrorMessage \u003d \"You have not entered a valid task number!\\n\";"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                DukeException.printErrorMessage(Constants.Error.WRONG_ARGUMENTS, customErrorMessage);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            } catch (DukeException.NoList exception) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                DukeException.printErrorMessage(Constants.Error.NO_LIST);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            } finally {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                if (err !\u003d Constants.Error.NO_ERROR){"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                    DukeException.printErrorMessage(Constants.Error.TASK_COMMAND_FAIL);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        case SAVE_FILE:"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            /**"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "             * Saves list to a file in the local disk."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "             * If the file already exist with same file name,"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "             * prompt the user on whether the file is to be overwritten."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "             */"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            if (!isReply) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                saveManager \u003d new SaveManager();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                saveManager.setParamMap(packet.getParamMap());"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                if (saveManager.isExistingFileName(saveManager.getFileName())){"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                    DukeException.printErrorMessage(Constants.Error.FILE_EXISTS);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                    commandToReply \u003d Constants.Command.SAVE_FILE;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                switch(packet.getPacketType()) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                case \"y\":"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                    customErrorMessage  \u003d String.format(\"Alright, save state below will be overwritten:\\t[%s]\\n\", saveManager.getFilePath());"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                    DukeException.printErrorMessage(Constants.Error.NO_ERROR, customErrorMessage);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                case \"n\":"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                    customErrorMessage \u003d \"Got it. Enter some other commands then!\\n\";"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                    DukeException.printErrorMessage(Constants.Error.NO_ERROR, customErrorMessage);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                    commandToReply \u003d null;"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                    exit \u003d true;"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                default:"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                    customErrorMessage \u003d \"Input not recognised. Enter either \\\"Y\\\" or \\\"N\\\".\\n\";"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                    DukeException.printErrorMessage(Constants.Error.WRONG_ARGUMENTS, customErrorMessage);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                    commandToReply \u003d Constants.Command.SAVE_FILE;"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            if (!exit) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                err \u003d saveManager.saveToTxt(list);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                if (err \u003d\u003d Constants.Error.NO_ERROR) {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                    output \u003d UiManager.getMessageListSaved(list);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                    DukeException.printErrorMessage(Constants.Error.FILE_SAVE_FAIL);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        case LOAD_FILE:"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            /**"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "             * Saves list to a file in the local disk."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "             * If the file already exist with same file name,"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "             * prompt the user on whether the file is to be overwritten."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "             * Also, if the user has an existing list,"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "             * prompt user to either save existing work via recursive call of handleCommand()"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "             * or to discard current changes."
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "             */"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            if (!isReply) {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                saveManager \u003d new SaveManager();"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                saveManager.setParamMap(packet.getParamMap());"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                if (saveManager.error !\u003d Constants.Error.NO_ERROR) {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                    // Fall-through"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                else if (list.getNumTasks() \u003e 0){"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                    DukeException.printErrorMessage(Constants.Error.LIST_EXISTS);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                    commandToReply \u003d Constants.Command.LOAD_FILE;"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                switch(packet.getPacketType()) {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                case \"y\":"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                    customErrorMessage  \u003d String.format(\"Alright, Enter the save command now:\\n\");"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                    DukeException.printErrorMessage(Constants.Error.NO_ERROR, customErrorMessage);"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                    // Switch context to save command, then return back to this point when done."
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                    replyRoutine(Constants.Command.SAVE_FILE, false);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                case \"n\":"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                    customErrorMessage \u003d \"Got it. I will discard the current list and load in the save state.\\n\";"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                    list.removeAllTasks();"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                    DukeException.printErrorMessage(Constants.Error.NO_ERROR, customErrorMessage);"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                    exit \u003d true;"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                default:"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                    customErrorMessage \u003d \"Input not recognised. Enter either \\\"Y\\\" or \\\"N\\\".\\n\";"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                    DukeException.printErrorMessage(Constants.Error.WRONG_ARGUMENTS, customErrorMessage);"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                    commandToReply \u003d Constants.Command.LOAD_FILE;"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            }"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            if (!exit) {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                list.removeAllTasks();"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                err \u003d saveManager.loadFromTxt(list);"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                if (err \u003d\u003d Constants.Error.NO_ERROR) {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                    output \u003d UiManager.getMessageListLoaded(list);"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                    DukeException.printErrorMessage(Constants.Error.FILE_LOAD_FAIL);"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                }"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            }"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        case SHOW_COMMANDS:"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            output \u003d UiManager.MESSAGE_COMMAND_LIST;"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        case SHOW_SAVE_STATES:"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            saveManager \u003d new SaveManager();"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            if(saveManager.getNumSaveStates() \u003d\u003d 0){"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                customErrorMessage \u003d \"Begin by saving some lists!\\n\";"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                DukeException.printErrorMessage(Constants.Error.NO_LIST, customErrorMessage);"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                output \u003d saveManager.getSaveStates();"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            }"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            DukeException.printErrorMessage(Constants.Error.INVALID_COMMAND);"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        if (verbose) {"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            System.out.print(output);"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            if (isDrawPartition){"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                UiManager.drawPartition();"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            }"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        return commandToReply;"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    public static Constants.Command handleCommand(Constants.Command command, Packet packet){"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        return handleCommand(command, packet, true, false);"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    public static Constants.Command handleCommand(Constants.Command command){"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        return CommandHandler.handleCommand(command, null, true, false);"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "     * Since task removal and task completion record is given a generalised treatment in handleCommand(),"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "     * We will use this function to output the corresponding status message."
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "     * @param command command by user"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "     * @param outputTask task to be deleted/ marked as done"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    private static String getMessageTaskCommands(Constants.Command command, Task outputTask) {"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        switch (command){"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        case MARK_TASK_DONE:"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            return UiManager.getMessageTaskMarkAsDone(outputTask);"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        case REMOVE_TASK:"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            return UiManager.getMessageTaskRemove(outputTask);"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "     * Since all variants of tasks are given a generalised treatment in handleCommand(),"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "     * We will use this function to output the corresponding task to add to list."
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "     * @param command command by user"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "     * @param packet packet that are supplying params and payload of data"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "     * @return task with corresponding type"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    private static Task generateTask(Constants.Command command, Packet packet){"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        switch (command) {"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        case INSERT_TASK_DEADLINE:"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            return new Deadline(packet.getPacketPayload(), packet.getParamMap());"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        case INSERT_TASK_EVENT:"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            return new Event(packet.getPacketPayload(), packet.getParamMap());"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        case INSERT_TASK_TODO:"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            return new ToDo(packet.getPacketPayload());"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kaiwen98": 339
    }
  },
  {
    "path": "src/main/java/duke/dukehelper/Constants.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": " * Contains constants used in command, error, etc."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "package duke.dukehelper;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "public class Constants {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    public static final String DEFAULT_SAVE_PATH \u003d getWorkingDirectory() + \"\\\\savestates\\\\\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    public static final int MAX_ARRAY_LEN \u003d 10;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    public static final int MAX_PARTITION_LINE_LEN \u003d 100;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    public static final int MAX_LIST_LEN \u003d 10;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    public static final String DONE_SYMBOL \u003d \"O\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    public static final String NOT_DONE_SYMBOL \u003d \"X\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    public enum Error {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        WRONG_ARGUMENTS,"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        INVALID_COMMAND,"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        NO_LIST,"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        NO_ERROR,"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        TASK_NOT_CREATED,"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        TASK_COMMAND_FAIL,"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        FILE_LOAD_FAIL,"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        FILE_SAVE_FAIL,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        FILE_NOT_FOUND,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        FILE_EXISTS,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        LIST_EXISTS,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        OTHER_ERROR"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    public enum Command {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        HELLO,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        BYE,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        ECHO,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        PROMPT_INPUT,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        INSERT_TASK_DEADLINE,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        INSERT_TASK_TODO,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        INSERT_TASK_EVENT,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        SHOW_LIST,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        SHOW_SAVE_STATES,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        SHOW_COMMANDS,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        MARK_TASK_DONE,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        REMOVE_TASK,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        SAVE_FILE,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        LOAD_FILE"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    public static String getWorkingDirectory(){"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        Path rootPath \u003d Paths.get(System.getProperty(\"user.dir\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        System.out.println(rootPath.getFileName());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        while (!(rootPath.getFileName().toString()).equals(\"ip\")){"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            rootPath \u003d Paths.get(rootPath.getParent().toString());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            System.out.println(rootPath.getFileName());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        return rootPath.toString();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kaiwen98": 59
    }
  },
  {
    "path": "src/main/java/duke/dukehelper/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": " * Handles exceptions with regards to input errors."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "package duke.dukehelper;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "public class DukeException {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    public static class InvalidDescription extends Exception{"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    public static class NoList extends Exception{"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    public static class TaskCreateFail extends Exception{"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    public static class ListSaveLoadFail extends Exception{"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    public static class FileNotFound extends Exception{"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    public static class TaskAlreadyDone extends Exception{"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    public static void printErrorMessage(Constants.Error error, String customErrorMessage){"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        String output \u003d \"\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        customErrorMessage \u003d customErrorMessage.equals(\"\")? \"\" : \"\\t[NOTE]: \"+ customErrorMessage;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        switch(error){"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        case NO_LIST:"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            output \u003d \"List is empty\\n\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        case WRONG_ARGUMENTS:"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            output \u003d \"Wrong arguments supplied. Please enter \\\"command\\\" to check acceptable arguments.\\n\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        case INVALID_COMMAND:"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            output \u003d \"Command not recognised. Please enter \\\"command\\\" for command list!\\n\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        case TASK_NOT_CREATED:"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            output \u003d \"Due to error in input, the task is not added. Try again.\\n\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        case TASK_COMMAND_FAIL:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            output \u003d \"Due to error in input, the task command failed. Try again. \\n\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        case FILE_SAVE_FAIL:"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            output \u003d \"Due to error in input, the list save failed. Try again. \\n\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        case FILE_LOAD_FAIL:"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            output \u003d \"Due to error in input, the list load failed. Try again. \\n\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        case FILE_NOT_FOUND:"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            output \u003d \"The file name supplied does not exist in the directory: \\n\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        case FILE_EXISTS:"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            output \u003d \"The file name supplied already exists in the directory. Are you sure you want to override it? [Y\\\\N]\\n\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        case LIST_EXISTS:"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            output \u003d \"There is a list currently being constructed. Would you like to save it first? [Y\\\\N]\\n\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        case NO_ERROR:"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            output \u003d \"Process completed successfully!\\n\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            // Fall through"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        System.out.print(output + customErrorMessage);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    public static void printErrorMessage(Constants.Error error){"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        printErrorMessage(error, \"\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kaiwen98": 66
    }
  },
  {
    "path": "src/main/java/duke/dukehelper/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": " * Class to parse inputs and classify the various segments into relevant data types and structures."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "package duke.dukehelper;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "import duke.taskhelper.*;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "     * Process input string, tokenising it by a space seperator and removing trailing spaces per token."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "     * @param rawInput Input string from users"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "     * @return A packet instance with different categories of information sorted out."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    public static Packet parseInput(String rawInput){"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        String regex \u003d \"(\\\\s+)(/\\\\w+)(\\\\s+)\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        Pattern pattern \u003d Pattern.compile(regex);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        Matcher matcher \u003d null;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        // A String buffer is used as placeholder for extracted string fragments from parsing input string."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        String[] buffer \u003d new String[]{\"\", \"\", \"\", \"\"};"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        Packet packet \u003d null;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        String input \u003d rawInput + \" /end \";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        // Extract command type"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        buffer[0] \u003d input.substring(0, input.indexOf(\" \")).toLowerCase();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        // Extract task name"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        buffer[1] \u003d (input.substring(input.indexOf(\" \"), input.indexOf(\" /\", 1))).replace(\" \", \" \").trim();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        // Initialize packet with known parameters: command and command payload"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        packet \u003d new Packet(buffer[0], rawInput);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        packet.setPacketPayload(buffer[1]);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "//        System.out.println(String.format(\"0: %s, 1: %s\", buffer[0], buffer[1]));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        // Implemented in case future commands with multiple param types are to be implemented"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        do {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            input \u003d input.substring(input.indexOf(\" /\")).trim();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            if (input.equals(\"/end\")) break;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            // Extract param type"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            buffer[2] \u003d input.substring(input.indexOf(\"/\"), input.indexOf(\" \")).toLowerCase();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            // Remove param type from input string"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            input \u003d (input.replaceFirst(\"(/\\\\w+)(\\\\s+)\", \"\\0\")).trim();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            input \u003d \" \".concat(input).concat(\" \");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            // Extract param name"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            matcher \u003d pattern.matcher(input);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            matcher.find();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            buffer[3] \u003d (input.substring(0, matcher.start())).trim();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            packet.addParamToMap(buffer[2], buffer[3]);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        } while (true);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        return packet;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kaiwen98": 51
    }
  },
  {
    "path": "src/main/java/duke/dukehelper/Routine.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": " * Class that handles front-end routines that deals directly with user input."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "package duke.dukehelper;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "import duke.taskhelper.Packet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "public class Routine {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    public static Constants.Command commandToReply \u003d null;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    public static boolean echoCommand \u003d false;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    public static Scanner in \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    public static String input;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "     * Subroutine to handle nested command handling."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "     * Useful if another command needs to be called from the current command."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "     * @param command nested command in handleCommand()"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "     * @param isReply"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    public static void replyRoutine(Constants.Command command, boolean isReply) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        Packet packet \u003d null;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        commandToReply \u003d command;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        while (commandToReply !\u003d null) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            CommandHandler.handleCommand(Constants.Command.PROMPT_INPUT);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            input \u003d in.nextLine();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            packet \u003d Parser.parseInput(input);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            if (echoCommand) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                CommandHandler.handleCommand(Constants.Command.ECHO, packet);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            commandToReply \u003d CommandHandler.handleCommand(commandToReply, packet, true, isReply);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            isReply \u003d true;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "     * Main subroutine to receive inputs from users."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "     * @param args passed from main()"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    public static void queryRoutine(String[] args) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        // Passed from main."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        // If true, command inputs will be echoed to console."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        // Mainly cosmetic in purpose for printing output from script."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        echoCommand \u003d (args.length \u003e 0) \u0026\u0026 Boolean.parseBoolean(args[0]);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        System.out.println(Constants.DEFAULT_SAVE_PATH);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        Packet packet \u003d null;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        boolean continueQuery \u003d true;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        UiManager.drawPartition();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        CommandHandler.handleCommand(Constants.Command.HELLO);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        while (continueQuery){"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            if (commandToReply !\u003d null) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                replyRoutine(commandToReply, true);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                CommandHandler.handleCommand(Constants.Command.PROMPT_INPUT);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                input \u003d in.nextLine();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                packet \u003d Parser.parseInput(input);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                if (echoCommand) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                    CommandHandler.handleCommand(Constants.Command.ECHO, packet);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                switch (packet.getPacketType()) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                case \"bye\":"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                    commandToReply \u003d CommandHandler.handleCommand(Constants.Command.BYE);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                    continueQuery \u003d false;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                case \"list\":"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                    commandToReply \u003d CommandHandler.handleCommand(Constants.Command.SHOW_LIST);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                case \"commands\":"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                    // Flow through"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                case \"command\":"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                    commandToReply \u003d CommandHandler.handleCommand(Constants.Command.SHOW_COMMANDS);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                case \"done\":"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                    commandToReply \u003d CommandHandler.handleCommand(Constants.Command.MARK_TASK_DONE, packet);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                case \"todo\":"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                    commandToReply \u003d CommandHandler.handleCommand(Constants.Command.INSERT_TASK_TODO, packet);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                case \"event\":"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                    commandToReply \u003d CommandHandler.handleCommand(Constants.Command.INSERT_TASK_EVENT, packet);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                case \"deadline\":"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                    commandToReply \u003d CommandHandler.handleCommand(Constants.Command.INSERT_TASK_DEADLINE, packet);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                case \"remove\":"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                    commandToReply \u003d CommandHandler.handleCommand(Constants.Command.REMOVE_TASK, packet);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                case \"save\":"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                    commandToReply \u003d CommandHandler.handleCommand(Constants.Command.SAVE_FILE, packet);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                case \"load\":"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                    commandToReply \u003d CommandHandler.handleCommand(Constants.Command.LOAD_FILE, packet);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                case \"saves\":"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                    commandToReply \u003d CommandHandler.handleCommand(Constants.Command.SHOW_SAVE_STATES);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                default:"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                    DukeException.printErrorMessage(Constants.Error.INVALID_COMMAND);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kaiwen98": 108
    }
  },
  {
    "path": "src/main/java/duke/dukehelper/SaveManager.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": " * Class that handles all file IO operations concerning save states of the program."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "package duke.dukehelper;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "import duke.taskhelper.ListTasks;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "import duke.taskhelper.Packet;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "import duke.taskhelper.TaskException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "import duke.tasks.Task;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "import java.io.FileReader;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "public class SaveManager extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    private String name \u003d \"\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    private String saveFolderPath \u003d Constants.DEFAULT_SAVE_PATH;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    public SaveManager(){"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "     * Use Stream method to evaluate existence of file in directory."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "     * @param fileName file name input by users"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "     * @return true if file exists in directory"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    public boolean isExistingFileName(String fileName){"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        return Arrays.stream(getSaveStateNames()).anyMatch(fileName::equals);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "     * Prints save states onto console in a list."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    public void printSaveStates(){"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        String output \u003d String.format(\"Save states in [%s]:\\n\", this.saveFolderPath);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        int i \u003d 0;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        for(String fileName : this.getSaveStateNames()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            i++;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            output +\u003d String.format(\"%d.\\t%s\\n\", i, fileName);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        System.out.println(output);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "     * Variant of printSaveStates()"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "     * @return save states onto console in a list in a string."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    public String getSaveStates(){"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        String output \u003d String.format(\"Save states in [%s]:\\n\", this.saveFolderPath);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        int i \u003d 0;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        for(String fileName : this.getSaveStateNames()) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            i++;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            output +\u003d String.format(\"%d.\\t%s\\n\", i, fileName);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        return output;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "     * Return total number"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "     * @return total number of save states in the particular directory"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    public int getNumSaveStates(){"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        File saveStatesFolder \u003d new File(this.saveFolderPath);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        File[] saveStates \u003d saveStatesFolder.listFiles();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        return saveStates.length;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "     * Get full file path of the specified file"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "     * @return string of the file path"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    public String getFilePath(){"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        return this.saveFolderPath + this.name + \"\\\\\";"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    public String getFileName(){"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        return this.name;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "     * Helper function, to consolidate names of save states for searching functions"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "     * @return String array of save state names in the particular directory"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    public String[] getSaveStateNames(){"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        File saveStatesFolder \u003d new File(this.saveFolderPath);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        File[] saveStates \u003d saveStatesFolder.listFiles();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        String[] saveStateNames \u003d new String[saveStates.length];"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        for (int i \u003d 0; i \u003c saveStates.length; i++){"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            saveStateNames[i] \u003d saveStates[i].getName();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        return saveStateNames;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "     * Formats the list in a particular way before outputting to .txt file"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "     * @param list"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "     * @return String of the formatted list"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    public String getAllTasksSaveToString(ListTasks list){"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        Task task;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        String output \u003d \"\";"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        for(int i \u003d 0; i \u003c list.getNumTasks(); i ++) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            task \u003d list.getTaskByIndex(i);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            output +\u003d String.format(\"| %s | %s | %s%s\","
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                    task.getTaskType(),"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                    task.getIsDone(),"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                    getTaskNameFormatted(task.getTaskName(), list.getMaxTaskNameLength()),"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                    getTypeMessageFormatted(task.getTypeMessage()));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            output +\u003d System.lineSeparator();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        return output;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "     * Ensures that the width occupied by the task name in the output text file is the same, hence it looks neater. Purely cosmetic in purpose."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "     * @param taskName"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "     * @param maxWidth With of the longest task name in the list for correct allocation of width sizes"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "     * @return String of task name left-adjusted in a char field of fixed width"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    public static String getTaskNameFormatted(String taskName, int maxWidth) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        return String.format(\"%s%s\", taskName, UiManager.returnLineWithSymbol(maxWidth - taskName.length(),\" \"));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    public static String getTypeMessageFormatted(String typeMessage) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        if (typeMessage.strip().length() !\u003d 0) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            return \" | \" + typeMessage;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            return \"\";"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "     * Function that performs the list-to-file conversion."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "     * @param list"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "     * @return error code where applicable."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    public Constants.Error saveToTxt(ListTasks list) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            if (this.error !\u003d Constants.Error.NO_ERROR){"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                throw new DukeException.ListSaveLoadFail();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            FileWriter fileWriter \u003d new FileWriter(this.saveFolderPath + this.name);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            fileWriter.write(getAllTasksSaveToString(list));"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            fileWriter.close();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        } catch (IOException | DukeException.ListSaveLoadFail exception) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            return Constants.Error.FILE_SAVE_FAIL;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        return this.error;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "     * Function that performs the file-to-list conversion."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "     * First, it will check whether the file exists in the specified directory."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "     * If found, then it will retrieve the file and convert to a list within the program with all information inherited."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "     * @param list"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "     * @return error code where applicable"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    public Constants.Error loadFromTxt(ListTasks list) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        char[] inputArray \u003d new char[1024];"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        String output \u003d null;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        String customErrorMessage \u003d \"\";"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            if (this.error !\u003d Constants.Error.NO_ERROR){"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                throw new DukeException.ListSaveLoadFail();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            if (!isExistingFileName(this.name)) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                throw new DukeException.FileNotFound();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            FileReader fileReader \u003d new FileReader(this.getFilePath());"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            fileReader.read(inputArray, 0, inputArray.length);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            fileReader.close();"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            output \u003d new String(inputArray);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            processSaveStateToString(output);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        } catch (IOException | DukeException.ListSaveLoadFail exception) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            return Constants.Error.FILE_LOAD_FAIL;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        } catch (DukeException.FileNotFound exception){"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            customErrorMessage \u003d this.getFilePath() + \"\\n\";"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            DukeException.printErrorMessage(Constants.Error.FILE_NOT_FOUND, customErrorMessage);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            this.printSaveStates();"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            return Constants.Error.FILE_LOAD_FAIL;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        return this.error;"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "     * Parameters handled by the command"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "     * /name - Name for the save state file to be saved locally."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "     * /dir - custom directory that is different from the default save directory."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "     * @param paramType"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "     * @return error code where applicable."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    protected Constants.Error handleParams(String paramType){"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        String token \u003d \"\";"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        switch(paramType){"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        case \"/name\":"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                if (((String) this.paramMap.get(paramType)).length() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                    throw new TaskException.IllegalParam();"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                token \u003d ((String) this.paramMap.get(paramType)).replace(\".txt\", \"\");"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                this.name \u003d String.format(\"%s.txt\", token);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            } catch (TaskException.IllegalParam exception){"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                String customErrorMessage \u003d String.format(\"Param %s is expecting 1 string argument: \""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                        + \"Name of file. Check your input.\\n\", paramType);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                DukeException.printErrorMessage(Constants.Error.WRONG_ARGUMENTS, customErrorMessage);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                return Constants.Error.WRONG_ARGUMENTS;"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        case \"/dir\":"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            this.saveFolderPath \u003d (String) this.paramMap.get(paramType);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            String customErrorMessage \u003d String.format(\"The parameter type %s is not implemented.\\n\", paramType);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            DukeException.printErrorMessage(Constants.Error.WRONG_ARGUMENTS, customErrorMessage);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            return Constants.Error.WRONG_ARGUMENTS;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        return Constants.Error.NO_ERROR;"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "     * From a string extracted from a given text file, parse the string to consolidate information in a packet class"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "     * Then, input the packet instance into handleCommand such that each task is added into the local list"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "     * Note that a boolean value \u003d false is passed into handleCommand. This is to turn off the verbosity of the command,"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "     * Hence it will not spam the user while the tasks are extracted and added into the list."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "     * @param saveState"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    public void processSaveStateToString(String saveState){"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        Packet packet;"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        saveState \u003d saveState.trim();"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        String[] tokens \u003d saveState.split(\"\\r\\n\");"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        String[] buffer;"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        String[] paramBuffer;"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        Constants.Command command \u003d null;"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        for (String token: tokens) {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            token \u003d token.replace(\"|\", \";\").replaceFirst(\";\", \"\\0\");"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            buffer \u003d token.split(\";\");"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            for (int i \u003d 0; i \u003c buffer.length; i ++){"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                buffer[i] \u003d buffer[i].trim();"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            command \u003d (buffer[0].equals(\"D\")) ? Constants.Command.INSERT_TASK_DEADLINE :"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                      (buffer[0].equals(\"T\")) ? Constants.Command.INSERT_TASK_TODO :"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                      (buffer[0].equals(\"E\")) ? Constants.Command.INSERT_TASK_EVENT : null;"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            buffer[0] \u003d (buffer[0].equals(\"D\")) ? \"deadline\" :"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                        (buffer[0].equals(\"T\")) ? \"todo\" :"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                        (buffer[0].equals(\"E\")) ? \"event\" : \"\";"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            packet \u003d new Packet(buffer[0], buffer[2].strip(), \"From load\");"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            packet.addParamToMap(\"/done\", buffer[1]);"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            if (buffer.length \u003d\u003d 4) {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                paramBuffer \u003d buffer[3].replace(\":\", \";\").split(\";\");"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                packet.addParamToMap(\"/\" + paramBuffer[0].trim(), paramBuffer[1].trim());"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            }"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            CommandHandler.handleCommand(command, packet, false, false);"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kaiwen98": 265
    }
  },
  {
    "path": "src/main/java/duke/dukehelper/UiManager.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": " * Class handling all possible console outputs."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "package duke.dukehelper;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "import duke.taskhelper.ListTasks;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "import duke.tasks.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "public class UiManager {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    public static final String MESSAGE_LOGO \u003d \"Hello from\\n\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            + \"____        _        \\n\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            + \"|  _ \\\\ _   _| | _____ \\n\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            + \"| | | | | | | |/ / _ \\\\\\n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            + \"| |_| | |_| |   \u003c  __/\\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\\n\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            + \"........................................ROFL:ROFL:ROFL:ROFL:ROFL:ROFL\\n\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            + \"..................................................___|___.........\\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            + \"...........................................L..../.......[`\\\\........\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            + \"..........................................LOL\u003d\u003d\u003d........[__|.......\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            + \"...........................................L....\\\\.8\u003d\u003d\u003d\u003d\u003d\u003dD..|.......\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            + \".................................................\\\\\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d/.......\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            + \"...................................................|...|...........\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            + \"..................................................\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d/........\\n\\n\\n\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    public static final String MESSAGE_HELLO \u003d \"Hello! I\u0027m Duke.\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            + \"\\nType \\\"command\\\" to check available commands to try out!\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            + \"\\nWhat can I do for you?\\n\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    public static final String MESSAGE_BYE \u003d \"Bye. Hope to see you again soon!\\n\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    public static final String MESSAGE_COMMAND_LIST \u003d \"\\nThese are implemented commands that you can use.\\n\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            + \"\\n1. bye\\n\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            + \"\\t\u003c Exit the program \u003e\\n\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            + \"\\n2. list\\n\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            + \"\\t\u003c Show full list of appended tasks \u003e\\n\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            + \"\\n3. commands\\n\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            + \"\\t\u003c Show full list of commands \u003e\\n\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            + \"\\n4. done \u003cinteger\u003e\\n\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            + \"\\t\u003c Mark a task by number \u003cinteger\u003e as done. \u003e\\n\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            + \"\\t@ \u003cinteger\u003e:\\t Task number on the list. Out-of-bounds and negative inputs are not allowed.\\n\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            + \"\\n5. todo \u003cstring\u003e\\n\""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            + \"\\t\u003c Will be interpreted as input tasks. Input task will then be added to the list. \u003e\\n \""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            + \"\\t\u003c!\u003e Tasks added this way are assumed to not be done and recorded accordingly.\\n\""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            + \"\\n6. event \u003cstring\u003e \u003cparameter type\u003e \u003cparameter 1\u003e \u003cparameter 2\u003e\\n\""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            + \"\\t\u003c Add a task which is happening in the future with specific date and time \u003e\\n \""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            + \"\\t@ \u003cstring\u003e:\\t Task name.\\n\""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            + \"\\t@ \u003cparameter type\u003e:\\t /at\\n\""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            + \"\\t\\t# \u003cparameter 1\u003e:\\t Date\\n\""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            + \"\\t\\t# \u003cparameter 2\u003e:\\t Time from start to end, no spaces\\n\""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            + \"\\n7. deadline \u003cstring\u003e \u003cparameter type\u003e \u003cparameter 1\u003e\\n\""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            + \"\\t\u003c Add a task with a specific deadline\u003e \\n \""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            + \"\\t@ \u003cstring\u003e:\\t Task name.\\n\""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            + \"\\t@ \u003cparameter type\u003e:\\t /by\\n\""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            + \"\\t\\t# \u003cparameter 1\u003e:\\t Date w/o time\\n\""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            + \"\\n8. remove \u003cinteger\u003e\\n\""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            + \"\\t\u003c Remove task by number \u003cinteger\u003e from list. \u003e\\n\""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            + \"   @ \u003cinteger\u003e:\\t Task number on the list. Out-of-bounds and negative inputs are not allowed.\\n\""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            + \"\\n9. save \u003cparameter type 1\u003e \u003cparameter 1\u003e \u003cparameter type 2\u003e \u003cparameter 1\u003e\\n\""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            + \"\\t\u003c Saves current task to local disk. A default folder is: \u003e\\n\""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            + \"\\t[\" + Constants.DEFAULT_SAVE_PATH + \"]\\n\""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            + \"\\t@ \u003cparameter type 1\u003e:\\t /name\\n\""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            + \"\\t\\t# \u003cparameter 1\u003e:\\t File name, with or without extension. Only .txt files accepted.\\n\""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            + \"\\t@ \u003cparameter type 2\u003e:\\t /dir\\n\""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            + \"\\t\\t# \u003cparameter 1\u003e:\\t Specify a custom save folder path.\\n\""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            + \"\\n10. load \u003cparameter type 1\u003e \u003cparameter 1\u003e \u003cparameter type 2\u003e \u003cparameter 1\u003e\\n\""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            + \"\\t\u003c Loads saved task from local disk. A default folder is: \u003e\\n\""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            + \"\\t[\" + Constants.DEFAULT_SAVE_PATH + \"]\\n\""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            + \"\\t@ \u003cparameter type 1\u003e:\\t /name\\n\""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            + \"\\t\\t# \u003cparameter 1\u003e:\\t File name, with or without extension. Only .txt files accepted.\\n\""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            + \"\\t@ \u003cparameter type 2\u003e:\\t /dir\\n\""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            + \"\\t\\t# \u003cparameter 1\u003e:\\t Specify a custom save folder path.\\n\""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            + \"\\n11. saves\\n\""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            + \"\\t\u003c Show full list of save states in default directory \u003e\\n\";"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    public static String getMessageTaskAdded(Task task){"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        return String.format(\"Got it! I\u0027ve added this task:\\n  %s\\n\", task);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    public static String getMessageReportNumTasks(ListTasks list){"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        char isS \u003d list.getNumTasks() \u003e 1? \u0027s\u0027:0;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        return String.format(\"Now, you have %d task%c in the list.\\n\", list.getNumTasks(),isS);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    public static String getMessageTaskMarkAsDone(Task outputTask){"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        return String.format(\"Nice! I\u0027ve marked this task as done:\\n  %s\\n\", outputTask);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    public static String getMessageTaskRemove(Task outputTask){"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        return String.format(\"Noted! I\u0027ve removed this task:\\n  %s\\n\", outputTask);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    public static String getMessageListSaved(ListTasks list){"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        return String.format(\"Noted! I\u0027ve saved the list to the following directory: [%s]\\n\\n\", Constants.DEFAULT_SAVE_PATH)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                + list.showAllTasks();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    public static String getMessageListLoaded(ListTasks list){"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        return String.format(\"Noted! I\u0027ve loaded the list from the following directory: [%s]\\n\\n\", Constants.DEFAULT_SAVE_PATH)"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                + list.showAllTasks();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    public static String returnLineWithSymbol(int width, String symbol){"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        return new String(new char[width]).replace(\"\\0\", symbol);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    public static void printLineWithSymbol(int width, String symbol){"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        System.out.println(returnLineWithSymbol(width, symbol));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    public static void drawPartition(){"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        printLineWithSymbol(Constants.MAX_PARTITION_LINE_LEN, \"_\");"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kaiwen98": 118
    }
  },
  {
    "path": "src/main/java/duke/taskhelper/ListTasks.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": " * Class to collate all the tasks added."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "package duke.taskhelper;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "import duke.dukehelper.Constants;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "import duke.dukehelper.DukeException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "import duke.tasks.Task;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "public class ListTasks {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    private ArrayList\u003cTask\u003e tasks;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    private int numTasks;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    private int maxTaskNameLength \u003d 0;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    private Task deletedTask \u003d null;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "     * Non-parameterized class constructor"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    public ListTasks(){"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        this.tasks \u003d new ArrayList\u003cTask\u003e();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        this.numTasks \u003d 0;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "     * Retrieves task instance by index on the task array."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "     * @param index Number on the task array"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "     * @return Corresponding task instance."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    public Task getTaskByIndex(int index){"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        return tasks.get(index);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    public int getNumTasks(){"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        return this.numTasks;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    public int getMaxTaskNameLength(){"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        return this.maxTaskNameLength;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    public Task getDeletedTask(){"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        return this.deletedTask;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "     * Append new tasks into the list."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "     * @param newTask Task that is created beforehand via a separate process."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    public Constants.Error addTask(Task newTask){"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        if (newTask.error !\u003d Constants.Error.NO_ERROR){"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            return newTask.error;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        this.tasks.add(newTask);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        this.numTasks++;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        if (newTask.getTaskName().length() \u003e this.maxTaskNameLength){"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            this.maxTaskNameLength \u003d newTask.getTaskName().length();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        return Constants.Error.NO_ERROR;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "     * Mark a specific task as done."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "     * @param taskIndex index of the task on the task array."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "     * @return Error code"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    public Constants.Error markTaskAsDone(int taskIndex){"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        String customErrorMessage \u003d \"\";"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            if (this.tasks.get(taskIndex).getIsDoneBool()) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                throw new DukeException.TaskAlreadyDone();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            this.tasks.get(taskIndex).setIsDone(true);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        } catch (DukeException.TaskAlreadyDone exception) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            customErrorMessage \u003d \"Task is already done!\\n\";"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            DukeException.printErrorMessage(Constants.Error.WRONG_ARGUMENTS, customErrorMessage);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            return Constants.Error.WRONG_ARGUMENTS;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        } catch (IndexOutOfBoundsException exception) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            if (this.getNumTasks() \u003e 1) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                customErrorMessage \u003d \"Your list number ranges from 1 to\";"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                customErrorMessage +\u003d String.format(\" %d. Please check your input list number.\\n\", this.getNumTasks());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            } else if (this.getNumTasks() \u003d\u003d 1) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                customErrorMessage \u003d \"There is only 1 task in your list.\\n\";"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                customErrorMessage \u003d \"Somehow, the list has negative number of tasks.\\n\";"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            DukeException.printErrorMessage(Constants.Error.WRONG_ARGUMENTS, customErrorMessage);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            return Constants.Error.WRONG_ARGUMENTS;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        } catch (NumberFormatException exception) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            customErrorMessage \u003d \"Non-numeric inputs are not acceptable.\\n\";"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            DukeException.printErrorMessage(Constants.Error.WRONG_ARGUMENTS, customErrorMessage);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            return Constants.Error.WRONG_ARGUMENTS;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        return Constants.Error.NO_ERROR;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "     * Removes task from list"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "     * @param taskIndex index of task"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "     * @return error where applicable"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    public Constants.Error removeTask(int taskIndex){"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        String customErrorMessage \u003d \"\";"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        try{"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            this.deletedTask \u003d this.tasks.get(taskIndex);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            this.tasks.remove(taskIndex);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            this.numTasks--;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        } catch (IndexOutOfBoundsException exception) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            if (this.getNumTasks() \u003e 1) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                customErrorMessage \u003d \"Your list number ranges from 1 to\";"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                customErrorMessage +\u003d String.format(\" %d. Please check your input list number.\\n\", this.getNumTasks());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            } else if (this.getNumTasks() \u003d\u003d 1) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                customErrorMessage \u003d \"There is only 1 task in your list.\\n\";"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                customErrorMessage \u003d \"Somehow, the list has negative number of tasks.\\n\";"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            DukeException.printErrorMessage(Constants.Error.WRONG_ARGUMENTS, customErrorMessage);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            return Constants.Error.WRONG_ARGUMENTS;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        } catch (NumberFormatException exception) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            customErrorMessage \u003d \"Non-numeric inputs are not acceptable.\\n\";"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            DukeException.printErrorMessage(Constants.Error.WRONG_ARGUMENTS, customErrorMessage);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            return Constants.Error.WRONG_ARGUMENTS;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        return Constants.Error.NO_ERROR;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    public void removeAllTasks(){"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        for (int i \u003d 0; i \u003c this.getNumTasks(); i++) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            this.removeTask(1);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "     * Prints the contents of the list, displaying also its number and whether it is completed."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "     * @return String representing the contents of the list"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    public String showAllTasks(){"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        String output \u003d \"\";"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        String index \u003d \"\";"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        for (int i \u003d 0; i \u003c this.numTasks; i++){"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            index \u003d Integer.toString(i+1);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            output +\u003d String.format(\"%s.%s\\n\", index, this.tasks.get(i));"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        return output;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kaiwen98": 150
    }
  },
  {
    "path": "src/main/java/duke/taskhelper/Packet.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": " * Organises data from input string into distinct data types and structure."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": " * For scalability purposes, a hash table is implemented to map param type to its corresponding params."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": " */"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "package duke.taskhelper;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "import duke.dukehelper.*;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "import java.util.Hashtable;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "public class Packet {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    private String packetType;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    private String packetPayload;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    private Hashtable paramMap;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    private String rawInput;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    // Constructors"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    public Packet(String taskType, String taskName, String rawInput){"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        this.packetType \u003d taskType;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        this.packetPayload \u003d taskName;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        this.rawInput \u003d rawInput;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        this.paramMap \u003d new Hashtable();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    public Packet(String taskType, String rawInput){"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        this(taskType, null, rawInput);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    public String getRawInput(){"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        return this.rawInput;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    // Param type refers to /.* (eg. /a)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    // Param refers to string following the param type"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    public String getParam(String paramType){"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        if (!paramMap.containsKey(paramType)){"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            return (String) paramMap.get(paramType);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    public Set getParamTypes() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        return paramMap.keySet();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    public String getPacketType(){"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        return this.packetType;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    public String getPacketPayload(){"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        return this.packetPayload;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    public Hashtable getParamMap(){"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        return (Hashtable)this.paramMap.clone();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    public void setPacketPayload(String payload){"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        this.packetPayload \u003d (payload.equals(\"\") ? null : payload);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    public Constants.Error addParamToMap(String paramType, String paramString){"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        this.paramMap.put(paramType, paramString);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        return Constants.Error.NO_ERROR;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    public String toString(){"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        return String.format(\"[Packet for \u003c%s\u003e: %s, %s, %s\", this.rawInput, this.getPacketType(), this.getPacketPayload(), this.getParamMap());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kaiwen98": 64
    }
  },
  {
    "path": "src/main/java/duke/taskhelper/TaskException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": " * Class to handle all possible exceptions due to task creation"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "package duke.taskhelper;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "public class TaskException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    public static class IllegalParam extends Exception{"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kaiwen98": 9
    }
  },
  {
    "path": "src/main/java/duke/tasks/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": " * Sub-class of Task that takes in a date as deadline of task"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "package duke.tasks;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "import java.util.Hashtable;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "import duke.dukehelper.*;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "import duke.taskhelper.TaskException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "public class Deadline extends Task{"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    private String deadline;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    public Deadline(String taskName, Hashtable paramMap){"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        super(taskName, false, paramMap);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        this.taskType \u003d Task.TaskType.DEADLINE;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    protected Constants.Error handleParams(String paramType) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        String token \u003d \"\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        String customErrorMessage \u003d \"\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        switch(paramType){"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        case \"/by\":"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                if (((String) this.paramMap.get(paramType)).length() \u003d\u003d 0){"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                    throw new TaskException.IllegalParam();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                token \u003d (String) this.paramMap.get(paramType);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                this.deadline \u003d token;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                this.taskMessage[0] \u003d String.format(\"by: %s\", this.deadline);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            } catch (TaskException.IllegalParam exception){"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                customErrorMessage \u003d String.format(\"Param %s is expecting 1 string argument: \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                        + \"Deadline date. Check your input.\\n\", paramType);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                DukeException.printErrorMessage(Constants.Error.WRONG_ARGUMENTS, customErrorMessage);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                return Constants.Error.WRONG_ARGUMENTS;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        case \"/sorry\":"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            this.taskMessage[1] \u003d \"\u003c Sorry, the code is very extra. I\u0027m just trying to learn java. \u003e\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        case \"/done\":"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            boolean isDone;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            if (((String)this.paramMap.get(paramType)).equals(Constants.DONE_SYMBOL)){"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                isDone \u003d true;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            } else if (((String)this.paramMap.get(paramType)).equals(Constants.NOT_DONE_SYMBOL)){"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                isDone \u003d false;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                customErrorMessage \u003d \"Done symbol is not recognised from source file!\\n\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                DukeException.printErrorMessage(Constants.Error.WRONG_ARGUMENTS, customErrorMessage);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                return Constants.Error.WRONG_ARGUMENTS;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            this.setIsDone(isDone);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            customErrorMessage \u003d String.format(\"The parameter type %s is not implemented.\\n\", paramType);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            DukeException.printErrorMessage(Constants.Error.WRONG_ARGUMENTS, customErrorMessage);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            return Constants.Error.WRONG_ARGUMENTS;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        return Constants.Error.NO_ERROR;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "}"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "kaiwen98": 66
    }
  },
  {
    "path": "src/main/java/duke/tasks/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": " * A subclass of Task that takes in date and time when the event happens"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "package duke.tasks;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "import duke.dukehelper.*;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "import duke.taskhelper.TaskException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "import java.util.Hashtable;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "public class Event extends Task{"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    private String date;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    private String time;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    private String test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    // Constructor"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    public Event(String taskName, Hashtable paramMap){"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        super(taskName, false, paramMap);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        this.taskType \u003d TaskType.EVENT;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    // Checks for param type and corresponding param, and returns error if"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    // given param is not recognised."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    protected Constants.Error handleParams(String paramType) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        String[] token \u003d null;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        String customErrorMessage \u003d \"\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        switch(paramType){"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        case \"/at\":"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                if (((String) this.paramMap.get(paramType)).length() \u003d\u003d 0){"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                    throw new TaskException.IllegalParam();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                token \u003d ((String) this.paramMap.get(paramType)).split(\" \");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                this.date \u003d token[0];"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                this.time \u003d token[1];"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                super.taskMessage[0] \u003d String.format(\"at: %s %s\", this.date, this.time);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            } catch (ArrayIndexOutOfBoundsException | TaskException.IllegalParam exception){"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                customErrorMessage \u003d String.format(\"Param %s is expecting 2 string arguments: \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                        + \"Date and Time. Check your input.\\n\", paramType);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                DukeException.printErrorMessage(Constants.Error.WRONG_ARGUMENTS, customErrorMessage);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                return Constants.Error.WRONG_ARGUMENTS;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        case \"/sorry\":"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            super.taskMessage[1] \u003d \"\u003c Sorry, the code is very extra. I\u0027m just trying to learn java. \u003e\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        case \"/done\":"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            boolean isDone;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            if (((String)this.paramMap.get(paramType)).equals(Constants.DONE_SYMBOL)){"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                isDone \u003d true;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            } else if (((String)this.paramMap.get(paramType)).equals(Constants.NOT_DONE_SYMBOL)){"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                isDone \u003d false;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                customErrorMessage \u003d \"Done symbol is not recognised from source file!\\n\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                DukeException.printErrorMessage(Constants.Error.WRONG_ARGUMENTS, customErrorMessage);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                return Constants.Error.WRONG_ARGUMENTS;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            this.setIsDone(isDone);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            customErrorMessage \u003d String.format(\"The parameter type %s is not implemented.\\n\", paramType);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            DukeException.printErrorMessage(Constants.Error.WRONG_ARGUMENTS, customErrorMessage);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            return Constants.Error.WRONG_ARGUMENTS;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        return Constants.Error.NO_ERROR;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kaiwen98": 69
    }
  },
  {
    "path": "src/main/java/duke/tasks/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": " * Task class to encapsulate its features and methods."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": " * Acts as super class to ToDo, Event and Deadline classes."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": " */"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "package duke.tasks;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "import duke.dukehelper.Command;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "import duke.dukehelper.Constants;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "import java.util.Hashtable;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "public abstract class Task extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    protected String taskName;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    protected IsDone isDone;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    protected TaskType taskType;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    protected String[] taskMessage;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    enum TaskType {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        TODO(\"T\"),"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        DEADLINE(\"D\"),"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        EVENT(\"E\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        private String literal;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        TaskType(String literal) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            this.literal \u003d literal;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        public String toString() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            return this.literal;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    enum IsDone {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        DONE(Constants.DONE_SYMBOL, true),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        NOT_DONE(Constants.NOT_DONE_SYMBOL, false);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        private String literal;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        private boolean bool;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        IsDone(String literal, boolean bool) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            this.literal \u003d literal;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            this.bool \u003d bool;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        public String toString() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            return this.literal;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        public boolean toBoolean() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            return bool;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    // Constructor"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    public Task(String taskName, boolean isDone, Hashtable paramMap) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        this.taskName \u003d taskName;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        this.setIsDone(isDone);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        this.taskMessage \u003d new String[Constants.MAX_ARRAY_LEN];"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        Arrays.fill(this.taskMessage, \"\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        if (paramMap !\u003d null) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            this.setParamMap(paramMap);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    public Task(String taskName) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        this(taskName, false, null);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    public String getTaskName() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        return this.taskName;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    public String getTaskType() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        return String.format(\"%s\", this.taskType);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    public String getIsDone() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        return String.format(\"%s\", this.isDone);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    public boolean getIsDoneBool() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        return this.isDone.toBoolean();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    public String getTypeMessage() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        return String.join(\" \", this.taskMessage);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    public void setIsDone(boolean isDone) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        this.isDone \u003d (isDone) ? IsDone.DONE : IsDone.NOT_DONE;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    public String toString(){"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        String output \u003d \"\";"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        output \u003d String.format(\"[%s][%s] %s\", this.taskType, this.isDone, this.taskName);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        if ((this.getTypeMessage().strip()).length() !\u003d 0){"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            output +\u003d String.format(\" (%s)\", this.getTypeMessage().strip());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        return output;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kaiwen98": 108
    }
  },
  {
    "path": "src/main/java/duke/tasks/ToDo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": " * Subclass of Task."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "package duke.tasks;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "import duke.dukehelper.Constants;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "import duke.dukehelper.DukeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "public class ToDo extends Task{"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    public ToDo(String taskName){"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        super(taskName);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        super.taskType \u003d Task.TaskType.TODO;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        this.error \u003d Constants.Error.NO_ERROR;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    protected Constants.Error handleParams(String paramType){"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        String customErrorMessage \u003d \"\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        switch(paramType){"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        case \"/done\":"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            boolean isDone;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            if (((String)this.paramMap.get(paramType)).equals(Constants.DONE_SYMBOL)){"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                isDone \u003d true;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            } else if (((String)this.paramMap.get(paramType)).equals(Constants.NOT_DONE_SYMBOL)){"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                isDone \u003d false;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                customErrorMessage \u003d \"Done symbol is not recognised from source file!\\n\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                DukeException.printErrorMessage(Constants.Error.WRONG_ARGUMENTS, customErrorMessage);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "                return Constants.Error.WRONG_ARGUMENTS;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            this.setIsDone(isDone);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            customErrorMessage \u003d String.format(\"The parameter type %s is not implemented.\\n\", paramType);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            DukeException.printErrorMessage(Constants.Error.WRONG_ARGUMENTS, customErrorMessage);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "            return Constants.Error.WRONG_ARGUMENTS;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "        return Constants.Error.NO_ERROR;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kaiwen98": 39
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "todo hello"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "deadline walk the dog /by monday 2-6pm"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "todo goodbye"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "deadline walk the cat /at monday"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "event"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "event party /at Monday"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "event party /at Monday 6-9pm"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "todo Eat the hotdog at the beach /pp"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "done 2"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "done 100"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "done -1"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "list"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "save /box"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "save /name test1"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "n"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "done 1"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "done 2"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "remove 4"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "list"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "load /donkey"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "load /name test1"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "y"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "save /name test2"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "y"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "saves"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "list"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "command"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "kaiwen98": 28
    }
  },
  {
    "path": "text-ui-test/outputconsole.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "@ECHO OFF"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "REM create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "if not exist ..\\bin mkdir ..\\bin"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "call ..\\..\\SwitchJava.bat"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "REM compile the code into the bin folder"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "javac  -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\main\\java\\*.java"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "IF ERRORLEVEL 1 ("
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    echo ********** BUILD FAILURE **********"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "    exit /b 1"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ")"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "REM no error here, errorlevel \u003d\u003d 0"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "java -classpath ..\\bin Duke true \u003c input.txt"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "kaiwen98": 15
    }
  },
  {
    "path": "text-ui-test/runtest.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@ECHO OFF"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "REM create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "if not exist ..\\bin mkdir ..\\bin"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "call ..\\..\\SwitchJava.bat"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "REM delete output from previous run"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "del ACTUAL.TXT"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "REM compile the code into the bin folder"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kaiwen98"
        },
        "content": "javac  -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\main\\java\\*.java"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "IF ERRORLEVEL 1 ("
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    echo ********** BUILD FAILURE **********"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    exit /b 1"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ")"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "REM no error here, errorlevel \u003d\u003d 0"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "java -classpath ..\\bin Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "REM compare the output to the expected output"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "FC ACTUAL.TXT EXPECTED.TXT"
      }
    ],
    "authorContributionMap": {
      "-": 19,
      "kaiwen98": 2
    }
  }
]
