[
  {
    "path": "README.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "# duke project template"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "This is a project template for a greenfield Java project. It\u0027s named after the Java mascot _Duke_. Given below are instructions on how to use it."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "## Setting up in Intellij"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "Prerequisites: JDK 11, update Intellij to the most recent version."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "1. Open Intellij (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "1. Set up the correct JDK version, as follows:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Click `Configure` \u003e `Structure for New Projects` and then `Project Settings` \u003e `Project` \u003e `Project SDK`"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "   1. If JDK 11 is listed in the drop down, select it. If it is not, click `New...` and select the directory where you installed JDK 11"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Click `OK`"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "1. Import the project into Intellij as follows:"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Click `Open or Import`."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Select the project directory, and click `OK`"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "   1. If there are any further prompts, accept the defaults."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "1. After the importing is complete, locate the `src/main/java/duke.java` file, right-click it, and choose `Run duke.main()`. If the setup is correct, you should see something like the below:"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "   Hello from"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    ____        _        "
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "   |  _ \\ _   _| | _____ "
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "   | | | | | | | |/ / _ \\"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "   | |_| | |_| |   \u003c  __/"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "   |____/ \\__,_|_|\\_\\___|"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      }
    ],
    "authorContributionMap": {
      "-": 24,
      "Lee-Juntong": 2
    }
  },
  {
    "path": "docs/README.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "Duke is __a desktop app for managing tasks,"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "optimized for use via a Command Line Interface__ (CLI). "
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "This application aims to help the user store tasks and trace the status of tasks."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "[**Quick Start**](#quick-start)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "\u003cbr\u003e[**Features**](#features) "
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "* [Adding Todo: `todo`](#adding-todo-todo)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "* [Adding Event: `event`](#adding-event-event)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "* [Adding Deadline: `deadline`](#adding-deadline-deadline)"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "* [Listing Tasks: `list`](#listing-tasks-list)"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "* [Finding Tasks: `find`](#finding-tasks-find)"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "* [Deleting Task: `delete`](#deleting-task-delete)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "* [Done Task: `done`](#done-task-done)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "* [Exit the Application: `bye`](#exit-the-application-bye)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "* [Find Tasks on Date: `date`](#find-tasks-on-date-date)  "
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "[**FAQ**](#faq)  "
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "[**Command Summary**](#command-summary)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": " "
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "---"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "### Quick Start"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "1. Ensure you have Java `11` or above installed in your Computer."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "1. Download the latest `DUKE.jar` from [here](https://github.com/Lee-Juntong/ip/releases/tag/v0.3)."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "1. Copy the file to the folder you want to use as the home folder for your *Duke*."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "1. Open the terminal in this folder. Type `java -jar Duke.jar` and press enter, to start this application."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "1. Type the command in the terminal and press Enter to execute it.   "
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    Some example commands you can try:   "
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    * `todo finish homework` : Adds a Todo \"finish homework\" to the task list."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    * `list` : Lists all tasks."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    * `find homework` : Prints all tasks having the keyword in the description"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    * `bye` : Exits the application."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "1. Refer to the [Features](#features) below for details of each command. "
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "   "
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "---"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "### Features"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "###### Notes about the command format:"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "* Words in `UPPER_CASE` are the parameters to be supplied by the user.  "
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "e.g. in todo `DESCRIPTION`, `DESCRIPTION` is a parameter which can be used as `todo do something`.  "
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "#### Adding Todo: `todo`"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "Adds a Todo to the task list.  "
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "**Format**: `todo DESCRIPTION`  "
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "Examples:  "
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "* `todo finish homework`"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": " "
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "#### Adding Event: `event`"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "Adds an Event to the task list.  "
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "**Format**: `event DESCRIPTION /at TIME`  "
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "Note the format for `TIME` should be `yyyy-MM-dd HH:mm`  "
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "For example, `2000-01-01 00:00`  "
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "Example:  "
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "* `event meeting /at 2020-10-01 13:00`"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "#### Adding Deadline: `deadline`"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "Adds a deadline to the task list.  "
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "**Format**: `deadline DESCRIPTION /by TIME`  "
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "Note the format for `TIME` should be `yyyy-MM-dd HH:mm`  "
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "For example, `2000-01-01 00:00`  "
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "Example:  "
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "* `deadline submitting homework /by 2020-10-01 23:59`"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "#### Listing Tasks: `list`"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "Prints all tasks in the list.  "
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "**Format**:`list`"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "#### Finding Tasks: `find`"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "Prints all tasks in the list that contains the keyword that the user want.  "
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "**Format**:`find KEYWORD`  "
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "Example:  "
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "* `find book`"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "#### Deleting Task: `delete`"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "Deletes the task with the given index.  "
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "**Format**:`delete INDEX`  "
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "Example:  "
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "* `delete 1`"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "#### Done Task: `done`"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "Marks the task with the given index as done.  "
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "**Format**:`done INDEX`  "
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "Example:  "
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "* `done 1`"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "#### Find Tasks on Date: `date`"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "Prints all tasks in the list that happens on a certain date.  "
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "**Format**:`date DATE`  "
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "Example:  "
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "* `date 2020-10-01`  "
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "#### Exit the Application: `bye`"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "Exits the application.  "
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "**Format**:`bye`  "
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "---"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "### FAQ"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "**Q**: How do I transfer my data to another Computer?  "
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "**A**: Install the app in the other computer and overwrite the data\\tasks.txt file it creates with the file that contains your previous data."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "  "
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "---"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "### Command Summary"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "  "
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "ACTION | FORMAT \u0026 EXAMPLE"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "--------------------------------|--------------------------------------------------------------"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "Add Todo | `todo DESCRIPTION`  e.g.`todo do something`"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "Add Event | `event DESCRIPTION /at TIME`   e.g.`event meeting /at 2020-10-01 13:00`"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "Add Deadline | `deadline DESCRIPTION /by TIME`   e.g.`deadline submitting homework /by 2020-10-01 23:59`"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "List Tasks | `list`"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "Find Task | `find KEYWORD`   e.g.`find book`"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "Delete Task | `delete INDEX`   e.g.`delete 1`"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "Done Task | `done INDEX`   e.g.`done 1`"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "Find Task on Date | `date DATE`   e.g.`date 2020-10-01`"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "Exit | `bye`"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "-": 14,
      "Lee-Juntong": 106
    }
  },
  {
    "path": "src/main/java/duke/Command/AddCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "package duke.Command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "import duke.Storage.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "import duke.TaskList.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "import duke.UI.UI;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "import duke.Exception.DukeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "import duke.Task.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": " * Represents the command call when the user adds some task."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    private final Task taskToBeAdded;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public AddCommand(Task taskToBeAdded) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        this.taskToBeAdded \u003d taskToBeAdded;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * Adds the task, and update the file."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @param tasks   the list of tasks"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @param ui      do outputs"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @param storage store the data"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @throws DukeException the exceptions can happen in this function, to be handled based on the specific exception"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public void execute(TaskList tasks, UI ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        tasks.addTask(taskToBeAdded);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        ui.printAddTaskMessage(taskToBeAdded);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        ui.printNumTask(tasks.size());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        storage.writeFile(tasks.getTaskList());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Lee-Juntong": 35
    }
  },
  {
    "path": "src/main/java/duke/Command/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "package duke.Command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "import duke.Storage.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "import duke.TaskList.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "import duke.UI.UI;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "import duke.Exception.DukeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": " * Represents the command to be executed."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    protected boolean isExit \u003d false;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * Execute the command based on the specific command type."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @param tasks   the list of tasks"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @param ui      do outputs"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @param storage store the data"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @throws DukeException the exceptions can happen in this program, to be handled based on the specific exception"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public abstract void execute(TaskList tasks, UI ui, Storage storage) throws DukeException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        return isExit;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Lee-Juntong": 27
    }
  },
  {
    "path": "src/main/java/duke/Command/DeleteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "package duke.Command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "import duke.Storage.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "import duke.TaskList.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "import duke.UI.UI;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "import duke.Exception.DeleteUndefinedTaskException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "import duke.Exception.DukeException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": " * Represents the command call when the user deletes some task."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    private final int taskIndex;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public DeleteCommand(int taskIndex) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        this.taskIndex \u003d taskIndex;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * Delete the task, and update the file."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @param tasks   the list of tasks"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @param ui      do outputs"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @param storage store the data"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @throws DukeException the exceptions can happen in this function, to be handled based on the specific exception"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public void execute(TaskList tasks, UI ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        if (taskIndex \u003c\u003d -1 || taskIndex \u003e\u003d tasks.size()) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "            throw new DeleteUndefinedTaskException(taskIndex + 1);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        ui.printDeleteMessage(tasks.get(taskIndex));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        tasks.remove(taskIndex);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        ui.printNumTask(tasks.size());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        storage.writeFile(tasks.getTaskList());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Lee-Juntong": 37
    }
  },
  {
    "path": "src/main/java/duke/Command/DoneCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "package duke.Command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "import duke.Storage.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "import duke.TaskList.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "import duke.UI.UI;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "import duke.Exception.DoneUndefinedTaskException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "import duke.Exception.DukeException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": " * Represents the command call when the user mark a task as done."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "public class DoneCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    private final int taskIndex;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public DoneCommand(int taskIndex) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        this.taskIndex \u003d taskIndex;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * Mark the task as done, and update the file."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @param tasks   the list of tasks"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @param ui      do outputs"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @param storage store the data"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @throws DukeException the exceptions can happen in this function, to be handled based on the specific exception"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public void execute(TaskList tasks, UI ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        if (taskIndex \u003c\u003d -1 || taskIndex \u003e\u003d tasks.size()) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "            throw new DoneUndefinedTaskException(taskIndex + 1);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        tasks.doneTask(taskIndex);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        ui.printDoneMessage(tasks.get(taskIndex));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        storage.writeFile(tasks.getTaskList());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Lee-Juntong": 36
    }
  },
  {
    "path": "src/main/java/duke/Command/ExitCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "package duke.Command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "import duke.Storage.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "import duke.TaskList.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "import duke.UI.UI;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "import duke.Exception.DukeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": " * Represents the command call when the user exits this program."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * Mark the status of the program, isExit, as true."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * Also prints the exit message."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @param tasks   the list of tasks"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @param ui      do outputs"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @param storage store the data"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @throws DukeException the exceptions can happen in this function, to be handled based on the specific exception"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public void execute(TaskList tasks, UI ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        isExit \u003d true;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        ui.printExitMessage();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Lee-Juntong": 27
    }
  },
  {
    "path": "src/main/java/duke/Command/FindCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "package duke.Command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "import duke.Storage.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "import duke.TaskList.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "import duke.UI.UI;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "import duke.Exception.DukeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "import duke.Exception.NoMatchingTaskException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "import duke.Task.Task;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": " * Represents the command call when the user want to find the tasks having a certain keyword."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    private final String filterString;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public FindCommand(String filterString) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        this.filterString \u003d filterString;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * Find the tasks having the keyword provided by the user, and print that filtered list."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @param tasks   the list of tasks"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @param ui      do outputs"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @param storage store the data"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @throws DukeException the exceptions can happen in this function, to be handled based on the specific exception"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public void execute(TaskList tasks, UI ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        ArrayList\u003cTask\u003e filteredTaskList \u003d tasks.filterWith(filterString);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        if (filteredTaskList.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "            throw new NoMatchingTaskException();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        ui.printFilteredTaskList(filteredTaskList);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Lee-Juntong": 38
    }
  },
  {
    "path": "src/main/java/duke/Command/FindDateCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "package duke.Command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "import duke.Storage.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "import duke.TaskList.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "import duke.UI.UI;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "import duke.Exception.DukeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "import duke.Exception.NoTaskDateException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "import duke.Task.Task;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": " * Represents the command call when the user want to find the tasks in certain date."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "public class FindDateCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    private final LocalDate date;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public FindDateCommand(LocalDate date) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * Execute the command based on the specific command type."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @param tasks   the list of tasks"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @param ui      do outputs"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @param storage store the data"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @throws DukeException the exceptions can happen in this program, to be handled based on the specific exception"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public void execute(TaskList tasks, UI ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        ArrayList\u003cTask\u003e filteredTaskList \u003d tasks.filterDateWith(date);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        if (filteredTaskList.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "            throw new NoTaskDateException();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        ui.printFilteredDateTaskList(filteredTaskList);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Lee-Juntong": 39
    }
  },
  {
    "path": "src/main/java/duke/Command/PrintFullListCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "package duke.Command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "import duke.Storage.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "import duke.TaskList.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "import duke.UI.UI;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "import duke.Exception.DukeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "public class PrintFullListCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * Prints the list of tasks."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @param tasks   the list of tasks"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @param ui      do outputs"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @param storage store the data"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @throws DukeException the exceptions can happen in this function, to be handled based on the specific exception"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public void execute(TaskList tasks, UI ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        ui.printTaskList(tasks.getTaskList());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Lee-Juntong": 22
    }
  },
  {
    "path": "src/main/java/duke/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "import duke.Command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "import duke.Parser.Parser;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "import duke.Storage.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "import duke.TaskList.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "import duke.UI.UI;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "import duke.Exception.CreatingFileException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "import duke.Exception.DukeException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": " * Entry point of the Duke application."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": " * Initializes the application and starts the interaction with the user."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    private TaskList tasks;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    private UI ui;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public Duke(String filePath) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        ui \u003d new UI();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "            storage \u003d new Storage(filePath);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        } catch (CreatingFileException e) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "            ui.showError(e.getMessage());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "            tasks \u003d new TaskList(storage.load());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "            ui.showLoadingError();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "            tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * Runs the program until termination."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public void run() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        ui.printGreetingMessage();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        boolean isExit \u003d false;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        while (!isExit) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                String fullCommand \u003d ui.readCommand();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                ui.printLine(); // show the divider line (\"_______\")"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                Command c \u003d Parser.parse(fullCommand);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                c.execute(tasks, ui, storage);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                isExit \u003d c.isExit();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "            } catch (DukeException e) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                ui.showError(e.getMessage());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "            } finally {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                ui.printLine();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        new Duke(\"data/tasks.txt\").run();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 4,
      "Lee-Juntong": 55
    }
  },
  {
    "path": "src/main/java/duke/Exception/CreatingFileException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "package duke.Exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": " * Represents the exception happen when the file is not created successfully."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "public class CreatingFileException extends DukeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    private final String filePath;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public CreatingFileException(String filePath) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * Prepare the message to be printed when this exception is experienced."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @return the error message"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public String getMessage() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        return \"The file \\\"\" + filePath + \"\\\" is not created\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Lee-Juntong": 21
    }
  },
  {
    "path": "src/main/java/duke/Exception/DateFormatException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "package duke.Exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": " * Represents the exception happens when the user trying to find the tasks on a certain date"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": " * but the date is not given in the correct format."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "public class DateFormatException extends DukeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * Prepare the message to be printed when this exception is experienced,"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * gives suggestion to the user on how to solve the error."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @return the message"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public String getMessage() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        return \"You entered the date in a format that is not accepted by this function.\\n\" +"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                \"The format should be \\\"yyyy-MM-dd\\\"\\n\" +"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                \"For example, 2000-01-01\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Lee-Juntong": 18
    }
  },
  {
    "path": "src/main/java/duke/Exception/DeadlineException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "package duke.Exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": " * Represents the exceptions related to Deadline class."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "public class DeadlineException extends InvalidCommandException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Lee-Juntong": 7
    }
  },
  {
    "path": "src/main/java/duke/Exception/DeleteException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "package duke.Exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": " * Represents the exceptions when performing delete."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "public class DeleteException extends InvalidCommandException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Lee-Juntong": 7
    }
  },
  {
    "path": "src/main/java/duke/Exception/DeleteNumberFormatException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "package duke.Exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": " * Represents the exceptions when performing delete to a task not labeled with an int."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "public class DeleteNumberFormatException extends DeleteException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * Prepare the message to be printed when this exception is experienced."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @return the error message"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public String getMessage() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        return \"Please enter an integer after delete.\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Lee-Juntong": 15
    }
  },
  {
    "path": "src/main/java/duke/Exception/DeleteUndefinedTaskException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "package duke.Exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": " * Represents the case when the the user trying to delete"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": " * some tasks that does not exist."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "public class DeleteUndefinedTaskException extends DeleteException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    private int label;//Task label of the task"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public DeleteUndefinedTaskException() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * Create an exception according to the input of the user."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @param label the label of the task that the user want to delete"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public DeleteUndefinedTaskException(int label) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        this.label \u003d label;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * Prepare the message to be printed when this exception is experienced."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @return the error message"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public String getMessage() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        return \"☹ OOPS!!! There isn\u0027t a task labeled \" + label;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Lee-Juntong": 31
    }
  },
  {
    "path": "src/main/java/duke/Exception/DoneException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "package duke.Exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": " * Represents the exceptions when performing done."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "public class DoneException extends InvalidCommandException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Lee-Juntong": 7
    }
  },
  {
    "path": "src/main/java/duke/Exception/DoneNumberFormatException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "package duke.Exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": " * Represents the exceptions when performing done to a task not labeled with an int."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "public class DoneNumberFormatException extends DoneException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * Prepare the message to be printed when this exception is experienced."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @return the error message"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public String getMessage() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        return \"Please enter an integer after done.\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Lee-Juntong": 15
    }
  },
  {
    "path": "src/main/java/duke/Exception/DoneUndefinedTaskException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "package duke.Exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": " * Represents the case when the the user trying to done"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": " * some tasks that does not exist."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "public class DoneUndefinedTaskException extends DoneException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    private int label;//Task label of the task"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public DoneUndefinedTaskException() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * Create an exception according to the input of the user."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @param label the label of the task that the user want to mark as done"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public DoneUndefinedTaskException(int label) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        this.label \u003d label;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * Prepare the message to be printed when this exception is experienced."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @return the error message"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public String getMessage() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        return \"☹ OOPS!!! There isn\u0027t a task labeled \" + label;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Lee-Juntong": 31
    }
  },
  {
    "path": "src/main/java/duke/Exception/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "package duke.Exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": " * Represents all exceptions that may happen in this project"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": " * that should be handled in UI."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * Prepare the message to be printed when the exception is experienced."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * Generally, DukeException should not be thrown in this program."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @return the message"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public String getMessage() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        return \"There is an unexpected error.\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Lee-Juntong": 18
    }
  },
  {
    "path": "src/main/java/duke/Exception/EmptyDeadlineException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "package duke.Exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": " * Represents the case when the user want to create an empty Deadline."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "public class EmptyDeadlineException extends DeadlineException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * Prepare the message to be printed when this exception is experienced."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @return the message"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public String getMessage() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        return \"☹ OOPS!!! The description of a deadline cannot be empty.\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Lee-Juntong": 15
    }
  },
  {
    "path": "src/main/java/duke/Exception/EmptyDeleteException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "package duke.Exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": " * Represents the case when the user types delete but do not specify"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": " * the task that should be deleted."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "public class EmptyDeleteException extends DeleteException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * Prepare the message to be printed when this exception is experienced."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @return the message"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public String getMessage() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        return \"☹ OOPS!!! You should enter the index of the task you want to delete.\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Lee-Juntong": 16
    }
  },
  {
    "path": "src/main/java/duke/Exception/EmptyDoneException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "package duke.Exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": " * Represents the case when the user types done but do not specify"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": " * the task that should be done."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "public class EmptyDoneException extends DoneException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * Prepare the message to be printed when this exception is experienced."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @return the message"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public String getMessage() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        return \"☹ OOPS!!! You should enter the index of the task you have done.\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Lee-Juntong": 16
    }
  },
  {
    "path": "src/main/java/duke/Exception/EmptyEventException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "package duke.Exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": " * Represents the case when the user want to create an empty Event."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "public class EmptyEventException extends EventException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * Prepare the message to be printed when this exception is experienced."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @return the message"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public String getMessage() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        return \"☹ OOPS!!! The description of an event cannot be empty.\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Lee-Juntong": 15
    }
  },
  {
    "path": "src/main/java/duke/Exception/EmptyFindDateException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "package duke.Exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": " * Represents the case when the user types date but do not specify"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": " * the date."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "public class EmptyFindDateException extends DukeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * Prepare the message to be printed when this exception is experienced."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @return the message"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public String getMessage() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        return \"☹ OOPS!!! You should enter the date you are looking for.\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Lee-Juntong": 15
    }
  },
  {
    "path": "src/main/java/duke/Exception/EmptyFindException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "package duke.Exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": " * Represents the case when the user types find but do not specify"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": " * the keyword."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "public class EmptyFindException extends DukeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * Prepare the message to be printed when this exception is experienced."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @return the message"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public String getMessage() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        return \"☹ OOPS!!! You should enter the keyword of the tasks you want to find.\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Lee-Juntong": 16
    }
  },
  {
    "path": "src/main/java/duke/Exception/EmptyTodoException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "package duke.Exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": " * Represents the case when the user want to create an empty Todo."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "public class EmptyTodoException extends TodoException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * Prepare the message to be printed when this exception is experienced."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @return the message"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public String getMessage() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        return \"☹ OOPS!!! The description of a todo cannot be empty.\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Lee-Juntong": 15
    }
  },
  {
    "path": "src/main/java/duke/Exception/EventException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "package duke.Exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": " * Represents the exceptions related to Event class."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "public class EventException extends InvalidCommandException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Lee-Juntong": 7
    }
  },
  {
    "path": "src/main/java/duke/Exception/InvalidCommandException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "package duke.Exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": " * Represents the exceptions happen when the user input invalid command."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "public class InvalidCommandException extends DukeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Lee-Juntong": 7
    }
  },
  {
    "path": "src/main/java/duke/Exception/LoadingException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "package duke.Exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": " * Represents the exception when the user edit the file in a wrong way."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "public class LoadingException extends DukeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * Prepare the message to be printed when this exception is experienced."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @return the message"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public String getMessage() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        return \"You edit the file in a wrong format. Please check.\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Lee-Juntong": 15
    }
  },
  {
    "path": "src/main/java/duke/Exception/NoDeadlineTimeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "package duke.Exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": " * Represents the exception happens when the user trying to create a Deadline"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": " * without giving it a time."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "public class NoDeadlineTimeException extends DeadlineException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * Prepare the message to be printed when this exception is experienced."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @return the message"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public String getMessage() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        return \"☹ OOPS!!! You should enter a time for deadline.\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Lee-Juntong": 16
    }
  },
  {
    "path": "src/main/java/duke/Exception/NoDeadlineTimeMarkerException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "package duke.Exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": " * Represents the exception happens when the user trying to create a Deadline"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": " * without using \\by to give it a time."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "public class NoDeadlineTimeMarkerException extends DeadlineException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * Prepare the message to be printed when this exception is experienced."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @return the message"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public String getMessage() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        return \"☹ OOPS!!! You should mark the time for a deadline with \\\"/by\\\"\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Lee-Juntong": 16
    }
  },
  {
    "path": "src/main/java/duke/Exception/NoEventTimeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "package duke.Exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": " * Represents the exception happens when the user trying to create an Event"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": " * without giving it a time."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "public class NoEventTimeException extends EventException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * Prepare the message to be printed when this exception is experienced."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @return the message"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public String getMessage() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        return \"☹ OOPS!!! You should enter a time for event.\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Lee-Juntong": 16
    }
  },
  {
    "path": "src/main/java/duke/Exception/NoEventTimeMakerException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "package duke.Exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": " * Represents the exception happens when the user trying to create an Event"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": " * without using \\by to give it a time."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "public class NoEventTimeMakerException extends EventException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * Prepare the message to be printed when this exception is experienced."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @return the message"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public String getMessage() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        return \"☹ OOPS!!! You should mark the time for an event with \\\"/at\\\"\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Lee-Juntong": 16
    }
  },
  {
    "path": "src/main/java/duke/Exception/NoMatchingTaskException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "package duke.Exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": " * Represents the exception happens when the user trying to find a Task with a certain keyword, but such"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": " * task does not exist in the list."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "public class NoMatchingTaskException extends DukeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * Prepare the message to be printed when this exception is experienced."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @return the message"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public String getMessage() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        return \"Sorry, there isn\u0027t such task in the list with the given keyword.\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Lee-Juntong": 16
    }
  },
  {
    "path": "src/main/java/duke/Exception/NoTaskDateException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "package duke.Exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": " * Represents the exception happens when the user trying to find a Task with a certain date, but such"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": " * task does not exist in the list."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "public class NoTaskDateException extends DukeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * Prepare the message to be printed when this exception is experienced."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @return the message"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public String getMessage() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        return \"Sorry, there isn\u0027t such task in the list on the given date.\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Lee-Juntong": 15
    }
  },
  {
    "path": "src/main/java/duke/Exception/TimeFormatException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "package duke.Exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": " * Represents the exception happens when the user trying to create an Event or a Deadline"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": " * but the time is not given in the correct format."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "public class TimeFormatException extends DukeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * Prepare the message to be printed when this exception is experienced,"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * gives suggestion to the user on how to solve the error."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @return the message"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public String getMessage() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        return \"You entered the time in a format that is not accepted by this program.\\n\" +"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                \"The format should be \\\"yyyy-MM-dd HH:mm\\\"\\n\" +"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                \"For example, 2000-01-01 00:00\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Lee-Juntong": 19
    }
  },
  {
    "path": "src/main/java/duke/Exception/TodoException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "package duke.Exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": " * Represents the exceptions related to Todo class."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "public class TodoException extends InvalidCommandException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Lee-Juntong": 7
    }
  },
  {
    "path": "src/main/java/duke/Exception/WritingFileException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "package duke.Exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": " * Represents the exception when the file is not correctly written."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "public class WritingFileException extends DukeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * Prepare the message to be printed when this exception is experienced."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @return the message"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public String getMessage() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        return \"something went wrong when writing to file\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Lee-Juntong": 15
    }
  },
  {
    "path": "src/main/java/duke/Exception/WrongCommandException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "package duke.Exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": " * Represents the exception when the user types something meaningless."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "public class WrongCommandException extends InvalidCommandException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * Prepare the message to be printed when this exception is experienced."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @return the message"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public String getMessage() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        return \"☹ OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Lee-Juntong": 15
    }
  },
  {
    "path": "src/main/java/duke/Parser/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "package duke.Parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "import duke.Command.AddCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "import duke.Command.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "import duke.Command.DeleteCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "import duke.Command.DoneCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "import duke.Command.ExitCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "import duke.Command.FindCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "import duke.Command.FindDateCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "import duke.Command.PrintFullListCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "import duke.Exception.DateFormatException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "import duke.Exception.DeleteNumberFormatException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "import duke.Exception.DoneNumberFormatException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "import duke.Exception.DukeException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "import duke.Exception.EmptyDeadlineException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "import duke.Exception.EmptyDeleteException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "import duke.Exception.EmptyDoneException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "import duke.Exception.EmptyEventException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "import duke.Exception.EmptyFindDateException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "import duke.Exception.EmptyFindException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "import duke.Exception.EmptyTodoException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "import duke.Exception.NoDeadlineTimeException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "import duke.Exception.NoDeadlineTimeMarkerException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "import duke.Exception.NoEventTimeException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "import duke.Exception.NoEventTimeMakerException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "import duke.Exception.TimeFormatException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "import duke.Exception.WrongCommandException;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "import duke.Task.Deadline;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "import duke.Task.Event;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "import duke.Task.Todo;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": " * This class contains one function -- parse, to call the respective command function according to the user input."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": " */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "public abstract class Parser {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public static final String EXIT \u003d \"bye\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public static final String PRINT_TASK_LIST \u003d \"list\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public static final String TASK_DONE \u003d \"done\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public static final String ADD_EVENT \u003d \"event\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public static final String ADD_DEADLINE \u003d \"deadline\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public static final String ADD_TODO \u003d \"todo\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public static final String TASK_DELETE \u003d \"delete\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public static final String TASK_FIND \u003d \"find\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public static final String BY \u003d \"/by\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public static final String SINGLE_SPACE \u003d \" \";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public static final String AT \u003d \"/at\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    private static final String TASK_FIND_DATE \u003d \"date\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * This function calls the correct command the user want to perform, by returning a \u003c\\code\u003eCommand\u003c/\\code\u003e object."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @param fullCommand the full string of user input"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @return the specific \u003c\\code\u003eCommand\u003c/\\code\u003e object to perform what the user want to do"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @throws DukeException includes all exceptions may happen during parsing"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public static Command parse(String fullCommand) throws DukeException {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        // this block deals with exit and list command"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        if (fullCommand.equals(EXIT)) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        } else if (fullCommand.equals(PRINT_TASK_LIST)) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "            return new PrintFullListCommand();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        String[] words \u003d fullCommand.split(SINGLE_SPACE);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        //this block deals with find command"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        if (words[0].equals(TASK_FIND)) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "            if (fullCommand.substring(4).isBlank()) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                throw new EmptyFindException();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "            return new FindCommand(fullCommand.substring(5));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        "
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        //this block deals with find date command"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        if (words[0].equals(TASK_FIND_DATE)) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "            if (fullCommand.substring(4).isBlank()) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                throw new EmptyFindDateException();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                return new FindDateCommand(LocalDate.parse(fullCommand.substring(5)));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "            } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                throw new DateFormatException();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        int taskIndex;//to indicate what is the task we are dealing with. may not be used."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        //this block deals with done command"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        if (words[0].equals(TASK_DONE)) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "            if (fullCommand.substring(4).isBlank()) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                throw new EmptyDoneException();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                taskIndex \u003d Integer.parseInt(fullCommand.substring(5)) - 1;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "            } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                throw new DoneNumberFormatException();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "            return new DoneCommand(taskIndex);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        //this block deals with delete command"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        if (words[0].equals(TASK_DELETE)) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "            if (fullCommand.substring(6).isBlank()) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                throw new EmptyDeleteException();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                taskIndex \u003d Integer.parseInt(fullCommand.substring(7)) - 1;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "            } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                throw new DeleteNumberFormatException();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "            return new DeleteCommand(taskIndex);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        //this block deals with add command"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        //we shall check that the user input is not meant for any other command beforehand"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        //because the default block will throw an exception."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        // i.e. when enter this block, the parser will not go to any other blocks"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        int dividerPosition;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        int timeDivider;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        String dateTime;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        switch (words[0]) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "            case ADD_EVENT:"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                dividerPosition \u003d fullCommand.indexOf(AT);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                if (fullCommand.substring(5).isBlank()) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                    throw new EmptyEventException();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                if (dividerPosition \u003d\u003d -1) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                    throw new NoEventTimeMakerException();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                if (fullCommand.substring(5, dividerPosition).isBlank()) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                    throw new EmptyEventException();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                    fullCommand.substring(dividerPosition + 4);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                } catch (StringIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                    throw new NoEventTimeException();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                    timeDivider \u003d fullCommand.substring(dividerPosition + 4).indexOf(SINGLE_SPACE);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                    dateTime \u003d fullCommand.substring(dividerPosition + 4, dividerPosition + 4 + timeDivider)"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                            + \"T\""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                            + fullCommand.substring(dividerPosition + 4 + timeDivider + 1);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                    return new AddCommand(new Event(fullCommand.substring(6, dividerPosition), LocalDateTime.parse(dateTime)));"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                } catch (DateTimeParseException | StringIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                    throw new TimeFormatException();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "            case ADD_DEADLINE:"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                dividerPosition \u003d fullCommand.indexOf(BY);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                if (fullCommand.substring(8).isBlank()) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                    throw new EmptyDeadlineException();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                if (dividerPosition \u003d\u003d -1) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                    throw new NoDeadlineTimeMarkerException();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                if (fullCommand.substring(8, dividerPosition).isBlank()) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                    throw new EmptyDeadlineException();"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                    fullCommand.substring(dividerPosition + 4);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                } catch (StringIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                    throw new NoDeadlineTimeException();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                    timeDivider \u003d fullCommand.substring(dividerPosition + 4).indexOf(SINGLE_SPACE);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                    dateTime \u003d fullCommand.substring(dividerPosition + 4, dividerPosition + 4 + timeDivider)"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                            + \"T\""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                            + fullCommand.substring(dividerPosition + 4 + timeDivider + 1);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                    return new AddCommand(new Deadline(fullCommand.substring(9, dividerPosition), LocalDateTime.parse(dateTime)));"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                } catch (DateTimeParseException | StringIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                    throw new TimeFormatException();"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "            case ADD_TODO:"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                    if (fullCommand.substring(5).isBlank()) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                        throw new EmptyTodoException();"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                    return new AddCommand(new Todo(fullCommand.substring(5)));"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                } catch (StringIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                    throw new EmptyTodoException();"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                throw new WrongCommandException();"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Lee-Juntong": 199
    }
  },
  {
    "path": "src/main/java/duke/Storage/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "package duke.Storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "import duke.Exception.CreatingFileException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "import duke.Exception.LoadingException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "import duke.Exception.WritingFileException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "import duke.Task.Deadline;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "import duke.Task.Event;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "import duke.Task.Task;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "import duke.Task.Todo;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": " * This class creates the folder and file path if it\u0027s not already created, and"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": " * prepare the data in the file to be used."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public static final String REGEX_IN_FILE \u003d \"//\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    private final String filePath;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * Set the \u003ccode\u003efilepath \u003c/code\u003e according to the user input."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @param filePath is the path of the file"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public Storage(String filePath) throws CreatingFileException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        createFolderAndFIle(filePath);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * Creates the folder and file if not already crated."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @param filePath the String of the relative path"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    private static void createFolderAndFIle(String filePath) throws CreatingFileException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        File dataFile \u003d new File(filePath);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        File directory \u003d dataFile.getParentFile();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        if (!directory.exists()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "            directory.mkdirs();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "            dataFile.createNewFile();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "            throw new CreatingFileException(filePath);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * Save the data of the task list to the file."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @param tasks the list of tasks provided by a variable from a TaskList object"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @throws WritingFileException represents the file is not correctly written"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public void writeFile(ArrayList\u003cTask\u003e tasks) throws WritingFileException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "            FileWriter fw \u003d new FileWriter(filePath);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "            for (Task task : tasks) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                fw.write(task.fileString());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                fw.write(System.lineSeparator());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "            fw.close();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "            throw new WritingFileException();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * Prepares the data in the file as an ArrayList, which is used to construct the TaskList."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @return the tasks in an ArrayList"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @throws LoadingException represents the \u003ccode\u003etasks\u003c/code\u003e is not correctly created"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public ArrayList\u003cTask\u003e load() throws LoadingException {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003cTask\u003e();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        File dataFile \u003d new File(filePath);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "            Scanner s \u003d new Scanner(dataFile);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "            while (s.hasNext()) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                String[] words \u003d s.nextLine().split(REGEX_IN_FILE);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                switch (words[0]) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                    case \"T\":"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                        tasks.add(new Todo(words[2]));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                        if (Integer.parseInt(words[1]) \u003d\u003d 1) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                            tasks.get(tasks.size() - 1).markAsDone();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                    case \"E\":"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                        try {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                            tasks.add(new Event(words[2], LocalDateTime.parse(words[3])));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                        } catch (DateTimeParseException | StringIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                            throw new LoadingException();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                        if (Integer.parseInt(words[1]) \u003d\u003d 1) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                            tasks.get(tasks.size() - 1).markAsDone();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                    case \"D\":"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                        try {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                            tasks.add(new Deadline(words[2], LocalDateTime.parse(words[3])));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                        } catch (DateTimeParseException | StringIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                            throw new LoadingException();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                        if (Integer.parseInt(words[1]) \u003d\u003d 1) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                            tasks.get(tasks.size() - 1).markAsDone();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                    default:"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                        throw new LoadingException();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "            System.out.println(\"file not found\");"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "            throw new LoadingException();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        return tasks;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Lee-Juntong": 128
    }
  },
  {
    "path": "src/main/java/duke/Task/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "package duke.Task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": " * Represents the Deadline tasks."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    protected LocalDateTime by;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * Convert the information about this deadline to a string that is to be stored in a file."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @return the result string to be stored"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public String fileString() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        return \"D//\" + (isDone ? 1 : 0) + \"//\" + description + \"//\" + by;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public Deadline(String description, LocalDateTime by) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        this.by \u003d by;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * Provides the date of the task."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @return the LocalDate get from LocalDateTime"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public LocalDate getDate() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        return LocalDate.from(by);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * Prepare the string to be printed in the list."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @return the string required in a certain format"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * Example of the format: [D][✘]a  (by: Feb 20 2020 08:00)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        return \"[D]\" + super.toString() + \" (by: \" + by.format(DateTimeFormatter.ofPattern(\"MMM d yyyy HH\u0027:\u0027mm\")) + \")\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Lee-Juntong": 47
    }
  },
  {
    "path": "src/main/java/duke/Task/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "package duke.Task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": " * Represents the Event tasks."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    protected LocalDateTime at;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * Convert the information about this event to a string that is to be stored in a file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @return the result string to be stored"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public String fileString() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        return \"E//\" + (isDone ? 1 : 0) + \"//\" + description + \"//\" + at;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * Provides the date of the task."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @return the LocalDate get from LocalDateTime"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public LocalDate getDate() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        return LocalDate.from(at);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public Event(String description, LocalDateTime at) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        this.at \u003d at;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * Prepare the string to be printed in the list."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @return the string required in a certain format"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * Example of the format: [E][✘]a  (at: Feb 20 2020 08:00)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        return \"[E]\" + super.toString() + \" (at: \" + at.format(DateTimeFormatter.ofPattern(\"MMM d yyyy HH\u0027:\u0027mm\")) + \")\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Lee-Juntong": 48
    }
  },
  {
    "path": "src/main/java/duke/Task/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "package duke.Task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": " * Represents the task objects."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": " * Contains a String \u003c\\code\u003edescription\u003c/\\code\u003e , which is the description of the task,"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": " * and a boolean \u003c\\code\u003eisDone\u003c/\\code\u003e, which is the status of the task."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": " * Provides methods to mark a task as done(either during user input or reading from file),"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": " * get the value of \u003c\\code\u003eisDone\u003c/\\code\u003e,"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": " * convert the \u003c\\code\u003eTask\u003c/\\code\u003e object to a string to be printed out or write to a file."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "public abstract class Task {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public Task(String description) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * Mark a task\u0027s status as done."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public void markAsDone() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        this.isDone \u003d true;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public abstract String fileString();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * Provides the status of the task as a icon."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @return returns a tick if the task is done, and returns a cross if the task is not done"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        return (isDone ? \"\\u2713\" : \"\\u2718\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        //return tick or X symbols"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * Prepare the string to be printed in the list."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @return the common part for Event, Deadline, Todo"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        return \"[\" + getStatusIcon() + \"]\" + description;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * Provides the date of the task."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @return the LocalDate get from LocalDateTime"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public LocalDate getDate() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * Provides the String variable of the description of this task."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @return the description of this task"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "}"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Lee-Juntong": 71
    }
  },
  {
    "path": "src/main/java/duke/Task/Todo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "package duke.Task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": " * Represents the Todo tasks."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "public class Todo extends Task {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public Todo(String description) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * Convert the information about this Todo to a string that is to be stored in a file."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @return the result string to be stored"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public String fileString() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        return \"T//\" + (isDone ? 1 : 0) + \"//\" + description;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * Prepare the string to be printed in the list."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @return the string required in a certain format"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * Example of the format: [T][✘]a"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        return \"[T]\" + super.toString();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Lee-Juntong": 31
    }
  },
  {
    "path": "src/main/java/duke/TaskList/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "package duke.TaskList;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "import duke.Exception.DoneUndefinedTaskException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "import duke.Task.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "import static java.util.stream.Collectors.toList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": " * Contains the list of the tasks and provides ways to delete/add/mark as done tasks."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    private final ArrayList\u003cTask\u003e tasks;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * Construct the tasks as an empty ArrayList."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public TaskList() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        tasks \u003d new ArrayList\u003cTask\u003e();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * When loading from the file, create the list as provided in the file."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @param tasks provided by \u003ccode\u003eStorage::load()\u003c/code\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @see duke.Storage.Storage"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public TaskList(ArrayList\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        this.tasks \u003d tasks;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * Adds a task to the list."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @param taskToBeAdded may be Todo/Event/Deadline based on the usage"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public void addTask(Task taskToBeAdded) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        tasks.add(taskToBeAdded);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * Mark a task as done."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @param taskIndex the index of the task being done"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @throws DoneUndefinedTaskException the task is not defined but the user want to mark it as done"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public void doneTask(int taskIndex) throws DoneUndefinedTaskException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "            tasks.get(taskIndex).markAsDone();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "            throw new DoneUndefinedTaskException(taskIndex);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * Gives the access to the list of tasks."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @return the \u003ccode\u003eArrayList\u003ctask\u003e\u003c/code\u003e object to be printed"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public ArrayList\u003cTask\u003e getTaskList() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        return tasks;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @return the size of the ArrayList in the TaskList object"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public int size() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        return tasks.size();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * Remove the task indicated by the user."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public void remove(int taskIndex) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        tasks.remove(taskIndex);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * Returns the element at the specified position in this list."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @param taskIndex index of the task to return"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @return the task at the specified position in this list"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public Task get(int taskIndex) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        return tasks.get(taskIndex);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * Filter the task list to find the tasks contain the information looking for by the user."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @param filterString the keyword that the user is looking for"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @return the filtered list. this list contains only the tasks that satisfy the requirement"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public ArrayList\u003cTask\u003e filterWith(String filterString) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        ArrayList\u003cTask\u003e filteredTaskList \u003d (ArrayList\u003cTask\u003e) tasks.stream()"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                .filter(s -\u003e s.getDescription().contains(filterString))"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                .collect(toList());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        return filteredTaskList;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * Filter the task list to find the tasks happen on the date looking for by the user."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @param date the date that the user is looking for"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @return the filtered list. this list contains only the tasks that satisfy the requirement"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public ArrayList\u003cTask\u003e filterDateWith(LocalDate date) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        ArrayList\u003cTask\u003e filteredTaskList \u003d (ArrayList\u003cTask\u003e) tasks.stream()"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                .filter(s -\u003e s.getDate().isEqual(date))"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                .collect(toList());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        return filteredTaskList;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Lee-Juntong": 116
    }
  },
  {
    "path": "src/main/java/duke/UI/UI.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "package duke.UI;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "import duke.Task.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": " * UI receives all user inputs, and produces outputs show to the user."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "public class UI {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public static final String LOGO \u003d \" ____        _        \\n\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "            + \"|  _ \\\\ _   _| | _____ \\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "            + \"| | | | | | | |/ / _ \\\\\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "            + \"| |_| | |_| |   \u003c  __/\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "            + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public static final String LINE_DIVIDER \u003d \"____________________________________________________________\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public static final String EXIT_MESSAGE \u003d \"Bye. Hope to see you again soon!\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    private final Scanner in;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public UI() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        in \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * Reads the user input line by line."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @return the string of the line"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public String readCommand() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        return in.nextLine();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * Prints the logo of DUKE and greet the user."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public void printGreetingMessage() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        printLine();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        System.out.println(\"Hello from\\n\" + LOGO);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        System.out.println(\"What can I do for you?\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * Prints the separator."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public void printLine() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        System.out.println(LINE_DIVIDER);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * Prints all the tasks with labels, based on the input list."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @param tasks an \u003c\\code\u003eArrayList\u003c/\\code\u003e of tasks to be printed one by one"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public void printTaskList(ArrayList\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        int numPrintedTasks \u003d 0;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        System.out.println(\" Here are the tasks in your list:\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        for (Task task : tasks) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "            numPrintedTasks++;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "            System.out.println(numPrintedTasks + \". \" + task.toString());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * Prints all the tasks of the filtered list with labels, based on the input list."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @param tasks an \u003c\\code\u003eArrayList\u003c/\\code\u003e of tasks to be printed one by one"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public void printFilteredTaskList(ArrayList\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        int numPrintedTasks \u003d 0;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        System.out.println(\" Here are the matching tasks in your list:\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        for (Task task : tasks) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "            numPrintedTasks++;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "            System.out.println(numPrintedTasks + \". \" + task.toString());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * Shows the error message when experiencing exceptions."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @param message the message get from the error"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public void showError(String message) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        System.out.println(message);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * Shows the error message during loading. Since the general IO exception is"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * handled when executing the process, the error leads to this would be the file"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * is edited in a wrong way."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public void showLoadingError() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        System.out.println(\"You edit the file in a wrong format. Please check.\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * Prints the message during executing commands."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * This function is used to make all printing being done in UI."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @param message determined by the command"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public void print(String message) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        System.out.print(message);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * Call when exit the program"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public void printExitMessage() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        System.out.println(EXIT_MESSAGE);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * Take in a size and prints the total number of tasks."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @param size get by calling \u003ccode\u003eArrayList\u003cTask\u003e::Size()\u003c/code\u003e"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public void printNumTask(int size) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        System.out.println(\"Now you have \" + size + \" tasks in the list.\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * Prints the message when the user mark some task as done."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @param task the task being done"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public void printDoneMessage(Task task) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        System.out.println(\"Nice! I\u0027ve marked this task as done: \");"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        System.out.println(task.toString());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * Prints the message when the user deletes some task."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @param task the task being deleted"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public void printDeleteMessage(Task task) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        System.out.println(\"Noted. I\u0027ve removed this task: \");"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        System.out.println(task.toString());"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * Prints the message when the user adds some task."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @param taskAdded the task being added"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public void printAddTaskMessage(Task taskAdded) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        System.out.println(\"Got it. I\u0027ve added this task: \");"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        System.out.println(taskAdded.toString());"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * Prints all the tasks of the filtered list with labels, based on the input list."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     * @param filteredTaskList an \u003c\\code\u003eArrayList\u003c/\\code\u003e of tasks to be printed one by one"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public void printFilteredDateTaskList(ArrayList\u003cTask\u003e filteredTaskList) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        int numPrintedTasks \u003d 0;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        System.out.println(\" Here are the tasks on the given date in your list:\");"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        for (Task task : filteredTaskList) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "            numPrintedTasks++;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "            System.out.println(numPrintedTasks + \". \" + task.toString());"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Lee-Juntong": 176
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "todo borrow book"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "list"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "deadline return book /by 2020-01-01 12:00"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "event project meeting /at 2020-01-02 13:30"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "something"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "event"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "event /at"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "event something"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "event something /at"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "event something /at some date"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "deadline"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "deadline /by"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "deadline something"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "deadline something /by"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "deadline something /by some date"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "find book"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "date 2020-01-01"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "done 1"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "delete 2"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "list"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "Lee-Juntong": 21
    }
  },
  {
    "path": "text-ui-test/runtest.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@ECHO OFF"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "REM create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "if not exist ..\\bin mkdir ..\\bin"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "REM delete output from previous run"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "del ACTUAL.TXT"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "REM compile the code into the bin folder"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "javac  -cp ..\\src -Xlint:none -d ..\\bin ..\\src\\main\\java\\Main.java ..\\src\\main\\java\\Deadline.java ..\\src\\main\\java\\Event.java ..\\src\\main\\java\\Task.java ..\\src\\main\\java\\Todo.java"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "IF ERRORLEVEL 1 ("
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    echo ********** BUILD FAILURE **********"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    exit /b 1"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ")"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "REM no error here, errorlevel \u003d\u003d 0"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "java -Dfile.encoding\u003dUTF-8 -classpath ..\\bin Main Deadline Event Task Todo \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "REM compare the output to the expected output"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "FC ACTUAL.TXT EXPECTED.TXT"
      }
    ],
    "authorContributionMap": {
      "-": 19,
      "Lee-Juntong": 2
    }
  }
]
