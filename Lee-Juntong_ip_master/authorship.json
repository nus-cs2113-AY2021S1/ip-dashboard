[
  {
    "path": "README.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "# duke project template"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "This is a project template for a greenfield Java project. It\u0027s named after the Java mascot _Duke_. Given below are instructions on how to use it."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "## Setting up in Intellij"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "Prerequisites: JDK 11, update Intellij to the most recent version."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "1. Open Intellij (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "1. Set up the correct JDK version, as follows:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Click `Configure` \u003e `Structure for New Projects` and then `Project Settings` \u003e `Project` \u003e `Project SDK`"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "   1. If JDK 11 is listed in the drop down, select it. If it is not, click `New...` and select the directory where you installed JDK 11"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Click `OK`"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "1. Import the project into Intellij as follows:"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Click `Open or Import`."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Select the project directory, and click `OK`"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "   1. If there are any further prompts, accept the defaults."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "1. After the importing is complete, locate the `src/main/java/duke.java` file, right-click it, and choose `Run duke.main()`. If the setup is correct, you should see something like the below:"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "   Hello from"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    ____        _        "
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "   |  _ \\ _   _| | _____ "
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "   | | | | | | | |/ / _ \\"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "   | |_| | |_| |   \u003c  __/"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "   |____/ \\__,_|_|\\_\\___|"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      }
    ],
    "authorContributionMap": {
      "-": 24,
      "Lee-Juntong": 2
    }
  },
  {
    "path": "src/main/java/duke/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "        String logo \u003d \" ____        _        \\n\""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"|  _ \\\\ _   _| | _____ \\n\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"| | | | | | | |/ / _ \\\\\\n\""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"| |_| | |_| |   \u003c  __/\\n\""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.println(\"Hello from\\n\" + logo);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "//I\u0027m not sure whether I should delete this one or not because I do all my codes in Main.java"
      }
    ],
    "authorContributionMap": {
      "-": 10,
      "Lee-Juntong": 3
    }
  },
  {
    "path": "src/main/java/duke/Main.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "import duke.exception.*;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "import duke.task.Todo;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "public class Main {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public static final String EXIT \u003d \"bye\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public static final String PRINT_TASK_LIST \u003d \"list\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public static final String TASK_DONE \u003d \"done\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public static final String ADD_EVENT \u003d \"event\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public static final String ADD_DEADLINE \u003d \"deadline\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public static final String ADD_TODO \u003d \"todo\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public static final String TASK_DELETE \u003d \"delete\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    private static ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        printGreetingMessage();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        //if the user use this app for the 1st time, the folder and file will be created automatically"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        Path filePath \u003d readData();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        Scanner in \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        String command;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        while (true) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "            command \u003d in.nextLine();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "            if (command.equals(EXIT)) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "            } else if (command.equals(PRINT_TASK_LIST)) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                Task.printTaskList(tasks);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "            //the above are single word command"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "            respondMultiWordCommand(tasks, command);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        writeFile(filePath);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        printExitMessage();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    private static Path readData() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        Path filePath \u003d createFolderAndFIle();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        //createFolderAndFile creates the path if you are using the program the 1st time, or return the path of the file"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        //if you have already created the file"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        File dataFile \u003d new File(String.valueOf(filePath));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "            Scanner s \u003d new Scanner(dataFile);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "            while (s.hasNext()) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                String[] words \u003d s.nextLine().split(\"//\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                switch (words[0]) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                    case \"T\":"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                        tasks.add(new Todo(words[2]));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                        if (Integer.parseInt(words[1]) \u003d\u003d 1) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                            tasks.get(tasks.size() - 1).markAsDone(true);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                    case \"E\":"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                        tasks.add(new Event(words[2], words[3]));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                        if (Integer.parseInt(words[1]) \u003d\u003d 1) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                            tasks.get(tasks.size() - 1).markAsDone(true);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                    case \"D\":"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                        tasks.add(new Deadline(words[2], words[3]));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                        if (Integer.parseInt(words[1]) \u003d\u003d 1) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                            tasks.get(tasks.size() - 1).markAsDone(true);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                    default:"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                        System.out.println(\"You edit the file in a wrong format. Please check.\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "            System.out.println(\"file not found\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "            System.out.println(\"You edit the file in a wrong format. Please check.\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    private static void writeFile(Path filePath) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "            FileWriter fw \u003d new FileWriter(String.valueOf(filePath));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "            for (Task task : tasks) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                fw.write(task.fileString());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                fw.write(System.lineSeparator());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "            fw.close();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "            System.out.println(\"something went wrong when writing to file\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    private static Path createFolderAndFIle() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        String home \u003d System.getProperty(\"user.dir\");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        Path folderPath \u003d java.nio.file.Paths.get(home, \"data\");"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        Path filePath \u003d java.nio.file.Paths.get(home, \"data\", \"duke.txt\");"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        if (!java.nio.file.Files.exists(folderPath)) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                java.nio.file.Files.createDirectory(folderPath);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "            } catch (IOException e) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                System.out.println(\"The folder \\\"data\\\" is not created\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        if (!java.nio.file.Files.exists(filePath)) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                java.nio.file.Files.createFile(filePath);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "            } catch (IOException e) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                System.out.println(\"The file \\\"duke.txt\\\" is not created\");"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    private static void printNumTask() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        System.out.println(\"Now you have \" + tasks.size() + \" tasks in the list.\");"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    private static void deleteTask(int taskIndex) throws DeleteUndefinedTaskException {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        if (taskIndex \u003c\u003d -1 || taskIndex \u003e\u003d tasks.size()) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "            throw new DeleteUndefinedTaskException();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        printLine();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        System.out.println(\"Noted. I\u0027ve removed this task: \");"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        System.out.println(tasks.get(taskIndex).toString());"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        tasks.remove(taskIndex);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        printNumTask();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        printLine();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    private static void doneTask(int taskIndex) throws DoneUndefinedTaskException {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "            tasks.get(taskIndex).markAsDone();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "            throw new DoneUndefinedTaskException();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    private static void deleteOrDoneTask(String beginning, String command)"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "            throws EmptyDoneException, DoneUndefinedTaskException, EmptyDeleteException, DeleteUndefinedTaskException {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        if (beginning.equals(TASK_DONE)) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "            if (command.substring(4).isBlank()) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                throw new EmptyDoneException();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                doneTask(Integer.parseInt(command.substring(5)) - 1);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "            } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                System.out.println(\"Please enter a number after done.\");"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "            if (command.substring(6).isBlank()) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                throw new EmptyDeleteException();"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                deleteTask(Integer.parseInt(command.substring(7)) - 1);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "            } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                System.out.println(\"Please enter a number after delete.\");"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    private static void respondMultiWordCommand(ArrayList\u003cTask\u003e tasks, String command) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        String[] words \u003d command.split(\" \");"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        if (words[0].equals(TASK_DONE) || words[0].equals(TASK_DELETE)) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                deleteOrDoneTask(words[0], command);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "            } catch (DoneUndefinedTaskException | DeleteUndefinedTaskException e) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                printLine();"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                System.out.println(\"☹ OOPS!!! There isn\u0027t a task labeled \" + words[1]);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                printLine();"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "            } catch (EmptyDeleteException e) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                printLine();"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                System.out.println(\"☹ OOPS!!! You should enter the index of the task you want to delete.\");"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                printLine();"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "            } catch (EmptyDoneException e) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                printLine();"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                System.out.println(\"☹ OOPS!!! You should enter the index of the task you have done.\");"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                printLine();"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                addTask(words[0], tasks, command);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "            } catch (WrongCommandException e) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                printLine();"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                System.out.println(\"☹ OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\");"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                printLine();"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "            } catch (EmptyTodoException e) {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                System.out.println(\"☹ OOPS!!! The description of a todo cannot be empty.\");"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "            } catch (EmptyDeadlineException e) {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                System.out.println(\"☹ OOPS!!! The description of a deadline cannot be empty.\");"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "            } catch (NoDeadlineTimeMarkerException e) {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                System.out.println(\"☹ OOPS!!! You should mark the time for a deadline with \\\"/by\\\"\");"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "            } catch (NoDeadlineTimeException e) {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                System.out.println(\"☹ OOPS!!! You should enter a time for deadline.\");"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "            } catch (EmptyEventException e) {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                System.out.println(\"☹ OOPS!!! The description of a event cannot be empty.\");"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "            } catch (NoEventTimeMakerException e) {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                System.out.println(\"☹ OOPS!!! You should mark the time for an event with \\\"/at\\\"\");"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "            } catch (NoEventTimeException e) {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                System.out.println(\"☹ OOPS!!! You should enter a time for event.\");"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "            } catch (InvalidCommandException e) {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                System.out.println(\"unknown error happens.\");"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                //this is not reachable as all Invalid Commands are dealt above"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    private static void printExitMessage() {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        printLine();"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        System.out.println(\"Bye. Hope to see you again soon!\");"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        printLine();"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public static void printLine() {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        System.out.println(\"____________________________________________________________\");"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    private static void printGreetingMessage() {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        printLine();"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        String logo \u003d \" ____        _        \\n\""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                + \"|  _ \\\\ _   _| | _____ \\n\""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                + \"| | | | | | | |/ / _ \\\\\\n\""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                + \"| |_| | |_| |   \u003c  __/\\n\""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        System.out.println(\"Hello from\\n\" + logo);"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        System.out.println(\"What can I do for you?\");"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    private static void addTask(String beginning, ArrayList\u003cTask\u003e tasks, String command) throws InvalidCommandException {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        int dividerPosition;"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        switch (beginning) {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "            case ADD_EVENT:"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                dividerPosition \u003d command.indexOf(\"/at\");"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                if (command.substring(5).isBlank()) {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                    throw new EmptyEventException();"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                }"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                if (dividerPosition \u003d\u003d -1) {"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                    throw new NoEventTimeMakerException();"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                }"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                if (command.substring(5, dividerPosition).isBlank()) {"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                    throw new EmptyEventException();"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                }"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                    command.substring(dividerPosition + 4);"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                } catch (StringIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                    throw new NoEventTimeException();"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                }"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                tasks.add(new Event(command.substring(6, dividerPosition), command.substring(dividerPosition + 4)));"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "            case ADD_DEADLINE:"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                dividerPosition \u003d command.indexOf(\"/by\");"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                if (command.substring(8).isBlank()) {"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                    throw new EmptyDeadlineException();"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                }"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                if (dividerPosition \u003d\u003d -1) {"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                    throw new NoDeadlineTimeMarkerException();"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                }"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                if (command.substring(8, dividerPosition).isBlank()) {"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                    throw new EmptyDeadlineException();"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                }"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                    command.substring(dividerPosition + 4);"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                } catch (StringIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                    throw new NoDeadlineTimeException();"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                }"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                tasks.add(new Deadline(command.substring(9, dividerPosition), command.substring(dividerPosition + 4)));"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "            case ADD_TODO:"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                    if (command.substring(5).isBlank()) {"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                        throw new EmptyTodoException();"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                    tasks.add(new Todo(command.substring(5)));"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                } catch (StringIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                    throw new EmptyTodoException();"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                }"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "                throw new WrongCommandException();"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        //printing works below"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        printLine();"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        System.out.println(\"Got it. I\u0027ve added this task: \");"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        System.out.println(tasks.get(tasks.size() - 1).toString());"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        printNumTask();"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        printLine();"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "}"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Lee-Juntong": 329
    }
  },
  {
    "path": "src/main/java/duke/exception/DeadlineException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "public class DeadlineException extends InvalidCommandException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Lee-Juntong": 4
    }
  },
  {
    "path": "src/main/java/duke/exception/DeleteException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "public class DeleteException extends InvalidCommandException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Lee-Juntong": 4
    }
  },
  {
    "path": "src/main/java/duke/exception/DeleteUndefinedTaskException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "public class DeleteUndefinedTaskException extends DeleteException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Lee-Juntong": 4
    }
  },
  {
    "path": "src/main/java/duke/exception/DoneException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "public class DoneException extends InvalidCommandException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Lee-Juntong": 4
    }
  },
  {
    "path": "src/main/java/duke/exception/DoneUndefinedTaskException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "public class DoneUndefinedTaskException extends DoneException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Lee-Juntong": 4
    }
  },
  {
    "path": "src/main/java/duke/exception/EmptyDeadlineException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "public class EmptyDeadlineException extends DeadlineException{"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Lee-Juntong": 4
    }
  },
  {
    "path": "src/main/java/duke/exception/EmptyDeleteException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "public class EmptyDeleteException extends DeleteException{"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Lee-Juntong": 4
    }
  },
  {
    "path": "src/main/java/duke/exception/EmptyDoneException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "public class EmptyDoneException extends DoneException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Lee-Juntong": 4
    }
  },
  {
    "path": "src/main/java/duke/exception/EmptyEventException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "public class EmptyEventException extends EventException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Lee-Juntong": 4
    }
  },
  {
    "path": "src/main/java/duke/exception/EmptyTodoException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "public class EmptyTodoException extends TodoException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Lee-Juntong": 4
    }
  },
  {
    "path": "src/main/java/duke/exception/EventException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "public class EventException extends InvalidCommandException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Lee-Juntong": 4
    }
  },
  {
    "path": "src/main/java/duke/exception/InvalidCommandException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "public class InvalidCommandException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Lee-Juntong": 4
    }
  },
  {
    "path": "src/main/java/duke/exception/NoDeadlineTimeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "public class NoDeadlineTimeException extends DeadlineException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Lee-Juntong": 4
    }
  },
  {
    "path": "src/main/java/duke/exception/NoDeadlineTimeMarkerException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "public class NoDeadlineTimeMarkerException extends DeadlineException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Lee-Juntong": 4
    }
  },
  {
    "path": "src/main/java/duke/exception/NoEventTimeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "public class NoEventTimeException extends EventException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Lee-Juntong": 4
    }
  },
  {
    "path": "src/main/java/duke/exception/NoEventTimeMakerException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "public class NoEventTimeMakerException extends EventException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Lee-Juntong": 4
    }
  },
  {
    "path": "src/main/java/duke/exception/TodoException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "public class TodoException extends InvalidCommandException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Lee-Juntong": 4
    }
  },
  {
    "path": "src/main/java/duke/exception/WrongCommandException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "public class WrongCommandException extends InvalidCommandException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Lee-Juntong": 4
    }
  },
  {
    "path": "src/main/java/duke/task/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    protected String by;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public String fileString() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        return \"D//\"+ (isDone ? 1 : 0) + \"//\" + description + \"//\" + by;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public Deadline(String description, String by) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        this.by \u003d by;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        return \"[D]\" + super.toString() + \" (by: \" + by + \")\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Lee-Juntong": 21
    }
  },
  {
    "path": "src/main/java/duke/task/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    protected String at;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public String fileString() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        return \"E//\" + (isDone ? 1 : 0) + \"//\" + description + \"//\" + at;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public Event(String description, String at) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        this.at \u003d at;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        return \"[E]\" + super.toString() + \" (at: \" + at + \")\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Lee-Juntong": 21
    }
  },
  {
    "path": "src/main/java/duke/task/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public Task(String description) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public void markAsDone(boolean isFromFile) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        if (isFromFile) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "            this.isDone \u003d true;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public void markAsDone() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        this.isDone \u003d true;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        printLine();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        System.out.println(\"Nice! I\u0027ve marked this task as done: \");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        System.out.println(toString());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        printLine();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public String fileString() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    private static void printLine() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        System.out.println(\"____________________________________________________________\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        return (isDone ? \"\\u2713\" : \"\\u2718\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        //return tick or X symbols"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public static void printTaskList(ArrayList\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        int numPrintedTasks \u003d 0;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        printLine();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        System.out.println(\" Here are the tasks in your list:\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        for (Task task : tasks) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "            numPrintedTasks++;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "            System.out.println(numPrintedTasks + \". \" + task.toString());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        printLine();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        return \"[\" + getStatusIcon() + \"]\" + description;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "}"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Lee-Juntong": 59
    }
  },
  {
    "path": "src/main/java/duke/task/Todo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "public class Todo extends Task {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public Todo(String description) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public String fileString() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        return \"T//\" + (isDone ? 1 : 0) + \"//\" + description;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "        return \"[T]\" + super.toString();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Lee-Juntong": 18
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "todo borrow book"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "list"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "deadline return book /by Sunday"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "event project meeting /at Mon 2-4pm"
      }
    ],
    "authorContributionMap": {
      "Lee-Juntong": 4
    }
  },
  {
    "path": "text-ui-test/runtest.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@ECHO OFF"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "REM create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "if not exist ..\\bin mkdir ..\\bin"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "REM delete output from previous run"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "del ACTUAL.TXT"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "REM compile the code into the bin folder"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "javac  -cp ..\\src -Xlint:none -d ..\\bin ..\\src\\main\\java\\Main.java ..\\src\\main\\java\\Deadline.java ..\\src\\main\\java\\Event.java ..\\src\\main\\java\\Task.java ..\\src\\main\\java\\Todo.java"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "IF ERRORLEVEL 1 ("
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    echo ********** BUILD FAILURE **********"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    exit /b 1"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ")"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "REM no error here, errorlevel \u003d\u003d 0"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Lee-Juntong"
        },
        "content": "java -Dfile.encoding\u003dUTF-8 -classpath ..\\bin Main Deadline Event Task Todo \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "REM compare the output to the expected output"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "FC ACTUAL.TXT EXPECTED.TXT"
      }
    ],
    "authorContributionMap": {
      "-": 19,
      "Lee-Juntong": 2
    }
  }
]
