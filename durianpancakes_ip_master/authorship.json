[
  {
    "path": "README.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "# User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "## Setting up in Intellij"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "Prerequisites: JDK 11, update Intellij to the most recent version."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "1. Open Intellij (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "1. Set up the correct JDK version, as follows:"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Click `Configure` \u003e `Structure for New Projects` and then `Project Settings` \u003e `Project` \u003e `Project SDK`"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "   1. If JDK 11 is listed in the drop down, select it. If it is not, click `New...` and select the directory where you installed JDK 11"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Click `OK`"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "1. Import the project into Intellij as follows:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Click `Open or Import`."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Select the project directory, and click `OK`"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "   1. If there are any further prompts, accept the defaults."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "1. After the importing is complete, locate the `src/main/java/Duke.java` file, right-click it, and choose `Run Duke.main()`. If the setup is correct, you should see something like the below:"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "   Hello from"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    ____        _        "
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "   |  _ \\ _   _| | _____ "
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "   | | | | | | | |/ / _ \\"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "   | |_| | |_| |   \u003c  __/"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "   |____/ \\__,_|_|\\_\\___|"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "## Features"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "### Viewing help: `help`"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "Shows a message containing all possible commands accepted by Duke"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "Format: `help`"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "### Adding a Todo: `todo`"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "Adds a Todo to the task list"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "Format: `todo DESCRIPTION`"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "* `todo eat dinner`"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "* `todo take dog out for a run`"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "### Adding a Deadline: `deadline`"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "Adds a Deadline to the task list"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "Format: `deadline DESCRIPTION /by DATE_TIME\u003cyyyy-MM-dd HHmm\u003e`"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "* `deadline Finish homework /by 2020-09-21 1800`"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "### Adding an Event: `event`"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "Adds an Event to the task list"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "Format: `event DESCRIPTION /at FROM_DATE_TIME\u003cyyyy-MM-dd HHmm\u003e /to TO_DATE_TIME\u003cyyyy-MM-dd HHmm\u003e`"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "* `event Math exam /at 2020-10-22 0900 /to 2020-10-22 1000`"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "### Listing all tasks: `list`"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "Shows a list of all tasks in the task list"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "Format: `list`"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "### Listing all tasks on a given day: `list`"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "Shows a list of all tasks happening on a given day in the task list"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "Format: `list DATE`"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "* `list 2020-09-30`"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "### Locating tasks by name: `find`"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "Find tasks whose name contain any of the given keywords."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "Format: `find KEYWORD`"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "* `find dinner`"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "* `find assignment`"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "### Deleting a task: `delete`"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "Delete the task of a given index"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "Format: `delete INDEX`"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "* `delete 13` (If the task list have at least 13 tasks)"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "### Editing a task\u0027s done status: `done`"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "Changes a task\u0027s done status to done"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "Format: `done INDEX`"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "Example: `done 13` (If the task list have at least 13 tasks)"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "### Exiting the program: `bye`"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "Exits the program"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "Format: `bye`"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "### Saving the data"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "Duke saves all data automatically after any command that changes the data. There is no need to save manually."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "## Command summary"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "Action | Format, Examples"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "-------|-----------------"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "help|`help`"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "list|`list` `list DATE` e.g., `list 2020-09-21`"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "todo|`todo DESCRIPTION` e.g., `todo eat dinner`"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "deadline|`deadline DESCRIPTION /by DATE_TIME` e.g., `deadline Finish homework /by 2020-09-21 1800`"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "event|`event DESCRIPTION /at FROM_DATE_TIME /to TO_DATE_TIME` e.g., `event Math exam /at 2020-10-22 0900 /to 2020-10-22 1000`"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "find|`find KEYWORD` e.g., `find dinner` `find assignment`"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "delete|`delete INDEX` e.g., `delete 13`"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "done|`done INDEX` e.g., `done 13`"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "bye|`bye`"
      }
    ],
    "authorContributionMap": {
      "durianpancakes": 91,
      "-": 23
    }
  },
  {
    "path": "src/main/java/duke/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import duke.data.exceptions.DukeInitializeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import duke.data.task.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import duke.ui.UserInterface;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     * Driver function for Duke"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     *"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     * @param args"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main (String[] args) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        boolean exitFlag \u003d false;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        UserInterface ui \u003d new UserInterface();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        Storage storage \u003d new Storage();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            new TaskList(storage.load(\"/tasks.txt\"));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        } catch (DukeInitializeException e) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            ui.printInitError();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        ui.printWelcomeMessage();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        while (!exitFlag) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            exitFlag \u003d ui.getUserCommand();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        ui.printByeMessage();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "durianpancakes": 29,
      "-": 3
    }
  },
  {
    "path": "src/main/java/duke/common/Messages.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "package duke.common;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": " * Class containing all message strings used by Duke."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "public class Messages {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public static final String MESSAGE_LOGO \u003d \" ____        _        \\n\""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            + \"|  _ \\\\ _   _| | _____ \\n\""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            + \"| | | | | | | |/ / _ \\\\\\n\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            + \"| |_| | |_| |   \u003c  __/\\n\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public static final String MESSAGE_WELCOME \u003d \"Welcome to your task assistant!\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public static final String MESSAGE_INIT_FAILED \u003d \"Failed to initalise Duke. Exiting...\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public static final String MESSAGE_SAVE_SUCCESSFUL \u003d \"Tasks saved successfully.\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public static final String MESSAGE_SAVE_FAILED \u003d \"Failed to save tasks. Some information may be lost.\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public static final String MESSAGE_GOODBYE \u003d \"Bye! See you again soon :)\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public static final String MESSAGE_ADD_TASK_SUCCESSFUL \u003d \"Added successfully: \";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public static final String MESSAGE_DELETE_TASK_SUCCESSFUL \u003d \"Noted, I have deleted this task \";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public static final String MESSAGE_LIST_EMPTY \u003d \"You have no tasks in the list!\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public static final String MESSAGE_INVALID_INPUT \u003d \"Sorry, I did not recognize that command\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Did you give me the wrong task number?\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public static final String MESSAGE_INCOMPLETE_INPUT \u003d \"Please check your input again!\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "durianpancakes": 23
    }
  },
  {
    "path": "src/main/java/duke/data/exceptions/DukeInitializeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "package duke.data.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": " * Thrown when an error occurs during the initialization of Duke."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "public class DukeInitializeException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "durianpancakes": 8
    }
  },
  {
    "path": "src/main/java/duke/data/exceptions/DukeInputException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "package duke.data.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": " * Thrown when an error occurs due to invalid input from the user."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "public class DukeInputException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "durianpancakes": 7
    }
  },
  {
    "path": "src/main/java/duke/data/task/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "package duke.data.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    protected LocalDateTime by;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     * Constructs a Deadline that is not done."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     *"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     * @param description String containing description of the Deadline."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     * @param by          LocalDateTime of the Deadline."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public Deadline (String description, LocalDateTime by) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        this.by \u003d by;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     * Constructs a Deadline with a specified done status."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     * @param description String containing description of the Deadline."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     * @param by          LocalDateTime of the Deadline."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     * @param isDone      Boolean containing the done status of the Deadline."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public Deadline (String description, LocalDateTime by, boolean isDone) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        this.by \u003d by;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        this.isDone \u003d isDone;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     * Getter method for the by of the Deadline."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     * @return LocalDateTime by of the Deadline."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public LocalDateTime getBy () {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        return this.by;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     * Returns the getTypeIcon() of the Deadline."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     * @return String containing the Type Icon of an Deadline."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public String getTypeIcon () {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        return \"[D]\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     * Returns the String representation of an Deadline."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     *"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     * @return String representation of the Deadline."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public String toString () {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        return super.toString()"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                + \" (by: \""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                + by.format(DateTimeFormatter.ofPattern(\"MMM d yyyy hh:mm a\"))"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                + \")\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "durianpancakes": 64
    }
  },
  {
    "path": "src/main/java/duke/data/task/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "package duke.data.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    protected LocalDateTime atStart;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    protected LocalDateTime atEnd;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     * Constructs an Event that is not done."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     * @param description String containing the description of the Event."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     * @param start       LocalDateTime start time of the Event."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     * @param end         LocalDateTime end time of the Event."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public Event (String description, LocalDateTime start, LocalDateTime end) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        this.atStart \u003d start;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        this.atEnd \u003d end;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     * Constructs an Event with a specified done status."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     * @param description String containing the description of the Event."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     * @param start       LocalDateTime start time of the Event."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     * @param end         LocalDateTime end time of the Event."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     * @param isDone      Boolean containing the done status of the Event."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public Event (String description, LocalDateTime start, LocalDateTime end, boolean isDone) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        this.atStart \u003d start;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        this.atEnd \u003d end;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        this.isDone \u003d isDone;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     * Getter method for the start time of the Event."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     * @return LocalDateTime containing the start time of the Event."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public LocalDateTime getAtStart () {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        return atStart;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     * Getter method for the end time of the Event."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     * @return LocalDateTime containing the end time of the Event."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public LocalDateTime getAtEnd () {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        return atEnd;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     * Returns the getTypeIcon() of the Event."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     *"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     * @return String containing the Type Icon of an Event."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public String getTypeIcon () {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        return \"[E]\";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     * Returns the String representation of an Event."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     *"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     * @return String representation of the Event."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public String toString () {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        return super.toString() + \" (at: \""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                + atStart.format(DateTimeFormatter.ofPattern(\"MMM d yyyy hh:mm a\"))"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                + \" to \""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                + atEnd.format(DateTimeFormatter.ofPattern(\"MMM d yyyy hh:mm a\"))"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                + \")\";"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "durianpancakes": 79
    }
  },
  {
    "path": "src/main/java/duke/data/task/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "package duke.data.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     * Constructs a Task that is not done."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     *"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     * @param description String containing description of the Task."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public Task (String description) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     * Getter method for the description of the Task."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     * @return String containing the description of the Task."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public String getDescription () {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     * Setter method for the description of the Task."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     * @param description String containing the description of the Task."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public void setDescription (String description) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     * Getter method for the done status of the Task."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     * @return Boolean of the done status of the Task."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public boolean getDone () {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        return isDone;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     * Setter method for the done status of the Task."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     * @param isDone Boolean of the done status intended for the Task."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public void setDone (boolean isDone) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        this.isDone \u003d isDone;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     * Getter method for the done status icon of the Task."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     *"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     * @return String containing the status icon."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public String getStatusIcon () {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        return \"[\" + (isDone ? \"\\u2713\" : \"\\u2718\") + \"]\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     * Returns a String containing the type icon of the Task."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     *"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     * @return String containing the type icon of the Task."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public String getTypeIcon () {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     * Returns the String representation of a Task."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     *"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     * @return String containing the representation of a Task."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public String toString () {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        return getTypeIcon() + getStatusIcon() + description;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "durianpancakes": 80
    }
  },
  {
    "path": "src/main/java/duke/data/task/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "package duke.data.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import duke.data.exceptions.DukeInputException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import duke.parser.Parser;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import duke.ui.UserInterface;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    private static ArrayList\u003cTask\u003e taskList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public TaskList () {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public TaskList (ArrayList\u003cTask\u003e inputTaskList) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        taskList \u003d inputTaskList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     * Prints the taskList using the UserInterface.printTaskList(...) method."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public void list () {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        UserInterface userInterface \u003d new UserInterface();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        userInterface.printTaskList(taskList);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     * Writes the taskList into tasks.txt."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public void save () {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        Storage storage \u003d new Storage();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        UserInterface userInterface \u003d new UserInterface();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            storage.save(taskList, \"/tasks.txt\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            userInterface.printSaveSuccess();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            userInterface.printSaveError();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     * Returns an ArrayList of tasks containing tasks that matches a keyword."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     * @param keyword String containing the keyword given by the user."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     * @return ArrayList of tasks containing tasks that matches the keyword."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public ArrayList\u003cTask\u003e findTasks (String keyword) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        ArrayList\u003cTask\u003e resultList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        for (Task task : taskList) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            if (task.getDescription().contains(keyword)) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                resultList.add(task);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        return resultList;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     * Add a Todo into the taskList."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     *"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     * @param commandArgs String input from user."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     * @throws DukeInputException If the user leaves the description empty."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public void addTodo (String commandArgs) throws DukeInputException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        UserInterface userInterface \u003d new UserInterface();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        if (commandArgs.equals(\"\")) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            throw new DukeInputException();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        Todo todo \u003d new Todo(commandArgs);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        taskList.add(todo);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        save();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        userInterface.printAddSuccessMsg(todo, taskList.size());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     * Add a Deadline into the taskList."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     *"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     * @param commandArgs String input from the user."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     * @throws DukeInputException If the user leaves the description empty or omits the /by separator."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public void addDeadline (String commandArgs) throws DukeInputException {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        UserInterface userInterface \u003d new UserInterface();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        if (commandArgs.equals(\"\")) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            throw new DukeInputException();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            Parser parser \u003d new Parser();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            Deadline deadline \u003d parser.parseDeadlineInput(commandArgs);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            taskList.add(deadline);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            save();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            userInterface.printAddSuccessMsg(deadline, taskList.size());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        } catch (StringIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            userInterface.printToUser(\"Did you forget /by?\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     * Add an Event into the taskList."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     *"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     * @param commandArgs String input from user."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     * @throws DukeInputException If the user leaves the description empty or omits the /at separator."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public void addEvent (String commandArgs) throws DukeInputException {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        UserInterface userInterface \u003d new UserInterface();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        if (commandArgs.equals(\"\")) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            throw new DukeInputException();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            Parser parser \u003d new Parser();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            Event event \u003d parser.parseEventInput(commandArgs);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            taskList.add(event);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            save();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            userInterface.printAddSuccessMsg(event, taskList.size());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        } catch (StringIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            userInterface.printToUser(\"Did you forget /at?\");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     * Set a valid task\u0027s status."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     *"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     * @param itemNum Integer index provided by user."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     * @param isDone  boolean for the Task."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     * @throws DukeInputException If the index provided is out of the ArrayList\u0027s size."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public void setTaskStatus (int itemNum, boolean isDone) throws DukeInputException {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        UserInterface userInterface \u003d new UserInterface();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        if (itemNum \u003e 0 \u0026\u0026 itemNum \u003c\u003d taskList.size()) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            int itemIdx \u003d itemNum - 1;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            Task task \u003d taskList.get(itemIdx);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            task.setDone(isDone);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            save();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            userInterface.printSetTaskMsg(task);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            userInterface.printIndexErrorMessage();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            throw new DukeInputException();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     * Delete a valid Task from the taskList."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     *"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     * @param itemNum Integer index provided by user."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     * @throws DukeInputException If the index provided is out of the ArrayList\u0027s size."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public void deleteTask (int itemNum) throws DukeInputException {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        UserInterface userInterface \u003d new UserInterface();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        if (itemNum \u003e 0 \u0026\u0026 itemNum \u003c\u003d taskList.size()) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            int itemIdx \u003d itemNum - 1;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            Task task \u003d taskList.get(itemIdx);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            taskList.remove(itemIdx);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            save();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            userInterface.printDeleteSuccessMsg(task, taskList.size());"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            userInterface.printIndexErrorMessage();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            throw new DukeInputException();"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     * Returns an ArrayList of tasks containing tasks occurring on a given LocalDate."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     *"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     * @param date LocalDate containing the date to be matched."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     * @return ArrayList of tasks containing tasks occurring on a given LocalDate."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     */"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public ArrayList\u003cTask\u003e tasksOnDate (LocalDate date) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        ArrayList\u003cTask\u003e resultList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        for (Task task : taskList) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            if (task instanceof Deadline) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                LocalDate deadlineDate \u003d ((Deadline) task).getBy().toLocalDate();"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                if (deadlineDate.isEqual(date)) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                    resultList.add(task);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            if (task instanceof Event) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                LocalDate eventDate \u003d ((Event) task).getAtStart().toLocalDate();"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                if (eventDate.isEqual(date)) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                    resultList.add(task);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        return resultList;"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "durianpancakes": 191
    }
  },
  {
    "path": "src/main/java/duke/data/task/Todo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "package duke.data.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "public class Todo extends Task {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     * Constructs a Todo that is not done."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     *"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     * @param taskTitle String containing the description of the Todo."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public Todo (String taskTitle) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        super(taskTitle);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     * Constructs a Todo with a specified done status."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     * @param taskTitle String containing the description of the Todo."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     * @param isDone    boolean containing the done status of the Todo."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public Todo (String taskTitle, boolean isDone) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        super(taskTitle);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        this.isDone \u003d isDone;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     * Returns a String containing the type icon of the Todo."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     * @return String containing the type icon of the Todo."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public String getTypeIcon () {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        return \"[T]\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     * Returns the String representation of a Todo."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     * @return String containing the representation of a Todo."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public String toString () {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        return super.toString();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "durianpancakes": 43
    }
  },
  {
    "path": "src/main/java/duke/parser/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "package duke.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import duke.data.exceptions.DukeInitializeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import duke.data.exceptions.DukeInputException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import duke.data.task.*;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import duke.ui.UserInterface;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     * Returns a Task input from tasks.txt."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     * @param encodedTask String from tasks.txt."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     * @return Task"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public Task parseTaskFromString (String encodedTask) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        final String[] data \u003d encodedTask.trim().split(\"\\\\|\", 3);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        switch (data[0]) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            case \"[T]\":"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                return parseTodo(data);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            case \"[D]\":"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                return parseDeadline(data);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            case \"[E]\":"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                return parseEvent(data);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                return null;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     * Returns a Deadline input from user."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     * @param commandArgs String input from user."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     * @return Deadline."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     * @throws DukeInputException If user leaves /by of Deadline empty, or when date input of /by is invalid."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public Deadline parseDeadlineInput (String commandArgs) throws DukeInputException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        UserInterface userInterface \u003d new UserInterface();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        final String matchByPrefix \u003d \"/by\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        final int indexOfByPrefix \u003d commandArgs.indexOf(matchByPrefix);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        String description \u003d commandArgs.substring(0, indexOfByPrefix).trim();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        String byString \u003d commandArgs.substring(indexOfByPrefix).replace(\"/by\", \"\").trim();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        if (byString.equals(\"\")) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            userInterface.printToUser(\"ERROR: Deadline by cannot be empty!\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            throw new DukeInputException();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        LocalDateTime by;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            by \u003d parseLocalDateTime(byString);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            userInterface.printToUser(\"ERROR: Date input is invalid!\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            throw new DukeInputException();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        return new Deadline(description, by);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     * Returns an Event input by user."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     *"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     * @param commandArgs String input from user."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     * @return Event."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     * @throws DukeInputException If user leaves /at of Event empty."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public Event parseEventInput (String commandArgs) throws DukeInputException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        UserInterface userInterface \u003d new UserInterface();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        final String matchByPrefix \u003d \"/at\";"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        final int indexOfByPrefix \u003d commandArgs.indexOf(matchByPrefix);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        String description \u003d commandArgs.substring(0, indexOfByPrefix).trim();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        String at \u003d commandArgs.substring(indexOfByPrefix).replace(matchByPrefix, \"\").trim();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        if (at.equals(\"\")) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            userInterface.printToUser(\"ERROR: Event at cannot be empty!\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            throw new DukeInputException();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        LocalDateTime atStart, atEnd;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        final String matchToPrefix \u003d \"/to\";"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        String[] startString \u003d at.replace(matchToPrefix, \"|\").split(\"\\\\|\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            atStart \u003d parseLocalDateTime(startString[0].trim());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            atEnd \u003d parseLocalDateTime(startString[1].trim());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            userInterface.printToUser(\"ERROR: Date input is invalid!\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            throw new DukeInputException();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        return new Event(description, atStart, atEnd);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    private LocalDateTime parseLocalDateTime (String localDateTimeString) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        System.out.println(localDateTimeString);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        return LocalDateTime.parse(localDateTimeString, DateTimeFormatter.ofPattern(\"yyyy-MM-dd HHmm\"));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     * Returns a Todo parsed from tasks.txt."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     *"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     * @param data String array containing Todo data."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     * @return Todo."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    private Todo parseTodo (String[] data) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        boolean isDone;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        String description;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        isDone \u003d Boolean.parseBoolean(data[1]);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        description \u003d data[2];"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        return new Todo(description, isDone);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     * Returns an Event parsed from tasks.txt."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     *"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     * @param data String array containing Event data."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     * @return Event."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    private Event parseEvent (String[] data) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        boolean isDone;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        String description;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        isDone \u003d Boolean.parseBoolean(data[1]);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        String[] eventInfo \u003d data[2].trim().split(\"\\\\|\", 3);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        description \u003d eventInfo[0];"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        LocalDateTime start \u003d LocalDateTime.parse(eventInfo[1]);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        LocalDateTime end \u003d LocalDateTime.parse(eventInfo[2]);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        return new Event(description, start, end, isDone);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     * Returns a Deadline parsed from tasks.txt."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     *"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     * @param data String array containing Deadline data."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     * @return Deadline."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    private Deadline parseDeadline (String[] data) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        boolean isDone;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        String description;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        isDone \u003d Boolean.parseBoolean(data[1]);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        String[] deadlineInfo \u003d data[2].trim().split(\"\\\\|\", 2);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        description \u003d deadlineInfo[0];"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        String byString \u003d deadlineInfo[1];"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        return new Deadline(description, LocalDateTime.parse(byString), isDone);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     * Returns a boolean to determine if Duke should continue running."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     *"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     * @param userInput User input from UserInterface class."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     * @return boolean exitFlag."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     * @throws DukeInputException If input from user is invalid."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     */"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public boolean parseCommand (String userInput) throws DukeInputException {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        UserInterface userInterface \u003d new UserInterface();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        Storage storage \u003d new Storage();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        TaskList taskList;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            taskList \u003d new TaskList(storage.load(\"/tasks.txt\"));"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            final String[] split \u003d userInput.trim().split(\"\\\\s+\", 2);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            final String[] commandTypeAndParams \u003d split.length \u003d\u003d 2 ? split : new String[] {split[0], \"\"};"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            final String commandType \u003d commandTypeAndParams[0];"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            final String commandArgs \u003d commandTypeAndParams[1];"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            switch (commandType) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                case \"bye\":"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                    taskList.save();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                    return true;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                case \"list\":"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                    if (!commandArgs.isEmpty()) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                        try {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                            userInterface.printTaskList(taskList.tasksOnDate(LocalDate.parse(commandArgs)));"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                            userInterface.printToUser(\"ERROR: Invalid date given!\");"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                            throw new DukeInputException();"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                        taskList.list();"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                case \"done\":"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                    if (!commandArgs.isEmpty()) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                        try {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                            int itemNum \u003d Integer.parseInt(commandArgs);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                            taskList.setTaskStatus(itemNum, true);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                            throw new DukeInputException();"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                case \"todo\":"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                    try {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                        taskList.addTodo(commandArgs);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                        return false;"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                    } catch (DukeInputException e) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                        userInterface.printAddError();"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                case \"event\":"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                    try {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                        taskList.addEvent(commandArgs);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                    } catch (DukeInputException e) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                        userInterface.printAddError();"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                case \"deadline\":"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                    try {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                        taskList.addDeadline(commandArgs);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                    } catch (DukeInputException e) {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                        userInterface.printAddError();"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                case \"delete\":"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                    if (!commandArgs.isEmpty()) {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                        try {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                            int itemNum \u003d Integer.parseInt(commandArgs);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                            taskList.deleteTask(itemNum);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                            throw new DukeInputException();"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                case \"find\":"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                    if (!commandArgs.isEmpty()) {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                        userInterface.printTaskList(taskList.findTasks(commandArgs));"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                        userInterface.printToUser(\"ERROR: You need to give me a keyword to find!\");"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                        throw new DukeInputException();"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                default:"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                    throw new DukeInputException();"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        } catch (DukeInitializeException e) {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            userInterface.printInitError();"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "durianpancakes": 241
    }
  },
  {
    "path": "src/main/java/duke/storage/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "package duke.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import duke.data.exceptions.DukeInitializeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import duke.data.task.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "@SuppressWarnings(\"ResultOfMethodCallIgnored\")"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    private static final String DIRECTORY_PATH \u003d new File(\"data\").getAbsolutePath();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     * Returns an ArrayList of tasks processed from Duke\u0027s storage."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     * @param dataPath String containing data path of file to be loaded"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     * @return ArrayList containing Tasks from Duke\u0027s storage."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     * @throws DukeInitializeException If the data directory doesn\u0027t exist, or when the creation"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     *                                 of tasks.txt fails."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public ArrayList\u003cTask\u003e load (String dataPath) throws DukeInitializeException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        final String filePath \u003d DIRECTORY_PATH + dataPath;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        if (Files.exists(Path.of(DIRECTORY_PATH))) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            // Data directory exists"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            File file \u003d new File(filePath);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            ArrayList\u003cString\u003e data \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                Scanner sc \u003d new Scanner(file);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                while (sc.hasNext()) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                    String dataString \u003d sc.nextLine();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                    data.add(dataString);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            } catch (IOException e) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                throw new DukeInitializeException();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            TaskListDecoder taskListDecoder \u003d new TaskListDecoder();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            return taskListDecoder.decodeTaskList(data);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            // Data directory does not exist. Initialize data directory."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                createDataFile();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            } catch (IOException e) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                throw new DukeInitializeException();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            return new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     * Creates the .txt file to store tasks."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     *"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     * @throws IOException If the creation of the .txt file fails."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    private void createDataFile () throws IOException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        File file \u003d new File(Storage.DIRECTORY_PATH);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        boolean dirCreated \u003d file.mkdir();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        if (dirCreated) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            file \u003d new File(Storage.DIRECTORY_PATH + \"/tasks.txt\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            file.createNewFile();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     * Saves the ArrayList of tasks in a String format into Duke\u0027s storage."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     *"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     * @param taskList ArrayList of tasks to be saved."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     * @throws IOException If there is an error while writing to Duke\u0027s storage."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public void save (ArrayList\u003cTask\u003e taskList, String dataPath) throws IOException {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        final String filePath \u003d DIRECTORY_PATH + dataPath;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        List\u003cString\u003e encodedTaskList \u003d TaskListEncoder.encodeTaskList(taskList);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        Files.write(Path.of(filePath), encodedTaskList);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "durianpancakes": 82
    }
  },
  {
    "path": "src/main/java/duke/storage/TaskListDecoder.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "package duke.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import duke.data.task.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import duke.parser.Parser;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "public class TaskListDecoder {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     * Returns an ArrayList of tasks decoded from an encoded ArrayList of strings."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     * @param encodedTaskList ArrayList of strings."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     * @return ArrayList of tasks containing the decoded Tasks."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public ArrayList\u003cTask\u003e decodeTaskList (List\u003cString\u003e encodedTaskList) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        final ArrayList\u003cTask\u003e decodedTasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        for (String encodedTask : encodedTaskList) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            decodedTasks.add(decodeTaskFromString(encodedTask));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        return decodedTasks;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     * Returns a Task decoded from an encoded String."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     * @param encodedTask encoded String of a Task."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     * @return Task converted from String."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    private Task decodeTaskFromString (String encodedTask) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        Parser parser \u003d new Parser();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        return parser.parseTaskFromString(encodedTask);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "durianpancakes": 35
    }
  },
  {
    "path": "src/main/java/duke/storage/TaskListEncoder.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "package duke.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import duke.data.task.Deadline;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import duke.data.task.Event;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import duke.data.task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import duke.data.task.Todo;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "public class TaskListEncoder {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     * Returns an ArrayList of strings representation of an ArrayList of tasks."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     * @param taskList ArrayList of tasks."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     * @return ArrayList of strings containing the encoded Strings of Tasks."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public static ArrayList\u003cString\u003e encodeTaskList (ArrayList\u003cTask\u003e taskList) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        final ArrayList\u003cString\u003e encodedTasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        for (Task task : taskList) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            encodedTasks.add(encodeTaskToString(task));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        return encodedTasks;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     * Returns an encoded String representation of a Task."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     * @param task from the ArrayList"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     * @return String converted from Task."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    private static String encodeTaskToString (Task task) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        if (task instanceof Todo) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            Todo todo \u003d (Todo) task;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            return todo.getTypeIcon() + \"|\" + todo.getDone() + \"|\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                    + todo.getDescription();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        } else if (task instanceof Deadline) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            Deadline deadline \u003d (Deadline) task;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            return deadline.getTypeIcon() + \"|\" + deadline.getDone() + \"|\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                    + deadline.getDescription() + \"|\" + deadline.getBy();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        } else if (task instanceof Event) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            Event event \u003d (Event) task;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            return event.getTypeIcon() + \"|\" + event.getDone() + \"|\""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                    + event.getDescription() + \"|\" + event.getAtStart()"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                    + \"|\" + event.getAtEnd();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "durianpancakes": 49
    }
  },
  {
    "path": "src/main/java/duke/ui/UserInterface.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "package duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import duke.common.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import duke.data.exceptions.DukeInputException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import duke.data.task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import duke.data.task.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import duke.parser.Parser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import java.io.InputStream;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import java.io.PrintStream;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "public class UserInterface {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    private static final String DIVIDER \u003d \"---------------------------------------\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    private static final String LINE_SEPARATOR \u003d System.lineSeparator();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    private static Scanner in \u003d null;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    private static PrintStream out \u003d null;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public UserInterface () {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        this(System.in, System.out);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public UserInterface (InputStream in, PrintStream out) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        UserInterface.in \u003d new Scanner(in);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        UserInterface.out \u003d out;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     * Displays a message upon successful adding of a Task into the taskList"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     * @param task"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     * @param totalTasks"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public void printAddSuccessMsg (Task task, int totalTasks) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        TaskList taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        boolean containsOneTask \u003d totalTasks \u003d\u003d 1;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        out.println(DIVIDER);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        out.println(Messages.MESSAGE_ADD_TASK_SUCCESSFUL + task);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        if (containsOneTask) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            out.println(\"You have \" + totalTasks + \" task in the list\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            out.println(\"You have \" + totalTasks + \" tasks in the list\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        taskList.list();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        out.print(LINE_SEPARATOR);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        out.println(DIVIDER);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     * Displays a message upon successful deletion of a Task from a taskList"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     *"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     * @param task       the Task that is deleted"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     * @param totalTasks total number of tasks in the current taskList"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public void printDeleteSuccessMsg (Task task, int totalTasks) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        boolean containsOneTask \u003d totalTasks \u003d\u003d 1;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        TaskList taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        out.println(DIVIDER);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        out.println(Messages.MESSAGE_DELETE_TASK_SUCCESSFUL);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        out.println(task);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        if (containsOneTask) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            System.out.println(\"You have \" + totalTasks + \" task in the list\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        } else if (totalTasks \u003d\u003d 0) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            System.out.println(Messages.MESSAGE_LIST_EMPTY);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            System.out.println(\"You have \" + totalTasks + \" tasks in the list\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        taskList.list();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        out.print(LINE_SEPARATOR);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        out.println(DIVIDER);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     * Displays a message upon successful setting of a Task\u0027s isDone."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     *"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     * @param task the Task that is set"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public void printSetTaskMsg (Task task) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        out.println(DIVIDER);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        if (task.getDone()) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            System.out.println(\"Nice! I\u0027ve marked this task as done:\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            System.out.println(task);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            System.out.println(\"I\u0027ve marked this task as not done:\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            System.out.println(task);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        out.print(LINE_SEPARATOR);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        out.println(DIVIDER);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     * Displays an ArrayList of Tasks."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     *"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     * @param taskList ArrayList\u003cTask\u003e containing Tasks."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public void printTaskList (ArrayList\u003cTask\u003e taskList) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        printToUser(DIVIDER);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        if (taskList.isEmpty()) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            System.out.println(\"You have not added any tasks yet!\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            System.out.println(\"Here are the tasks in your list:\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            for (int i \u003d 0; i \u003c taskList.size(); i++) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                int itemIdx \u003d i + 1;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                Task task \u003d taskList.get(i);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                out.println(itemIdx + \". \" + task);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        printToUser(LINE_SEPARATOR);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        printToUser(DIVIDER);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     * Method to read user input from Scanner."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     *"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     * @return boolean to determine if Duke continues running."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public boolean getUserCommand () {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        out.println(\"What would you like me to do?\");"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        String userInput \u003d in.nextLine();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        Parser parser \u003d new Parser();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            return parser.parseCommand(userInput);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        } catch (DukeInputException e) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            printToUser(DIVIDER);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            printToUser(Messages.MESSAGE_INVALID_INPUT);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            printHelpMessage();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            printToUser(LINE_SEPARATOR);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            printToUser(DIVIDER);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     * Displays a welcome message."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public void printWelcomeMessage () {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        printToUser(Messages.MESSAGE_LOGO);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        printToUser(Messages.MESSAGE_WELCOME);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        printHelpMessage();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     * Displays a list of commands available to the user."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public void printHelpMessage () {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        printToUser(\"The following commands are available:\");"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        printToUser(\"1. list\");"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        printToUser(\"2. list DATE \u003cyyyy-MM-dd\u003e\");"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        printToUser(\"3. todo DESCRIPTION\");"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        printToUser(\"4. event DESCRIPTION /at DATE_TIME \u003cyyyy-MM-dd HHmm\u003e /to DATE_TIME \u003cyyyy-MM-dd HHmm\u003e\");"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        printToUser(\"5. deadline DESCRIPTION /by \u003cyyyy-MM-dd HHmm\u003e\");"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        printToUser(\"6. done ITEM_NUMBER\");"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        printToUser(\"7. delete ITEM_NUMBER\");"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        printToUser(\"8. find KEYWORD\");"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     * Displays an error message upon failed initialization."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     */"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public void printInitError () {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        printToUser(DIVIDER);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        printToUser(Messages.MESSAGE_INIT_FAILED);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        printToUser(DIVIDER);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     * Displays an error message upon an invalid input while adding a Task."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     */"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public void printAddError () {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        printToUser(DIVIDER);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        printToUser(Messages.MESSAGE_INCOMPLETE_INPUT);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        printToUser(DIVIDER);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     * Displays a message to the user"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     *"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     * @param string"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     */"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public void printToUser (String string) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        printToUser(string);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     * Displays a message upon the successful saving of the taskList."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     */"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public void printSaveSuccess () {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        printToUser(Messages.MESSAGE_SAVE_SUCCESSFUL);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     * Displays an error message upon the failure to save the taskList."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     */"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public void printSaveError () {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        printToUser(DIVIDER);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        printToUser(Messages.MESSAGE_SAVE_FAILED);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        printToUser(DIVIDER);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public void printByeMessage () {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        printToUser(Messages.MESSAGE_GOODBYE);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public void printIndexErrorMessage () {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        printToUser(Messages.MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "durianpancakes": 211
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "list"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "todo eat dinner"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "event John\u0027s birthday party /at 270320 3.00pm - 5.00pm"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "deadline CG2027 assignment /by this saturday 2359"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "list"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "done 3"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "list"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "done 2"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "list"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "done 1"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "list"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "durianpancakes": 12
    }
  },
  {
    "path": "text-ui-test/runtest.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@ECHO OFF"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "REM create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "if not exist ..\\bin mkdir ..\\bin"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "REM delete output from previous run"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "del ACTUAL.TXT"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "REM compile the code into the bin folder"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "javac  -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\main\\java\\duke\\Duke.java"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "IF ERRORLEVEL 1 ("
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    echo ** BUILD FAILURE **"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    exit /b 1"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ")"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "REM no error here, errorlevel \u003d\u003d 0"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "java -classpath ..\\bin Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "REM compare the output to the expected output"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "FC ACTUAL.TXT EXPECTED.TXT"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "@pause"
      }
    ],
    "authorContributionMap": {
      "durianpancakes": 4,
      "-": 19
    }
  }
]
