[
  {
    "path": "README.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# Duke project template"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "This is a project template for a greenfield Java project. It\u0027s named after the Java mascot _Duke_. Given below are instructions on how to use it."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "## Setting up in Intellij"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "Prerequisites: JDK 11, update Intellij to the most recent version."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "1. Open Intellij (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "1. Set up the correct JDK version, as follows:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Click `Configure` \u003e `Structure for New Projects` and then `Project Settings` \u003e `Project` \u003e `Project SDK`"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "   1. If JDK 11 is listed in the drop down, select it. If it is not, click `New...` and select the directory where you installed JDK 11"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Click `OK`"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "1. Import the project into Intellij as follows:"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Click `Open or Import`."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Select the project directory, and click `OK`"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "   1. If there are any further prompts, accept the defaults."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "1. After the importing is complete, locate the `src/main/java/Duke.Duke.java` file, right-click it, and choose `Run Duke.Duke.main()`. If the setup is correct, you should see something like the below:"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "   Hello from"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    ____        _        "
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "   |  _ \\ _   _| | _____ "
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "   | | | | | | | |/ / _ \\"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "   | |_| | |_| |   \u003c  __/"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "   |____/ \\__,_|_|\\_\\___|"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      }
    ],
    "authorContributionMap": {
      "BenardoTang": 1,
      "-": 25
    }
  },
  {
    "path": "src/main/java/Duke/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "package Duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    private static final int NUMBER_OF_FIELDS_DEADLINE_FORMAT \u003d 4; // format: D | 0 | return book | June 6th"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    private static final String DEADLINE_CHARACTER \u003d \"D\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    protected String by;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    public Deadline(String description, String by) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        this.by \u003d by;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    public String getBy() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        return this.by;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    public static Deadline checkDeadlineError(String in) throws DukeException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        Scanner query \u003d new Scanner(in);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        if(in.contains(\"deadline /by\")){"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            throw new DukeException(\"Description of a deadline cannot be empty.\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        if(!in.contains(\"/by\")){"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            throw new DukeException(\"Did not detect \u0027/by\u0027 from user, please try again.\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        int index \u003d in.indexOf(\"/by\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        if(in.length() \u003c\u003d (index+3)){"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            throw new DukeException(\"End date of a deadline cannot be empty.\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        in \u003d in.replace(\"deadline\",\"\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        String[] deadlineSplit \u003d in.split(\"/by\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        return new Deadline(deadlineSplit[0], deadlineSplit[1]);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        return \"[D]\" + super.toString() + \" (by: \" + by + \")\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    public String[] getTaskData(){"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        String[] taskValues \u003d new String[NUMBER_OF_FIELDS_DEADLINE_FORMAT];"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        taskValues[0] \u003d DEADLINE_CHARACTER;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        if (this.isDone) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            taskValues[1] \u003d TASK_DONE_NOTATION;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            taskValues[1] \u003d TASK_NOT_DONE_NOTATION;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        taskValues[2] \u003d this.getDescription();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        taskValues[3] \u003d this.getBy();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        return taskValues;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BenardoTang": 56
    }
  },
  {
    "path": "src/main/java/Duke/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "package Duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    //Constants"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    private static final String MESSAGE_BOUNDARY \u003d \"____________________________________________________________\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    private static final String LOGO \u003d \" ____        _        \\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"|  _ \\\\ _   _| | _____ \\n\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"| | | | | | | |/ / _ \\\\\\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"| |_| | |_| |   \u003c  __/\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    private static final String FILEPATH \u003d \"Duke/duke.txt\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    //class variables"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    private final List\u003cTask\u003e myTasks;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    //Constructor for class Duke"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    public Duke() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        this.myTasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    //Default response template to user"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    private void dukePrintTaskList(String sampleText) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        System.out.println(MESSAGE_BOUNDARY);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        System.out.println(sampleText);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        System.out.println(MESSAGE_BOUNDARY);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    //Print out full task list"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    private void dukePrintTaskList(String sampleText , List\u003cTask\u003e listOfTasks) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        System.out.println(MESSAGE_BOUNDARY);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        System.out.println(sampleText);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        int index \u003d 0;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        for(Task t:listOfTasks){"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            index +\u003d1;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            System.out.println(String.format(\"%d\",index) +\". \"+ t);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        System.out.println(MESSAGE_BOUNDARY);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    //Respond when user has done a task"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    private void dukeRespondTask(String sampleText , Task userTask) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        System.out.println(MESSAGE_BOUNDARY);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        System.out.println(sampleText);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        System.out.println(userTask);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        System.out.println(MESSAGE_BOUNDARY);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    //mark task as done"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    private Task taskIsDone(Scanner userInput) throws DukeException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        if(!userInput.hasNextInt()) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            throw new DukeException(\"Task reference number needs to be an integer...\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        int index \u003d userInput.nextInt();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        if(userInput.hasNext()) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            throw new DukeException(\"Too many arguments input for the \u0027mark as done\u0027 comment.\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        if(index \u003c\u003d this.myTasks.size() \u0026\u0026 index \u003e0){"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            this.myTasks.get(index-1).markAsDone();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            return this.myTasks.get(index-1);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        throw new DukeException(\"No such task was found\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    private static void saveMyTasksToFile(String filePath, List\u003cTask\u003e myTasks) throws IOException {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        FileWriter fw;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        try{"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            fw \u003d new FileWriter(filePath); //overwrite existing file contents when called"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            throw new IOException();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        //convert newTaskData to string format for storing in duke.txt"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        String newTaskString;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        //boolean hasDescription \u003d false;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        for (int i\u003d0; i \u003c myTasks.size(); i++) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            Task newTaskData \u003d myTasks.get(i);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            if (newTaskData instanceof ToDo) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "                //Format of todo is different with 3 fields, while Deadline/Event has 4"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "                newTaskString \u003d newTaskData.getTaskData()[0] + \" | \" + newTaskData.getTaskData()[1] + \" | \""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "                        + newTaskData.getTaskData()[2] + System.lineSeparator();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "                newTaskString \u003d newTaskData.getTaskData()[0] + \" | \" + newTaskData.getTaskData()[1] + \" | \""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "                        + newTaskData.getTaskData()[2] + \" | \" + newTaskData.getTaskData()[3] + System.lineSeparator();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            fw.write(newTaskString);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        fw.close();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    private static void loadFileToMyTasks(String filePath, List\u003cTask\u003e myTasks) throws FileNotFoundException, DukeException {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        File loadingFile \u003d new File(filePath);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        if (!loadingFile.exists()) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            throw new FileNotFoundException();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        Scanner fileContent \u003d new Scanner(loadingFile);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        while (fileContent.hasNext()) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            //For each new line, add task to List myTasks"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            //Process each line first, and construct new Todo/Event/Deadline object"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            String taskString \u003d fileContent.nextLine();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            String[] splitTaskString \u003d taskString.trim().split(\" \\\\| \");"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            Task loadTaskToList;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            switch(splitTaskString[0].toUpperCase()) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            case (\"T\"):"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "                loadTaskToList \u003d new ToDo(splitTaskString[2]);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            case (\"E\"):"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "                loadTaskToList \u003d new Event(splitTaskString[2], splitTaskString[3]);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            case (\"D\"):"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "                loadTaskToList \u003d new Deadline(splitTaskString[2], splitTaskString[3]);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "                throw new DukeException(\"There seems to be an error loading a task, sorry...\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            //if task was previously marked done already, make sure to mark it as done when loading to myTasks"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            if (splitTaskString[1].equals(\":)\")) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "                loadTaskToList.markAsDone();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            myTasks.add(loadTaskToList);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        System.out.println(\"Hi user! your previous tasks have been loaded into Duke...\");"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    private static void autoSaveIntoFile(List\u003cTask\u003e myTasks){"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            saveMyTasksToFile(FILEPATH, myTasks);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            System.out.println(\"Encountered an error trying to save your task into duke.txt\");"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    private Task deleteTask(Scanner userInput) throws DukeException {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        if(!userInput.hasNextInt()) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            throw new DukeException(\"Task reference number needs to be an integer...\");"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        int index \u003d userInput.nextInt();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        if(userInput.hasNext()) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            throw new DukeException(\"Too many arguments input for the \u0027delete\u0027 command.\");"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        if(index \u003c\u003d this.myTasks.size() \u0026\u0026 index \u003e0){"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            Task taskRef \u003d this.myTasks.get(index-1);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            this.myTasks.remove(index-1);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            return taskRef;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        throw new DukeException(\"No such task was found\");"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    //Query from user.Boolean represents whether Duke should continue the chat."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    public Boolean shouldGiveResponse(String query) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        boolean shouldContinueChat \u003d true;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        Scanner in \u003d new Scanner(query);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        Task newItem \u003d null;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        //parse user query"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            if(!in.hasNext()){"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "                throw new DukeException(\"Type something man...\");"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            String userCommand \u003d in.next();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            switch (userCommand){"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            case \"deadline\":"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "                newItem \u003d Deadline.checkDeadlineError(query);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "                autoSaveIntoFile(myTasks);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            case \"todo\":"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "                newItem \u003d ToDo.checkToDoError(query);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "                autoSaveIntoFile(myTasks);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            case \"event\":"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "                newItem \u003d Event.checkEventError(query);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "                autoSaveIntoFile(myTasks);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            case \"list\":"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "                dukePrintTaskList(\"Here are the tasks in your list: \", myTasks);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            case \"done\":"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "                Task completedTask \u003d taskIsDone(in);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "                dukeRespondTask(\"Nice! I\u0027ve marked this task as done:\", completedTask);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "                autoSaveIntoFile(myTasks);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            case \"delete\":"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "                Task deletedTask \u003d deleteTask(in);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "                dukeRespondTask(\"Noted! I\u0027ve removed this task for you:\", deletedTask);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "                autoSaveIntoFile(myTasks);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            case \"bye\":"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "                dukePrintTaskList(\"Bye, hope to see you soon! \");"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "                autoSaveIntoFile(myTasks);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "                shouldContinueChat \u003d false;"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "                throw new DukeException(\"Kid, i don\u0027t know what you just said. Try again...\");"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        } catch (DukeException ex) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            dukePrintTaskList(\"(O_o) OOPS! \" + ex.getMessage());"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        if (newItem !\u003d null){"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            this.myTasks.add(newItem);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            dukeRespondTask(\"Hey kid, i\u0027ve added: \", newItem);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            String plural \u003d ((this.myTasks.size() \u003e 1) ? \"s\" : \"\");"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            dukePrintTaskList(\"Now you have \" + myTasks.size() + \" task\" + plural + \" in the list.\");"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        return shouldContinueChat;"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    //To run Duke\u0027s program on start"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    public void dukeIntro() {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        boolean repeat \u003d true;"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        Scanner scanner \u003d new Scanner(System.in);  // Create a Scanner object"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        // Load duke.txt on startup. creates new file with duke.txt in relative path if duke.txt does not exist"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            loadFileToMyTasks(FILEPATH, myTasks);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        } catch (FileNotFoundException | DukeException e) {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            System.out.println(\"Can\u0027t seem to load from file.Creating a new file duke.txt in new folder Duke...\");"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            File newDirectory \u003d new File(\"Duke\");"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            boolean isNewDirectoryCreated \u003d newDirectory.mkdir();"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            if (isNewDirectoryCreated) {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "                File newFile \u003d new File(FILEPATH);"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "                    newFile.createNewFile();"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "                } catch (IOException ex) {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "                    System.out.println(\"Failed to create file in new directory\");"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "                }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        System.out.print(LOGO);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        dukePrintTaskList(\"Hello! I\u0027m Duke d(^u^)\\nWhat can I do for you?\");"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        while(repeat){"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            String userQuery \u003d scanner.nextLine();"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            repeat \u003d shouldGiveResponse(userQuery);"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        scanner.close();"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        Duke myObj \u003d new Duke();"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        myObj.dukeIntro();"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BenardoTang": 246,
      "-": 7
    }
  },
  {
    "path": "src/main/java/Duke/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "package Duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    public DukeException(String message) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "/* use when user uses wrong terms, example: blah, and not the keywords,"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": " */"
      }
    ],
    "authorContributionMap": {
      "BenardoTang": 9
    }
  },
  {
    "path": "src/main/java/Duke/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "package Duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    private static final int NUMBER_OF_FIELDS_EVENT_FORMAT \u003d 4;// format: E | 0 | project meeting | Aug 6th 2-4pm"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    private static final String EVENT_CHARACTER \u003d \"E\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    protected String at;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    public Event(String description, String at) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        this.at \u003d at;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    public String getAt() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        return this.at;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    public static Event checkEventError(String in) throws DukeException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        Scanner query \u003d new Scanner(in);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        if(in.contains(\"event /at\")){"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            throw new DukeException(\"Description of an Event cannot be empty.\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        if(!in.contains(\"/at\")){"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            throw new DukeException(\"Did not detect \u0027/at\u0027 from user, please try again.\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        int index \u003d in.indexOf(\"/at\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        if(in.length() \u003c\u003d (index+3)){"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            throw new DukeException(\"Venue of an Event cannot be empty.\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        in \u003d in.replace(\"event\",\"\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        String[] eventSplit \u003d in.split(\"/at\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        return new Event(eventSplit[0], eventSplit[1]);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        return \"[E]\" + super.toString() + \" (at: \" + at + \")\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    public String[] getTaskData(){"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        String[] taskValues \u003d new String[NUMBER_OF_FIELDS_EVENT_FORMAT];"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        taskValues[0] \u003d EVENT_CHARACTER;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        if (this.isDone) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            taskValues[1] \u003d TASK_DONE_NOTATION;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            taskValues[1] \u003d TASK_NOT_DONE_NOTATION;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        taskValues[2] \u003d this.getDescription();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        taskValues[3] \u003d this.getAt();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        return taskValues;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BenardoTang": 56
    }
  },
  {
    "path": "src/main/java/Duke/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "package Duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "public abstract class Task {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        protected String description;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        protected boolean isDone;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        protected final String TASK_DONE_NOTATION \u003d \":)\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        protected final String TASK_NOT_DONE_NOTATION \u003d \":(\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        public Task(String description) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            this.description \u003d description;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            this.isDone \u003d false;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        public String getDescription(){"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        return this.description;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        public String getStatusIcon() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            return (isDone ? \"(^u^)\" : \"(\u0027n\u0027)\"); //return tick or X symbols"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        public void markAsDone() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            this.isDone \u003d true;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        public String toString() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            return String.format(\"[%s]%s\", getStatusIcon(), this.description);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        public abstract String[] getTaskData();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BenardoTang": 33
    }
  },
  {
    "path": "src/main/java/Duke/ToDo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "package Duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "public class ToDo extends Task {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    protected String by;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    public static final int NUMBER_OF_FIELDS_TODO_FORMAT \u003d 3;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    public static final String TODO_CHARACTER \u003d \"T\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    public ToDo(String description) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    public static ToDo checkToDoError(String in) throws DukeException{"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        Scanner query \u003d new Scanner(in);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        if(in.trim().matches(\"todo\")){"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            throw new DukeException(\"Description of a task cannot be empty.\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        in \u003d in.replace(\"todo\",\"\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        return new ToDo(in);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        return \"[T]\" + super.toString();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    public String[] getTaskData(){"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        String[] taskValues \u003d new String[NUMBER_OF_FIELDS_TODO_FORMAT];"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        taskValues[0] \u003d TODO_CHARACTER;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        if (this.isDone) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            taskValues[1] \u003d TASK_DONE_NOTATION;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "            taskValues[1] \u003d TASK_NOT_DONE_NOTATION;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        taskValues[2] \u003d this.getDescription();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "        return taskValues;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BenardoTang": 40
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "BenardoTang": 1
    }
  },
  {
    "path": "text-ui-test/runtest.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@ECHO OFF"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "REM create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "if not exist ..\\bin mkdir ..\\bin"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "REM delete output from previous run"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "del ACTUAL.TXT"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "REM compile the code into the bin folder"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "javac  -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\main\\java\\Duke\\*.java"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "IF ERRORLEVEL 1 ("
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    echo ********** BUILD FAILURE **********"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    exit /b 1"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ")"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "REM no error here, errorlevel \u003d\u003d 0"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "java -classpath ..\\bin Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "REM compare the output to the expected output"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "BenardoTang"
        },
        "content": "FC ACTUAL.TXT EXPECTED.TXT"
      }
    ],
    "authorContributionMap": {
      "BenardoTang": 2,
      "-": 19
    }
  }
]
